{"Questions": [{"points": "1", "Answer": "0", "correct_ans_explanation": "The least suitable class for containing a compareTo method would be the class that is easily comparable. For example, two cars cannot be easily compared because the comparison would most likely be subjective. Therefore, we would need a compareTo method for this class. However, comparing two numbers is not difficult, and therefore does not deserve a compareTo method. As a result, the Point class with double x and y is the least suitable candidate for containing a compareTo method. \n", "wrong_ans_explanation": "The least suitable class for containing a compareTo method would be the class that is easily comparable. For example, two cars cannot be easily compared because the comparison would most likely be subjective. Therefore, we would need a compareTo method for this class. However, comparing two numbers is not difficult, and therefore does not deserve a compareTo method. As a result, the Point class with double x and y is the least suitable candidate for containing a compareTo method. \n", "question": "Which of the following classes is the least suitable candidate for containing a compareTo method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \tpublic class Point              \n    {\n        private double x;\n        private double y;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Name\n    {\n        private String firstName;\n        private String lastName;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Car\n    {\n        private int modelNumber;\n        private int year;\n        private double price;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Point\n    {\n        private String name;\n        private double gpa;\n        //various methods follow\n            \u2026\n    }\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since the LibraryList class will store an array of Book objects, then the LibraryList class can essentially be considered to have a higher sophistication than the Book class. Therefore, if we plan to implement the Book class first, then we are essentially starting from the bottom and building our way up towards more sophisticated classes. Hence, bottom-up development is being used.\n", "wrong_ans_explanation": "Since the LibraryList class will store an array of Book objects, then the LibraryList class can essentially be considered to have a higher sophistication than the Book class. Therefore, if we plan to implement the Book class first, then we are essentially starting from the bottom and building our way up towards more sophisticated classes. Hence, bottom-up development is being used.\n", "question": "A programmer is designing a program to catalog all books in a library. He plans to have a Book class that stores features of each book: author, title, isOnShelf, and so on, with operations like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Another class, LibraryList, will store an array of Book objects. The LibraryList class will include operations such as listAllBooks, addBook, removeBook, and searchForBook. The programmer plans to implement and test the Book class first, before implementing the LibraryList class. The programmer\u2019s plan to write the Book class first is an example of \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n procedural abstraction\n\n", "\n bottom-up development              \n\n", "\n top-down development\n\n", "\n information hiding\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since one byte is devoted to each primary color, then 3 bytes are needed to represent a color in the RGB model (red, blue, and green). Therefore, 24 bits (8 * 3) would be needed to represent a color in the RGB model.\n", "wrong_ans_explanation": "Since one byte is devoted to each primary color, then 3 bytes are needed to represent a color in the RGB model (red, blue, and green). Therefore, 24 bits (8 * 3) would be needed to represent a color in the RGB model.\n", "question": "The color of a pixel can be represented using the RGB (Red, Green, Blue) color model, which stores values for red, green, and blue, each ranging from 0 to 255. How many bits (binary digits) would be needed to represent a color in the RGB model?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8\n\n", "\n 16\n\n", "\n 24             \n\n", "\n 32\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the values in a cannot be greater than Integer.MAX_VALUE, the test in the while loop will be true at least once and will lead to the smallest element being stored in min. (If all the elements of the array are Integer.MAX_VALUE, the code still works.) Similarly, initializing min to a[0], the first element in the array, ensures that all elements in a will be examined and the smallest will be found. Choice I, Integer.MIN_VALUE, fails because the test in the loop will always be false! There is no array element that will be smaller than the smallest possible integer. Therefore, II and III only are the correct answers.\n", "wrong_ans_explanation": "Since the values in a cannot be greater than Integer.MAX_VALUE, the test in the while loop will be true at least once and will lead to the smallest element being stored in min. (If all the elements of the array are Integer.MAX_VALUE, the code still works.) Similarly, initializing min to a[0], the first element in the array, ensures that all elements in a will be examined and the smallest will be found. Choice I, Integer.MIN_VALUE, fails because the test in the loop will always be false! There is no array element that will be smaller than the smallest possible integer. Therefore, II and III only are the correct answers.\n", "question": "Refer to the following method that finds the smallest value in the array.\n\n    // Precondition: a is an array of nonzero length and is initialized with int values.\n    // param a the array to be processed\n    // return the smallest value in a\n\n    public static int min( int[] a ) \n     {\n        int min = /* some value */;\n        int index = 0;\n        while (index < a.length)\n        {\n            if (a[index] < min)\n                min = a[index];\n            index++;\n        }\n        return min;\n    }\n\nWhich replacement(s) for /* some value */ will always result in correct execution of the min method?\n\n    I. Integer.MIN_VALUE\n    II. Integer.MAX_VALUE\n    III. arr[0]", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only           \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The maximum number of times that the action could be executed will occur when the test returns true every iteration. Therefore, the maximum number of times the action could be executed is the number of iterations in the for loop. Let n be odd, say 3. Then, the iterations in the for loop will be j = 0 and j = 2, i.e. 2 iterations. Let n be even, say 4. Then, the iterations in the for loop will also be j = 0 and j = 2, i.e. 2 iterations. What do these examples have in common? Well, in both these examples, the number of iterations is equal to (n + 1) / 2. Therefore, the expression that represents the maximum number of times that /* perform some action */ could be executed is (n + 1) / 2.\n", "wrong_ans_explanation": "The maximum number of times that the action could be executed will occur when the test returns true every iteration. Therefore, the maximum number of times the action could be executed is the number of iterations in the for loop. Let n be odd, say 3. Then, the iterations in the for loop will be j = 0 and j = 2, i.e. 2 iterations. Let n be even, say 4. Then, the iterations in the for loop will also be j = 0 and j = 2, i.e. 2 iterations. What do these examples have in common? Well, in both these examples, the number of iterations is equal to (n + 1) / 2. Therefore, the expression that represents the maximum number of times that /* perform some action */ could be executed is (n + 1) / 2.\n", "question": "Consider the following loop, where n is some positive integer.\n\n    for (int j = 0; j < n; j += 2)\n    {\n        if ( /* test */ )\n            /* perform some action */\n    }\n\nIn terms of n, which Java expression represents the maximum number of times that /* perform some action */ could be executed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n - 1\n\n", "\n (n + 1) / 2             \n\n", "\n (n - 1) / 2\n\n", "\n n / 2\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "When a > b, a * b is immediately returned and the method stops executing. However, if a <= b, the method will keep calling itself while decreasing a by 1. The recursion will continue to occur (even when a is negative) until computer memory is exhausted. Therefore, stack overflow will occur when a <= b.\n", "wrong_ans_explanation": "When a > b, a * b is immediately returned and the method stops executing. However, if a <= b, the method will keep calling itself while decreasing a by 1. The recursion will continue to occur (even when a is negative) until computer memory is exhausted. Therefore, stack overflow will occur when a <= b.\n", "question": "When will method something cause a stack overflow ( i.e., cause computer memory to be exhausted )?\n\n    public static int something( int a, int b )\n    {\n        if ( a > b )\n            return a * b;\n        else\n            return something( a - 1, b );\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n only when a < b\n\n", "\n only when a <= b          \n\n", "\n only when a > b\n\n", "\n for all values of a and b\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The boolean expression:\n\nx[j] == max || !(max != x[j])\n\ncan be simplified by cancelling the not operators. Thus, the expression will look like this:\n\nx[j] == max || max == x[j]\n\nSince both the left and right side of the OR operator are identical, one of these sides is not needed and the OR operator is not needed. Therefore, the furthest simplification of this expression is :\n\nx[j] == max\n", "wrong_ans_explanation": "The boolean expression:\n\nx[j] == max || !(max != x[j])\n\ncan be simplified by cancelling the not operators. Thus, the expression will look like this:\n\nx[j] == max || max == x[j]\n\nSince both the left and right side of the OR operator are identical, one of these sides is not needed and the OR operator is not needed. Therefore, the furthest simplification of this expression is :\n\nx[j] == max\n", "question": "The boolean expression x[j] == max || !(max != x[j]) can be simplified to \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n x[j] == max           \n\n", "\n x[j] != max\n\n", "\n true\n\n", "\n false\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The largest two-digit hexadecimal number would be FF. To convert hexadecimal to base-10, we must multiply the first position by 16^0, the second position by 16^1, and so on. Since F = 15, \n\nFF = (16^0 * 15) + (16^1 *15) = 15 + 240 = 255. \n", "wrong_ans_explanation": "The largest two-digit hexadecimal number would be FF. To convert hexadecimal to base-10, we must multiply the first position by 16^0, the second position by 16^1, and so on. Since F = 15, \n\nFF = (16^0 * 15) + (16^1 *15) = 15 + 240 = 255. \n", "question": "Suppose the characters 0, 1, \u2026, 8, 9, A, B, C, D, E, F are used to represent a hexadecimal (base-16) number. Here A = 10, B = 11, \u2026, F = 15. What is the largest base-10 integer that can be represented with a two-digit hexadecimal number, such as 14 or 3A?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 32\n\n", "\n 225\n\n", "\n 255              \n\n", "\n 256 \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The method to receive the number of elements in an ArrayList is size(). However, since the elements in ArrayLists start at index 0, there is no element at index list.size(). Therefore, the expressions:\n\nPerson p = list.get(list.size());\nand\nPerson p = list.remove(list.size());\nand\nfor (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\nask for the index list.size(), which will cause an IndexOutOfBoundsException. Nevertheless, the expression:\n\nlist.add(list.size(), new Person()); \n\ndoesn\u2019t cause this exception because the .add() method allows the programmer to add a new element at the last index + 1. The AP often likes to test students on the functionality of this method. \n", "wrong_ans_explanation": "The method to receive the number of elements in an ArrayList is size(). However, since the elements in ArrayLists start at index 0, there is no element at index list.size(). Therefore, the expressions:\n\nPerson p = list.get(list.size());\nand\nPerson p = list.remove(list.size());\nand\nfor (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\nask for the index list.size(), which will cause an IndexOutOfBoundsException. Nevertheless, the expression:\n\nlist.add(list.size(), new Person()); \n\ndoesn\u2019t cause this exception because the .add() method allows the programmer to add a new element at the last index + 1. The AP often likes to test students on the functionality of this method. \n", "question": "Consider a Person class that has a default constructor. Suppose a list ArrayList<Person> list is initialized. Which of the following will not cause an IndexOutOfBoundsException to be thrown?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n for (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\n", "\n list.add(list.size(), new Person());           \n\n", "\n Person p = list.get(list.size());\n\n", "\n Person p = list.remove(list.size());\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "method1() attempts to increment every element within arr. However, since the increment method only increments the local variable k, the contents of arr are actually never changed. Therefore, the output by invoking method1 for a Test object would be:\n\n3 4 5\n", "wrong_ans_explanation": "method1() attempts to increment every element within arr. However, since the increment method only increments the local variable k, the contents of arr are actually never changed. Therefore, the output by invoking method1 for a Test object would be:\n\n3 4 5\n", "question": "Refer to the following class.\n\n    public class Test\n    {\n        private int[] arr = {3, 4, 5};\n\n        // param k an int to be incremented by 1\n        public void increment(int k)\n        { k++; }\n\n        public void method1()\n        {\n            for (int j = 0; j < arr.length; j++)\n            {\n                increment(arr[j]);\n                System.out.print(arr[j] + \u201c \u201c);\n            }\n        }\n\n        public void method2()\n        {\n            for (int e : arr)\n            {\n                increment(e);\n                System.out.print(e + \u201c \u201c);\n            }\n        }\n    }\n\nWhat output will be produced by invoking method1 for a Test object?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3 4 5       \n\n", "\n 0 0 0\n\n", "\n 4 5 6\n\n", "\n 5 6 7\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "method2 has an identical functionality to method1. The only difference is that method1\u2019s for loop iterates the array\u2019s indices while method2\u2019s for loop iterates the array\u2019s values. Nonetheless, the output would be the same as method1\u2019s output because the increment method only increments the local variable k. Therefore, the contents of arr would never change and the output would be:\n\n3 4 5\n", "wrong_ans_explanation": "method2 has an identical functionality to method1. The only difference is that method1\u2019s for loop iterates the array\u2019s indices while method2\u2019s for loop iterates the array\u2019s values. Nonetheless, the output would be the same as method1\u2019s output because the increment method only increments the local variable k. Therefore, the contents of arr would never change and the output would be:\n\n3 4 5\n", "question": "Refer to the following class.\n\n    public class Test\n    {\n        private int[] arr = {3, 4, 5};\n\n        // param k an int to be incremented by 1\n        public void increment(int k)\n        { k++; }\n\n        public void method1()\n        {\n            for (int j = 0; j < arr.length; j++)\n            {\n                increment(arr[j]);\n                System.out.print(arr[j] + \u201c \u201c);\n            }\n        }\n\n        public void method2()\n        {\n            for (int e : arr)\n            {\n                increment(e);\n                System.out.print(e + \u201c \u201c);\n            }\n        }\n    }\t\t\n\nWhat output will be produced by invoking method2 for a Test object, assuming that arr contains 3, 4, 5?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3 4 5       \n\n", "\n 0 0 0\n\n", "\n  4 5 6\n\n", "\n 5 6 7\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: The postcondition of a method is its purpose. Since t stores the object indexed at k, we know it is a placeholder. The object indexed at j is set to the index k and t is set to the index j. This means that the objects indexed at k and j are interchanged in list. \n", "wrong_ans_explanation": "Remember: The postcondition of a method is its purpose. Since t stores the object indexed at k, we know it is a placeholder. The object indexed at j is set to the index k and t is set to the index j. This means that the objects indexed at k and j are interchanged in list. \n", "question": "Refer to the mystery method:\n\n    // postcondition\n    public static void mystery(List<SomeType> list, int k, int j)\n    {\n        SomeType t = list.get(k);\t\n        list.set(k, list.get(j));\n        list.set(j, t);\n    }\n\nWhich best describes the postcondition for mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Replaces in list the object indexed at k with the object indexed at j.\n\n", "\n Replaces in list the object indexed at j with the object indexed at k.\n\n", "\n Replaces in list the object indexed at k and j with t.\n\n", "\n Interchanges in list the objects indexed at k and j.                                        \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In this recursive method, k is divided by 10 each time k is found to be greater than 10. As a result, by the time k is less than 10, there will be nested functions within each other. To unravel the nested functions, we must complete each method by printing k % 10. Since the most-nested function must first be completed, mystery(3) will be called first. This will print 3 because 3 % 10 = 3. Then, 34 % 10 = 4 will be printed, and finally, 347 % 10 = 7 will be printed. Therefore, mystery(347) will output 347.\n", "wrong_ans_explanation": "In this recursive method, k is divided by 10 each time k is found to be greater than 10. As a result, by the time k is less than 10, there will be nested functions within each other. To unravel the nested functions, we must complete each method by printing k % 10. Since the most-nested function must first be completed, mystery(3) will be called first. This will print 3 because 3 % 10 = 3. Then, 34 % 10 = 4 will be printed, and finally, 347 % 10 = 7 will be printed. Therefore, mystery(347) will output 347.\n", "question": "Consider the following method.\n\n    public static void mystery(int k)\n    {\n        if (k > 10)\n            mystery(k / 10);\n        System.out.print(k % 10);\n    }\n\nWhat will be the output as a result of the method call mystery(347)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 47\n\n", "\n 347         \n\n", "\n 734\n\n", "\n 743\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. Since every element in the list is compared to the minimum value a constant amount of times, the number of comparisons for selection sort is independent of the initial arrangement of elements. \n", "wrong_ans_explanation": "The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. Since every element in the list is compared to the minimum value a constant amount of times, the number of comparisons for selection sort is independent of the initial arrangement of elements. \n", "question": "A large list of numbers is to be sorted into ascending order. Assuming that a \u201cdata movement\u201d is a swap or reassignment of an element, which of the following is a true statement?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The number of data movements in selection sort depends on the initial arrangement of elements.\n\n", "\n The number of comparisons for selection sort is independent of the initial arrangement of elements.        \n\n", "\n The number of data movements in insertion sort is independent of the initial arrangement of elements.\n\n", "\n The number of comparisons for insertion sort is independent of the initial arrangement of elements.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I will execute without throwing an exception because null strings and empty strings are valid when comparing strings with each other. Option II will also execute without error because this code segment compares two strings that are not null or empty. However, option III will cause an exception to occur. Remember: The substring method with one parameter takes a subsection of the string from the parameter to the end of the string. Therefore, t attempts to take a substring from the 4th index to the end of the s. Since the 4h index in s is not present, there will be an error.\n", "wrong_ans_explanation": "Option I will execute without throwing an exception because null strings and empty strings are valid when comparing strings with each other. Option II will also execute without error because this code segment compares two strings that are not null or empty. However, option III will cause an exception to occur. Remember: The substring method with one parameter takes a subsection of the string from the parameter to the end of the string. Therefore, t attempts to take a substring from the 4th index to the end of the s. Since the 4h index in s is not present, there will be an error.\n", "question": "Which of the following will execute without throwing an exception?\n\n    I. \tString s = null;\n        String t = \u201c\u201d;\n        if (s.equals(t))\n            System.out.println(\u201cempty strings?\u201d);\n\n    II. \tString s = \u201choly\u201d;\n        String t = \u201cmoly\u201d;\n        if (s.equals(t))\n            System.out.println(\u201choly moly!\u201d);\n\n    III. \tString s = \u201choly\u201d;\n        String t = s.substring(4);\n        System.out.println(s + t);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and II only       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This method is a prime example of a binary search algorithm. Binary search compares the key value to the middle element of the array. If they are not equal, the half in which the key cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the key value, and repeating this until the key value is found. If the search ends with the remaining half being empty, the target is not in the array. Following this algorithm, right before every execution of the while loop, the key must be within the search parameters — that is, between array[first] and array[last]. Otherwise, the key is not in the array.", "wrong_ans_explanation": "This method is a prime example of a binary search algorithm. Binary search compares the key value to the middle element of the array. If they are not equal, the half in which the key cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the key value, and repeating this until the key value is found. If the search ends with the remaining half being empty, the target is not in the array. Following this algorithm, right before every execution of the while loop, the key must be within the search parameters — that is, between array[first] and array[last]. Otherwise, the key is not in the array.", "question": "Refer to the find method in the Finder class below.\n\n    public class Finder\n    {\n        private int[] array;\n\n        // Constructor: Initializes array with integers.\n        public Finder()\n        { /* implementation not shown */ }\n\n        // Precondition: array[first] \u2026 array[last] sorted in ascending order\n        // Postcondition: return index of key in array. If key is not in array, returns -1;\n        public int find(int first, int last, int key)\n        {\n            int mid;\n            while (first <= last)\n            {\n                mid = (first + last) / 2;\n                if (array[mid] == key)\n                    return mid;\n                else if (array[mid] < key)\n                    first = mid + 1;\n                else\n                    last = mid - 1;\n            }\n            return -1;\n        }\n    }\n\nWhich assertion is true just before each execution of the while loop?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n array[first] < key < array[last] \n\n", "\n array[first] <= key <= array[last] \n\n", "\n array[first] < key < array[last] or key is not in array \n\n", "\n array[first] <= key <= array[last] or key is not in array            \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The first iteration will occur where mid = (0 + 13) / 2 = 6. Since array[6] = 50 < 205, we must set first to mid + 1 = 7. The second iteration will occur where mid = (7 + 13) / 2 = 10. Because array[mid] = 220 > 205, we must set last to mid - 1 = 9. The third while loop iteration will occur where mid = (7 + 9) / 2 = 8, Since array[8] = 205, we can return mid and exit the while loop. Altogether, 3 iterations of the while loop were made to locate mid. \n", "wrong_ans_explanation": "The first iteration will occur where mid = (0 + 13) / 2 = 6. Since array[6] = 50 < 205, we must set first to mid + 1 = 7. The second iteration will occur where mid = (7 + 13) / 2 = 10. Because array[mid] = 220 > 205, we must set last to mid - 1 = 9. The third while loop iteration will occur where mid = (7 + 9) / 2 = 8, Since array[8] = 205, we can return mid and exit the while loop. Altogether, 3 iterations of the while loop were made to locate mid. \n", "question": "Refer to the find method in the Finder class below.\n\n    public class Finder\n    {\n        private int[] array;\n\n        // Constructor: Initializes array with integers.\n        public Finder()\n        { /* implementation not shown */ }\n\n        // Precondition: array[first] \u2026 array[last] sorted in ascending order\n        // Postcondition: return index of key in array. If key is not in array, returns -1;\n        public int find(int first, int last, int key)\n        {\n            int mid;\n            while (first <= last)\n            {\n                mid = (first + last) / 2;\n                if (array[mid] == key)\n                    return mid;\n                else if (array[mid] < key)\n                    first = mid + 1;\n                else\n                    last = mid - 1;\n            }\n            return -1;\n        }\n    }\n\nConsider the array b with values as shown:\n\n    4, 7, 19, 25, 36, 37, 50, 100, 205, 209, 220, 271, 306, 321\n\nwhere 4 is b[0] and 321 is b[13]. Suppose that the find method is called with first = 0 and last = 13 to locate the key 205. How many iterations of the while loop must be made in order to locate it?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3\t\t\t\n\n", "\n 4           \n\n", "\n 10\n\n", "\n 13\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Because we are setting values in an array (not an ArrayList) with a for loop, we must begin the code with list[j] (j being the iterator). Since the (Math.random() * x) function takes a number from 0 to x - 1, we must set x to 101 to ensure we return an array with random Integers from 0 to 100 inclusive. Therefore, the correct code is:\n\nlist[j] = (int) (Math.random() * 101); \n", "wrong_ans_explanation": "Because we are setting values in an array (not an ArrayList) with a for loop, we must begin the code with list[j] (j being the iterator). Since the (Math.random() * x) function takes a number from 0 to x - 1, we must set x to 101 to ensure we return an array with random Integers from 0 to 100 inclusive. Therefore, the correct code is:\n\nlist[j] = (int) (Math.random() * 101); \n", "question": "Consider the following Random class.\n\n    public class Random\n    {\n        private int[] randomList;\n\n        public Random\n        { randomList = getList(); }\n\n        // return array with random Integers from 0 to 100 inclusive\n        public int[] getList()\n        {\n            System.out.println(\u201cHow many integers?\u201d);\n            int len = IO.readInt();\t//read user input\n            int[] list = new int[len];\n            for (int j = 0; j < len; j++)\n            {\n                /* code to add integer to list */\n            }\n            return list;\n        }\n\n        // Print all elements of this list\n        public void printList()\n        { \u2026\n    }\n\nWhich represents correct /* code to add integer to list */ ?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n list[j] = (int) (Math.random() * 101);          \n\n", "\n list[j] = (int) (Math.random() * 100);\n\n", "\n list.add((int) (Math.random() * 101));\n\n", "\n list.add(new Integer(Math.random() * 100));\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The change method searches the location(s) in the 2-D array where the the row equals the column at that location. Since the matrix has 2 rows and 3 columns, this will only occur at matrix[0][0] and matrix[1][1]. As a result, the absolute value will be taken at these points. After a call to change(matrix), matrix will look like this:\n\n1 -2 -6                \n-2  4  5\n", "wrong_ans_explanation": "The change method searches the location(s) in the 2-D array where the the row equals the column at that location. Since the matrix has 2 rows and 3 columns, this will only occur at matrix[0][0] and matrix[1][1]. As a result, the absolute value will be taken at these points. After a call to change(matrix), matrix will look like this:\n\n1 -2 -6                \n-2  4  5\n", "question": "A matrix (two-dimensional array) is declared as \n\n    int[][] matrix = new int[2][3];\n\nConsider the following method:\n\n    public static void change(int[][] matrix)\n    {\n        for (int r = 0; r < matrix.length; r++)\n            for (int c = 0; c < matrix[r].length; c++)\n                if ( r == c )\n                    matrix[r][c] = Math.abs(matrix[r][c]);\n    }\n\nIf matrix is initialized to be\n\n    -1 -2 -6\n    -2 -4  5\n\nwhich matrix will be the result of a call to change(matrix)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \t 1 -2 -6                \n    -2  4  5\n\n", "\n \t-1  2 -6\n     2 -4  5\n\n", "\n \t-1 -2 -6\n    -2 -4 -5\n\n", "\n \t 1  2 -6\n     2  4  5\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The AP loves testing students on nested for loops like this question. The inner for loop essentially looks at every value in y and checks if any of these are equal to a constant value in x. If one of these values is equal, then f is set to true. After the outer for loop iterates, every value in y is checked against another value in x. Therefore, if one value in x is not in y, then false is returned. Method returns true only if every element of array x is also in y. \n", "wrong_ans_explanation": "The AP loves testing students on nested for loops like this question. The inner for loop essentially looks at every value in y and checks if any of these are equal to a constant value in x. If one of these values is equal, then f is set to true. After the outer for loop iterates, every value in y is checked against another value in x. Therefore, if one value in x is not in y, then false is returned. Method returns true only if every element of array x is also in y. \n", "question": "Consider method find below:\n\n    // Precondition: a.length is equal to b.length.\n    public static boolean find(int[] x, int[] y)\n    {\n        for (int xVal : x)\n        {\n            boolean f = false;\n            for (int yVal : y)\n            {\n                if (xVal == yVal)\n                    f = true;\n            }\n            if (!f)\n                return false;\n        }\n        return true;\n    }\n\nWhich best describes what method find does? Method find returns true only if \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Arrays x and y contain identical elements in reverse order.\n\n", "\n Arrays x and y contain identical elements in the same order.\n\n", "\n Arrays x and y contain at least one element that is also in b.\n\n", "\n Every element of array x is also in y.                \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "A class that implements an interface must must implement every method of that interface, or be declared as abstract. Therefore, this choice is true:\n\nHumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\nA subclass can always override methods of its superclass, even methods that are implementations of an interface. Therefore, this choice is true:\n\nThe GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\nOther than functions, a subclass inherits that interface that is implemented by the parent class. Therefore, this choice is true:\n\nGoodPlayer automatically implements the Player interface.\n\nFurthermore, it is possible to declare a variable as an interface type if it can reference an object of a class that implements an interface. Therefore, this statement if false (and the correct answer):\n\nIt is not possible to declare a reference of type Player.\n", "wrong_ans_explanation": "A class that implements an interface must must implement every method of that interface, or be declared as abstract. Therefore, this choice is true:\n\nHumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\nA subclass can always override methods of its superclass, even methods that are implementations of an interface. Therefore, this choice is true:\n\nThe GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\nOther than functions, a subclass inherits that interface that is implemented by the parent class. Therefore, this choice is true:\n\nGoodPlayer automatically implements the Player interface.\n\nFurthermore, it is possible to declare a variable as an interface type if it can reference an object of a class that implements an interface. Therefore, this statement if false (and the correct answer):\n\nIt is not possible to declare a reference of type Player.\n", "question": "Refer to the Player interface shown below.\n\n    public interface Player\n    {\t\n        // Return an integer that represents a move in a game.\n        int getMove();\n\n        //Display the status of the game for this Player after implementing the next move.\n        void updateDisplay();\n    }\n\nHumanPlayer is a class that implements the Player interface. Another class, GoodPlayer, is a subclass of HumanPlayer. Which statement is false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n HumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\n", "\n The GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\n", "\n It is not possible to declare a reference of type Player.              \n\n", "\n GoodPlayer automatically implements the Player interface.\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If the variable a was initialized as such:\n\nint a = (int) (Math.random() * x) + y;\n\nwhere x and y are integers, then a would store a random number from y to y + x - 1. When x is multiplied by the Math.random() function, the random integer is taken from 0 to x -1. When y is added, the entire random function is shifted, and the random integer is taken from y to y + x - 1. Therefore, to store a random integer from 1 to 50 you must multiply by 50 and add by 1.The statement will look like this:\n\nint winner = (int) (Math.random() * 50 ) + 1; \n", "wrong_ans_explanation": "If the variable a was initialized as such:\n\nint a = (int) (Math.random() * x) + y;\n\nwhere x and y are integers, then a would store a random number from y to y + x - 1. When x is multiplied by the Math.random() function, the random integer is taken from 0 to x -1. When y is added, the entire random function is shifted, and the random integer is taken from y to y + x - 1. Therefore, to store a random integer from 1 to 50 you must multiply by 50 and add by 1.The statement will look like this:\n\nint winner = (int) (Math.random() * 50 ) + 1; \n", "question": "A program simulates fifty slips of paper, numbered 1 through 50, placed in a bowl for a raffle drawing. Which of the following statements stores in winner a random integer from 1 to 50?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n int winner = (int) (Math.random() * 50 ) + 1;       \n\n", "\n int winner = (int) (Math.random() * 50 ) ;\n\n", "\n int winner = (int) (Math.random() * 51 );\n\n", "\n int winner = (int) (Math.random() * 51 ) + 1;\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I is correct because j is being set to 30 using the Integer wrapper. Option III is also correct because it is the same as Option I, but written in two lines. However, option II is not correct because j must be set to the integer value of 30, not vice versa. Therefore, only option I and III are correct.\n", "wrong_ans_explanation": "Option I is correct because j is being set to 30 using the Integer wrapper. Option III is also correct because it is the same as Option I, but written in two lines. However, option II is not correct because j must be set to the integer value of 30, not vice versa. Therefore, only option I and III are correct.\n", "question": "Consider the code segment.\n\n    Integer j = new Integer(20);\n    /* more code */\n\nWhich of the following replacements for /* more code */ correctly sets j to have an integer value of 30?\n\n    I. j = new Integer(30);\n    II. j.intValue() = 30;\n    III. Integer k = new Integer(30);\n          j = k;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The choices:\n\nif (o.compareTo(j) <0) \u2026\nand\nif (j.compareTo(d) < 0) \u2026\n\nwill cause an error because both these statements attempt to compare two variables with different data types. The choice:\n\nif ((Integer) o.compareTo(j) < 0) \u2026\n\nwill also cause an error because an object cannot be cast into an integer. The choice:\n\nif (j.compareTo((Integer) d) < 0) \u2026\n\nwill not cause an error because the double d is being downcast into an int, and then compared with the integer j.\n", "wrong_ans_explanation": "The choices:\n\nif (o.compareTo(j) <0) \u2026\nand\nif (j.compareTo(d) < 0) \u2026\n\nwill cause an error because both these statements attempt to compare two variables with different data types. The choice:\n\nif ((Integer) o.compareTo(j) < 0) \u2026\n\nwill also cause an error because an object cannot be cast into an integer. The choice:\n\nif (j.compareTo((Integer) d) < 0) \u2026\n\nwill not cause an error because the double d is being downcast into an int, and then compared with the integer j.\n", "question": "Consider these declarations.\n\n    Integer j = new Integer(3);\n    Object o = new Integer(4);\n    Double d = new Double(3.0);\n\nWhich of the following will not cause an error?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n if ((Integer) o.compareTo(j) < 0) \u2026\n\n", "\n if (o.compareTo(j) < 0) \u2026\n\n", "\n if (j.compareTo( d ) < 0\n\n", "\n if ( j.compareTo((Integer) d ) < 0) \u2026         \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: The \u201c==\u201c sign is used for comparing integers while the equals() method is used for comparing strings. Since the intValue() method returns an integer, we must use the \u201c==\u201c sign. Therefore, option I will not generate an error while option II will generate an error. Considering that the toString() method returns a string, we must use the equals() method. Consequently, option III will not generate an error because it accurately utilizes the equals() method. Only option I and III are correct. \n", "wrong_ans_explanation": "Remember: The \u201c==\u201c sign is used for comparing integers while the equals() method is used for comparing strings. Since the intValue() method returns an integer, we must use the \u201c==\u201c sign. Therefore, option I will not generate an error while option II will generate an error. Considering that the toString() method returns a string, we must use the equals() method. Consequently, option III will not generate an error because it accurately utilizes the equals() method. Only option I and III are correct. \n", "question": "Refer to these declarations:\n\n    Integer a = new Integer(10);\n    Integer b = new Integer(5);\n\nWhich test will not generate an error?\n\n    I. if (a.intValue() == b.intValue()) \u2026\n    II. if ((a.intValue()).equals(b.intValue())) \u2026\n    III. If ((a.toString()).equals(b.toString())) \u2026\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Considering the fact that objects cannot be forcibly type casted (as is done in the question), there will be no output and a ClassCastException will be thrown.\n", "wrong_ans_explanation": "Considering the fact that objects cannot be forcibly type casted (as is done in the question), there will be no output and a ClassCastException will be thrown.\n", "question": "Consider the code fragment.\n\n    Object o = new Integer(10);\n    System.out.println((String) o);\n\nWhat will be the output as a result of running the fragment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n No output. A ClassCastException will be thrown.          \n\n", "\n No output. An ArithmeticException will be thrown.\n\n", "\n \u201c9\u201d\n\n", "\n 9\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: \u201c==\u201c checks if both objects point to the same memory location whereas .equals() evaluates the comparison of values in the objects. Although a, b, and c all have the same values, only c and a point to the same memory location. Option I will evaluate to false because a and b do not point to the same memory location. However, option II and III will evaluate to true because a, b, and c have the same values. \n", "wrong_ans_explanation": "Remember: \u201c==\u201c checks if both objects point to the same memory location whereas .equals() evaluates the comparison of values in the objects. Although a, b, and c all have the same values, only c and a point to the same memory location. Option I will evaluate to false because a and b do not point to the same memory location. However, option II and III will evaluate to true because a, b, and c have the same values. \n", "question": "Consider these declarations:\n\n    String a = \u201ccrab\u201d;\n    String b = new String(\u201ccrab\u201d);\n    String c = a;\n\nWhich expression involving these strings evaluates to true?\n\n    I. a == b\n    II. a.equals( b )\n    III. c.equals( b )\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n I and II only\n\n", "\n II and III only      \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since a, b, and c all have different string values, the .equals() method would never hold true. Additionally, considering the fact that the compareTo() method compares strings in alphabetical order, this would be the comparison for a, b, and c in alphabetical order: a < c < b. Therefore, the expression:\n\n!(a.equals(b)) && c.compareTo(b) < 0 \n\nwill evaluate to true because a.equals(b) is false (TOMATO != tomato) and c.compareTo(b) is also false (\u201ctom\u201d is before \u201ctomato\u201d in an alphabetical list).\n", "wrong_ans_explanation": "Since a, b, and c all have different string values, the .equals() method would never hold true. Additionally, considering the fact that the compareTo() method compares strings in alphabetical order, this would be the comparison for a, b, and c in alphabetical order: a < c < b. Therefore, the expression:\n\n!(a.equals(b)) && c.compareTo(b) < 0 \n\nwill evaluate to true because a.equals(b) is false (TOMATO != tomato) and c.compareTo(b) is also false (\u201ctom\u201d is before \u201ctomato\u201d in an alphabetical list).\n", "question": "Suppose that a = \u201cTOMATO\u201d, b = \u201ctomato\u201d, and c = \u201ctom\u201d. Given that \u201cA\u201d comes before \u201ca\u201d in dictionary order , which is true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a.compareTo( b ) < 0 && b.compareTo( c ) < 0\n\n", "\n b.compareTo( a ) < 0 || c.compareTo( a ) < 0\n\n", "\n !(a.equals( b )) && c.compareTo( a ) < 0\n\n", "\n !(a.equals( b )) && c.compareTo( b ) < 0             \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The .index(\u201cm\u201d) function finds the first index where the letter \u201cm\u201d is  found, which is 2. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 26, which is \u201cst.\u201d Therefore, the value of str would be \u201csillyst.\u201d \n", "wrong_ans_explanation": "The .index(\u201cm\u201d) function finds the first index where the letter \u201cm\u201d is  found, which is 2. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 26, which is \u201cst.\u201d Therefore, the value of str would be \u201csillyst.\u201d \n", "question": "This question refers to the following declaration:         \n\n    String a = \u201cSome more silly stuff on strings!\u201d;\n    //the words are separated by a single space\n\nWhich string will s refer to after execution of the following?\n\n    int x = a.indexOf(\u201cm\u201d);\n    String s = a.substring(10, 15) + a.substring(25, 25 + x);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201csillyst\u201d        \n\n", "\n \u201csillystr\u201d \n\n", "\n \u201csilly st\u201d\n\n", "\n silly str\u201d\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Never create assumptions in your code because many flaws and loopholes could be created. Therefore, you should first check with the writer of the specification and ensure that he/she elaborates on this vague aspect.\n", "wrong_ans_explanation": "Never create assumptions in your code because many flaws and loopholes could be created. Therefore, you should first check with the writer of the specification and ensure that he/she elaborates on this vague aspect.\n", "question": "A program that reads in a five-digit identification number is to be written. The specification does not state whether zero can be entered as a first digit. The programmer should \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n write the code to accept zero as a first digit since zero is a valid digit.\n\n", "\n write the code to reject zero as a first digit since five-digit integers do not start with zero. \n\n", "\n treat the identification number as a four-digit number if the user enters a number starting with zero.\n\n", "\n check with the writer of the specification whether zero is acceptable as a first digit.      \n\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "A ThreeDigitNumber class would be suitable for a program description that utilizes this three digit number extensively. The program description:\n\nTest whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits \n\nmost likely needs a ThreeDigitNumber class because the programmer would need to test every three digit number and use every digit in these numbers.The program description:\n\nRead in a three-digit code number and check if it is valid according to some given formula\n\nalso needs a ThreeDigitNumber class because the inputted three digit number will have to be extensively validated in this class according to some formula. The program description:\n\nPasswords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters\n\nprobably does not need a ThreeDigitNumber class because only characters are checked, not the three digit numbers. Option I and II are correct.\n", "wrong_ans_explanation": "A ThreeDigitNumber class would be suitable for a program description that utilizes this three digit number extensively. The program description:\n\nTest whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits \n\nmost likely needs a ThreeDigitNumber class because the programmer would need to test every three digit number and use every digit in these numbers.The program description:\n\nRead in a three-digit code number and check if it is valid according to some given formula\n\nalso needs a ThreeDigitNumber class because the inputted three digit number will have to be extensively validated in this class according to some formula. The program description:\n\nPasswords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters\n\nprobably does not need a ThreeDigitNumber class because only characters are checked, not the three digit numbers. Option I and II are correct.\n", "question": "Refer to the following three program descriptions:\n\n    I. Test whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits.\n    II. Read in a three-digit code number and check if it is valid according to some given formula.\n    III. Passwords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters.\n\nFor which of the preceding program descriptions would a ThreeDigitNumber class be suitable?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and II only             \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In short, top-down programming refers to writing the program in broad terms, and then slowly adding features and detail (vague to specific). Writing an essay does not even relate to writing a program, so that choice can be eliminated. Using driver programs for every method in the order they are called may be useful, but it does not follow any programming strategies, so this choice can also be eliminated. The choice that describes starting from the lowest level and then working our way up is an illustration of bottom-up programming. Therefore, the choice that states:\n\nWriting the program in terms of the operations to be performed and then refining these operations by adding more detail.\n\nis correct and illustrates top-down programming.\n", "wrong_ans_explanation": "In short, top-down programming refers to writing the program in broad terms, and then slowly adding features and detail (vague to specific). Writing an essay does not even relate to writing a program, so that choice can be eliminated. Using driver programs for every method in the order they are called may be useful, but it does not follow any programming strategies, so this choice can also be eliminated. The choice that describes starting from the lowest level and then working our way up is an illustration of bottom-up programming. Therefore, the choice that states:\n\nWriting the program in terms of the operations to be performed and then refining these operations by adding more detail.\n\nis correct and illustrates top-down programming.\n", "question": "Top-down programming is illustrated by which of the following?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Writing an essay describing how the program will work, without including any Java code.\n\n", "\n Using driver programs to test all methods in the order that they are called in the program.\n\n", "\n Writing and testing the lowest level methods first and then combining them to form appropriate abstract operations.\n\n\n", "\n Writing the program in terms of the operations to be performed and then refining these operations by adding more detail. \t\t\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Multiple factors should influence the programmer\u2019s choice of a particular algorithm. The best algorithm should minimize run time, minimize the memory requirements of the algorithm, have a clear and concise logic structure, and many more. Therefore, option I, II, and III are correct.\n", "wrong_ans_explanation": "Multiple factors should influence the programmer\u2019s choice of a particular algorithm. The best algorithm should minimize run time, minimize the memory requirements of the algorithm, have a clear and concise logic structure, and many more. Therefore, option I, II, and III are correct.\n", "question": " Which of the following should influence your choice of a particular algorithm?\n\n    I. The run time of the algorithm\n    II. The memory requirements of the algorithm\n    III. The ease with which the logic of the algorithm can be understood\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n I and III only\n\n", "\n I and II only\n\n", "\n I, II, and III         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If we want to find a process that inefficiently executes as a result of the requirement that the list be maintained in sorted order, we must find the process that could not be coded or performed with ease or efficiency. Option I, summing the five largest numbers in the list, will not result in inefficient execution because if the list is sorted, we could simply add the last five elements in the list. Option II, finding the maximum value in the list, will also not result in inefficient execution because the maximum value is the last element of the sorted list. Finally, option III, inserting and deleting numbers, will result in inefficient execution because in order to insert a certain number in the sorted list, you must find the number\u2019s potential corresponding index in the sorted list, which requires significantly more code than the other two options. Therefore, option III only is the correct answer. \n", "wrong_ans_explanation": "If we want to find a process that inefficiently executes as a result of the requirement that the list be maintained in sorted order, we must find the process that could not be coded or performed with ease or efficiency. Option I, summing the five largest numbers in the list, will not result in inefficient execution because if the list is sorted, we could simply add the last five elements in the list. Option II, finding the maximum value in the list, will also not result in inefficient execution because the maximum value is the last element of the sorted list. Finally, option III, inserting and deleting numbers, will result in inefficient execution because in order to insert a certain number in the sorted list, you must find the number\u2019s potential corresponding index in the sorted list, which requires significantly more code than the other two options. Therefore, option III only is the correct answer. \n", "question": "A list of numbers is stored in a sorted array. It is required that the list be maintained in sorted order. This requirement leads to inefficient execution for which of the following processes?\n\n    I. Summing the five largest numbers in the list\n    II. Finding the maximum value in the list\n    III. Inserting and deleting numbers\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n III only                \n\n", "\n II and III only\n\n", "\n I and III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the recursive call is made at the end of the method, the System.out.print... statements are executed at the beginning of each method call, causing the letters of the string to be printed out in order. If the two statements in the method were interchanged, so that the recursive call is made at the beginning of the method, then the pending print... methods would be stacked up, causing the string to be printed in reverse order.\n", "wrong_ans_explanation": "Since the recursive call is made at the end of the method, the System.out.print... statements are executed at the beginning of each method call, causing the letters of the string to be printed out in order. If the two statements in the method were interchanged, so that the recursive call is made at the beginning of the method, then the pending print... methods would be stacked up, causing the string to be printed in reverse order.\n", "question": "Which best describes what the printSomething method below does?\n\n    public void printSomething(String s)\n    {\n        if (s.length() > 0)\n        {\n            System.out.print(s.substring(0, 1));\n            printSomething(s.substring(1));\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n It prints string s.\n\n", "\n It prints string s in reverse order.\n\n", "\n It prints only the first character of string s.\n\n", "\n It prints only the first two characters of string s.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the values in arr cannot be less than Integer.MIN_VALUE, the test in the while loop will be true at least once and will lead to the largest element being stored in max. (If all the elements of the array are Integer.MIN_VALUE, the code still works.) Similarly, initializing max to arr[0], the first element in the array, ensures that all elements in arr will be examined and the largest will be found. Choice II, Integer.MAX_VALUE, fails because the test in the loop will always be false! There is no array element that will be greater than the largest possible integer. The method will (incorrectly) return Integer.MAX_VALUE.\n", "wrong_ans_explanation": "Since the values in arr cannot be less than Integer.MIN_VALUE, the test in the while loop will be true at least once and will lead to the largest element being stored in max. (If all the elements of the array are Integer.MIN_VALUE, the code still works.) Similarly, initializing max to arr[0], the first element in the array, ensures that all elements in arr will be examined and the largest will be found. Choice II, Integer.MAX_VALUE, fails because the test in the loop will always be false! There is no array element that will be greater than the largest possible integer. The method will (incorrectly) return Integer.MAX_VALUE.\n", "question": "Refer to the following method that finds the largest value in an array:\n\n    /** Precondition:  arr is initialized with int values.\n     *  Postcondition: Returns the largest value in arr.\n     */\n    public static int findMax(int[] arr)\n    {\n        int max = /* some value */;\n        int index = 0;\n        while (index < arr.length)\n        {\n            if (arr[index] > max)\n                max = arr[index];\n            index++;\n        }\n        return max;\n    }\n\nWhich replacement(s) for /* some value */ will always result in correct execution of the findMax method?\n\n       I. Integer.MIN_VALUE\n      II. Integer.MAX_VALUE\n     III. arr[0]\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the records are not sorted by amount, each record must be examined to find the one with the largest amount. It therefore doesn't make sense to sort the elements, which involves both examination and movement of elements. Thus, you can eliminate choices \u201cInsertion sort of the records\u201d, \u201cSelection sort of the records\u201d and \u201cMergesort of the records.\u201d  \n", "wrong_ans_explanation": "Since the records are not sorted by amount, each record must be examined to find the one with the largest amount. It therefore doesn't make sense to sort the elements, which involves both examination and movement of elements. Thus, you can eliminate choices \u201cInsertion sort of the records\u201d, \u201cSelection sort of the records\u201d and \u201cMergesort of the records.\u201d  \n", "question": "An opera company has a large list of donor records, sorted alphabetically by name. Each record contains the amount of money donated in the current year. Which of the following represents the most efficient way to find the name of the top donor in the current year?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Insertion sort of the records\n\n", "\n Selection sort of the records\n\n", "\n Mergesort of the records\n\n", "\n Sequential search of the records\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "If you consider a small even number like 4, the loop will be executed when i is 4 and 2 -- two times. This eliminates the choices: \n\n    n if n is even and n + 1 if n is odd \nand\n    2n if n is even and 2n-1 if n is odd.\n\nIf n is 8, the loop is executed when i is 8, 6, 4, and 2, four times. Since log(base 2)8 is 3, this eliminates the choice: \n    \n    2^n if n is even and 2^n -1 if n is odd\n\nNotice that the choice: \n\n    n/2 if n is even and 1 + n/2 if n is odd\n\nalso works for any odd integer, say 7. The loop will execute when i is 7, 5, 3, and 1, four times or 7/2 + 1.\n", "wrong_ans_explanation": "If you consider a small even number like 4, the loop will be executed when i is 4 and 2 -- two times. This eliminates the choices: \n\n    n if n is even and n + 1 if n is odd \nand\n    2n if n is even and 2n-1 if n is odd.\n\nIf n is 8, the loop is executed when i is 8, 6, 4, and 2, four times. Since log(base 2)8 is 3, this eliminates the choice: \n    \n    2^n if n is even and 2^n -1 if n is odd\n\nNotice that the choice: \n\n    n/2 if n is even and 1 + n/2 if n is odd\n\nalso works for any odd integer, say 7. The loop will execute when i is 7, 5, 3, and 1, four times or 7/2 + 1.\n", "question": "Refer to the following code segment: \n\n    int n = < some positive integer >;\n    for (int i = n; i > 0; i -= 2)\n    {\n        process(i);\n    }\n\nIn terms of n, how many times will process(i) be executed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n if n is even and n + 1 if n is odd\n\n", "\n 2n if n is even and 2n-1 if n is odd\n\n", "\n n/2 if n is even and 1 + n/2 if n is odd\n\n", "\n 2^n if n is even and 2^n -1 if n is odd\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Declaration I works because there is a default constructor in the PosInt class. The reason declaration II works is that, because the superclass PosInt has a default constructor, the following code will automatically be placed in the subclass EvenPosInt:\n\n    public EvenPosInt()\n    { super(); }    //calls default constructor from superclass\n\nThis only works for a default constructor. So declaration III fails because superclass constructors are not inherited. You need to add the following constructor code to EvenPosInt to make declaration III work:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n", "wrong_ans_explanation": "Declaration I works because there is a default constructor in the PosInt class. The reason declaration II works is that, because the superclass PosInt has a default constructor, the following code will automatically be placed in the subclass EvenPosInt:\n\n    public EvenPosInt()\n    { super(); }    //calls default constructor from superclass\n\nThis only works for a default constructor. So declaration III fails because superclass constructors are not inherited. You need to add the following constructor code to EvenPosInt to make declaration III work:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n", "question": "Refer to the following classes:\n\n    public class PosInt\n    {\n        private int value;\n\n        /** Constructs a PosInt with value 0. */\n        public PosInt()\n        { value = 0; }\n\n        /** Constructs a PosInt with the given value.\n         *  Precondition:  aValue > 0.\n         */\n        public PosInt(int aValue)\n        { value = aValue; }\n\n        public int getValue()\n        { return value; }\n    }\n\n    public class EvenPosInt extends PosInt\n    {\n        /** Returns the next consecutive even int value that is greater\n         *  than the value of the current EvenPosInt.\n         */\n        public int getNextEven()\n        { /* implementation */ }\n    }\n\nWhich of the following declarations in a client class would cause an error?\n\n      I. PosInt p = new PosInt();\n     II. PosInt even = new EvenPosInt();\n    III. PosInt pe = new EvenPosInt(8);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Implementation I is incorrect because a subclass cannot directly access the private data of its superclass. The accessor method getValue must be used, as shown in implementations II and III. The identifier this represents is the current EvenPosInt object.\n", "wrong_ans_explanation": "Implementation I is incorrect because a subclass cannot directly access the private data of its superclass. The accessor method getValue must be used, as shown in implementations II and III. The identifier this represents is the current EvenPosInt object.\n", "question": "Refer to the following classes:\n\n    public class PosInt\n    {\n        private int value;\n\n        /** Constructs a PosInt with value 0. */\n        public PosInt()\n        { value = 0; }\n\n        /** Constructs a PosInt with the given value.\n         *  Precondition:  aValue > 0.\n         */\n        public PosInt(int aValue)\n        { value = aValue; }\n\n        public int getValue()\n        { return value; }\n    }\n\n    public class EvenPosInt extends PosInt\n    {\n        /** Returns the next consecutive even int value that is greater\n         *  than the value of the current EvenPosInt.\n         */\n        public int getNextEven()\n        { /* implementation */ }\n    }\n\nSuppose that the following constructor is added to the EvenPosInt class:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n\nWhich of the following is a correct /* implementation */ for the getNextEven method?\n\n       I. return value + 2;\n      II. return getValue() + 2;\n     III. return this.getValue() + 2;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n", "\n I, II, and III\n\n"]}, {"points": "15", "Answer": "0", "correct_ans_explanation": "(a)\npublic int numWordsOfLength(int len)\n{\n    int k = 0;\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n           ++k;\n    }\n    return k;\n}\n\n(b)\npublic void removeWordsOfLength(int len)\n{\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n        {\n            myList.remove(i--);\n \t\t}    \n    }\n}\n", "wrong_ans_explanation": "(a)\npublic int numWordsOfLength(int len)\n{\n    int k = 0;\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n           ++k;\n    }\n    return k;\n}\n\n(b)\npublic void removeWordsOfLength(int len)\n{\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n        {\n            myList.remove(i--);\n \t\t}    \n    }\n}\n",        "question": "The following class WordList is designed to store and manipulate a list of words. The complete class declaration is shown below. You will be asked to implement two methods.\n\npublic class WordList\n{\n    private ArrayList myList; \n    // contains Strings made up of letters\n    // postcondition: returns the number of words \n    // in this WordList that\n    // are exactly len letters long \n    public int numWordsOfLength(int len) \n    { /* to be implemented in part (a) */ }\n\n    // postcondition: all words that are exactly len letters long \n    // have been removed from this WordList, with the \n    // order of the remaining words unchanged\n    public void removeWordsOfLength(int len) \n    { /* to be implemented in part (b) */ } \n    // ... constructor and other methods not shown\n}\n\n(a) Write the WordList method numWordsOfLength. Method numbWordsOfLength returns the number of words in the WordList that are exactly len letters long. For example, assume that the instance variable myList of the WordList animals contains the following.\n\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nThe table below shows several sample calls to numWordsOfLength.\n\nCall   Result returned by call\nanimals.numWordsOfLength(4)\t1\nanimals.numWordsOfLength(3)\t3\nanimals.numWordsOfLength(2)\t0\n\nComplete method numWordsOfLength below.\n\n// postcondition: returns the number of words \n// in this WordList that \n// are exactly len letters long \npublic int numWordsOfLength(int len)\n\n(b) Write the WordList method removeWordsOfLength. Method removeWordsOfLength removes all words from the WordList that are exactly len letters long, leaving the order of the remaining words un-changed. For example, assume that the instance variable myList of the WordList animals contains the following\n\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nThe table below shows a sequence of calls to the removeWordsOfLength method.\n\nCall\nmyList after the call\n\nanimals.removeWordsOfLength(4) \n[\"cat\", \"mouse\", \"dog\", \"dog\"]\n\nanimals.removeWordsOfLength(3)\n[\"mouse\", \"frog\"]\n\nanimals.removeWordsOfLength(2)\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nComplete method remove WordsOfLength below.\n\n// postcondition: all words that are exactly len letters long \n// have been removed from this WordList, with the \n// order of the remaining words unchanged \npublic void removeWordsOfLength(int len)\n\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "15", "Answer": "0", "correct_ans_explanation": "(a)\npublic static boolean isSelfDivisor(int number)\n{\n    int k = 0;\n    int n = number;\n    while (n > 0)\n    {\n        k = n % 10;\n        if (k == 0 || number % k != 0)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\n\n(b)\npublic static int[] firstNumSelfDivisors(int start, int num)\n{\n    int[] a = new int[num];\n    int j = start;\n    int k = 0;\n    while (k < num)\n    {\n        if (isSelfDivisor(j))\n            a[k++] = j;\n        j++;\n    }\n    return a;\n}\n", "wrong_ans_explanation": "(a)\npublic static boolean isSelfDivisor(int number)\n{\n    int k = 0;\n    int n = number;\n    while (n > 0)\n    {\n        k = n % 10;\n        if (k == 0 || number % k != 0)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\n\n(b)\npublic static int[] firstNumSelfDivisors(int start, int num)\n{\n    int[] a = new int[num];\n    int j = start;\n    int k = 0;\n    while (k < num)\n    {\n        if (isSelfDivisor(j))\n            a[k++] = j;\n        j++;\n    }\n    return a;\n}\n",        "question": "A positive integer is called a \"self-divisor\u201d if every decimal digit of the number is a divisor of the number, that is, the number is evenly divisible by each and every one of its digits. For example, the number 128 is a self-divisor because it is evenly divisible by 1, 2, and 8. However 26 is not a self-divisor because it is not evenly divisible by the digit 6. Note that 0 is not considered to be a divisor of any number, so any number containing a 0 digit is NOT a self-divisor. There are infinitely many self-divisors.\n\npublic class SelfDivisor\n{\n    /** @param number the number to be tested \n     * Precondition: number > 0 \n     * @return true if every decimal digit of number \n     * is a divisor of number; \n     * false otherwise\n     */\n    public static boolean isSelfDivisor(int number) \n    { /* to be implemented in part (a) */ }\n    /** @param start starting point for values to be checked \n     * Precondition: start > 0 \n     * @param num the size of the array to be returned \n     * Precondition: num > 0 \n     * @return an array containing the first \n     * num integers >= start that are self-divisors\n     */\n    public static int[] firstNumSelfDivisors(int start, int num) \n    { /* to be implemented in part (b) */ }\n    // There may be fields, constructors, \n    // and methods that are not shown.\n}\n\n(a) Write method isSelfDivisor, which takes a positive integer as its parameter. This method returns true if the number is a self-divisor; otherwise, it returns false. \n\nComplete method isSelfDivisor below.\n\n/** @param number the number to be tested \n* Precondition: number > 0\n* @return true if every decimal digit of number \n* is a divisor of number, false otherwise\n*/\npublic static boolean isSelfDivisor(int number)\n\n(b) Write method firstNumSelfDivisors which takes two positive integers as parameters, representing a start value and a number of values. Method firstNumSelfDivisors returns an array of size num that contains the first num self-divisors that are greater than or equal to start.\nFor example, the call firstNumSelfDivisors(10, 3) should return an array containing the values 11, 12, and 15, because the first three self-divisors that are greater than or equal to 10 are 11, 12, and 15. In writing firstNumSelfDivisors, assume that isSelfDivisor works as specified, regardless of what you wrote in part (a). \n\nComplete method firstNumSelfDivisors below.\n\n/** @param start starting point for values to be checked \n * Precondition: start > 0 \n * @param num the size of the array to be returned \n * Precondition: num > 0 \n * @return an array containing the first \n * num integers start that are self-divisors\n*/\npublic static int[] firstNumSelfDivisors(int start, int num)\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "15", "Answer": "0", "correct_ans_explanation": "(a)\npublic Reservation requestRoom (String guestName)\n{\n    for (int i = 0; i < rooms.length; i++)\n    {\n        if (rooms [i] == null)\n        {\n            Reservation res = new Reservation (questName, i);\n            return res;\n        }\n    } \n    waitList.add(guestName); \n    return null;\n}\n\n(b)\npublic Reservation cancelAndReassign(Reservation res)\n{\n    Reservation newRes = null; \n    int i = res.getRoomNumber();\n    if (!wait List.isEmpty());\n    {\n        newRes = new Reservation ((String)waitList.get(0), i); \n        waitList.remove(0);\n    }\n    rooms[i] = newRes; \n    return newRes;\n}\n", "wrong_ans_explanation": "(a)\npublic Reservation requestRoom (String guestName)\n{\n    for (int i = 0; i < rooms.length; i++)\n    {\n        if (rooms [i] == null)\n        {\n            Reservation res = new Reservation (questName, i);\n            return res;\n        }\n    } \n    waitList.add(guestName); \n    return null;\n}\n\n(b)\npublic Reservation cancelAndReassign(Reservation res)\n{\n    Reservation newRes = null; \n    int i = res.getRoomNumber();\n    if (!wait List.isEmpty());\n    {\n        newRes = new Reservation ((String)waitList.get(0), i); \n        waitList.remove(0);\n    }\n    rooms[i] = newRes; \n    return newRes;\n}\n",        "question": "In this question, you will implement two methods for a class Hotel that is part of a hotel reservation system. The Hotel class uses the reservation class shown below. A Reservation is for the person and room number specified when the Reservation is constructed.\n\npublic class Reservation\n{\n    public Reservation(String guestName, int roomNumber)\n    {/* implementation not shown */ }\n\n    public int getRoomNumber() \n    {/* implementation not shown */ }\n    // private data and other methods not shown\n}\n\nAn incomplete declaration for the Hotel class is shown below. Each hotel in the hotel reservation system has rooms numbered 0, 1, 2, ..., up to the last room number in the hotel. For example, a hotel with 100 rooms would have rooms numbered 0, 1, 2, ..., 99.\n\npublic class Hotel\n{\n    private Reservation[] rooms;\n        // each element corresponds to a room in the hotel; \n        // if rooms[index] is null, the room is empty; \n        // otherwise, it contains a reference to the \n        // Reservation for that room, such that \n        // rooms[index].getRoomNumber() returns index\n\n    private ArrayList waitList;\n        // contains names of guests who have not yet been \n        // assigned a room because all rooms are full\n\n    // if there are any empty \n    // rooms (rooms with no reservation), \n    // then create a reservation for an empty room for the \n    // specified guest and return the new Reservation; \n    // otherwise, add the guest to the end \n    // of waitList and return null \n\n    public Reservation requestRoom(String guestName) \n    { /* to be implemented in part (a) */ }\n\n    // release the room associated with parameter res, \n    // effectively canceling the reservation; \n    // if any names are stored in waitList, \n    // remove the first name and create a Reservation \n    // for this person in the room \n    // reserved by res; return that new Reservation; \n    // if waitList is empty, mark the room \n    // specified by res as empty and return null \n    // precondition: res is a valid Reservation \n    // for some room in this hotel \n    public Reservation cancelAndReassign(Reservation res) \n    { /* to be implemented in part (b) */ }\n\n    // constructors and other methods not shown\n}\n\n\n(a) write the hotel method request Room. Method requestRoom attempts to reserve a room for a given guest. If there are any empty rooms in the hotel, one of them will be assigned to the named guest and the newly created reservation is returned. If there are no empty rooms, the guest is added to the end of the waiting list and null is returned. \n\nComplete method request Room below.\n\n// there are any empty rooms (rooms with no reservation) \n// then create a reservation for an empty room for the \n// specified guest and return the new Reservation; \n// otherwise, add the guest to the end of waitList \n// and return null \npublic Reservation requestRoom(String guestName)\n\n(b) Write the Hotel method cancelAndReassign. Method cancelAndReassign releases a previous reservation. If the waiting list for the hotel contains any names, the vacated room is reassigned to the first person at the beginning of the list. That person is then removed from the waiting list and the newly created reservation is returned. If no one is waiting, the room is marked as empty and null is returned. \nIn writing cancelAndReassign you may call any accessible methods in the Reservation and Hotel classes. Assume that these methods work as specified. \n\nComplete method cancelAndReassign below.\n\n// release the room associated with parameter res, effectively \n// canceling the reservation; \n// any names are stored in waitList, remove the first name\n// and create a Reservation for this person in the room \n// reserved by res; return that new Reservation; \n// if waitList is empty, mark the room \n// specified by res as empty and \n// return null \n// precondition: res is a valid Reservation for some \n//room in this hotel \npublic Reservation cancelAndReassign(Reservation res)\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}]}