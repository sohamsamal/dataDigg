{"Questions": [{"points": "1", "Answer": "0", "correct_ans_explanation": " Remember: The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes. Therefore, in option III, when int x is converted to double y, y can hold the memory of int x. However, in option I, when double x is converted to int y, y is restricted by its limited memory, and therefore an error would appear. Option II is the same as option I except double x is being downcast into an int. This allows Java to read x as an int. Therefore, only option I will cause an error message to appear. \n", "wrong_ans_explanation": " Remember: The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes. Therefore, in option III, when int x is converted to double y, y can hold the memory of int x. However, in option I, when double x is converted to int y, y is restricted by its limited memory, and therefore an error would appear. Option II is the same as option I except double x is being downcast into an int. This allows Java to read x as an int. Therefore, only option I will cause an error message to appear. \n", "question": "Which of the following pairs of declarations will cause an error message?                 \n        \n      I. double x = 14.7;\n         int y = x;\n\n     II. double x = 14.7;\n         int y = (int) x;\n\n    III. int x = 14;\n         double y = x;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only   \n\n", "\n II only      \n\n", "\n III only \n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us split this expression into two different statements, The first expression, ! ( a <= b )  will only evaluate to true if a is not <= b. Therefore a must be greater than b. The second expression, (a * b > 0) will only evaluate to true if both a and b are positive or a and b are both negative. The correct answer must satisfy the conditions of both expressions. \nNow let us look at the choices. a > b and a < b do not take the second condition into account. (a > b and b < 0) will not always evaluate to true because if a > b and b < 0, then a could also be greater than 0, which results in the expression returning false. However, if a > b and b > 0, a must also be greater than 0, which satisfies both conditions. Therefore, (a > b and b > 0) is the correct answer. \n", "wrong_ans_explanation": "Let us split this expression into two different statements, The first expression, ! ( a <= b )  will only evaluate to true if a is not <= b. Therefore a must be greater than b. The second expression, (a * b > 0) will only evaluate to true if both a and b are positive or a and b are both negative. The correct answer must satisfy the conditions of both expressions. \nNow let us look at the choices. a > b and a < b do not take the second condition into account. (a > b and b < 0) will not always evaluate to true because if a > b and b < 0, then a could also be greater than 0, which results in the expression returning false. However, if a > b and b > 0, a must also be greater than 0, which satisfies both conditions. Therefore, (a > b and b > 0) is the correct answer. \n", "question": "Assume that a and b are integers. The boolean expression \n                                \n    ! ( a <= b ) && (a * b > 0)\n\nwill always evaluate to true given that \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a > b\n\n", "\n a < b\n\n", "\n a > b and b > 0       \n\n", "\n a > b and b < 0\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "wrong_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "question": "Consider the method reverse:\n        \n    //Precondition:    n > 0.\n    //Postcondition:  returns n with its digits reversed.\n    //Example:          if n = 234, method reverse returns 432.\n    int reverse (int n)\n    {\n        int rem, revNum = 0;\n\n        /* code segment  */\n        return revNum;\n    }\n\nWhich of the following replacements for /* code segment  */ would cause the method to work as intended?\n                \n      I. for (int i = 0; i <= n; i++)\n         {\n              rem = n % 10;\n              revNum = revNum * 10 + rem;\n              n /= 10;\n         }        \n\n\n     II. while (n != 0)\n         {\n             rem = n % 10;\n             revNum = revNum * 10 + rem;\n             n /= 10;\n         }\n\n\n    III. for (int i = n; i != 0; i /= 10)\n         {\n            rem = i % 10;\n            revNum = revNum * 10 + rem;\n         }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II only \n\n", "\n II and III only       \n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The .indexOf(\u201ce\u201d) function finds the first index where the letter \u201ce\u201d is  found, which is 3. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 27, which is \u201cstr.\u201d       \nTherefore, the value of str would be \u201csillystr.\u201d\n", "wrong_ans_explanation": "The .indexOf(\u201ce\u201d) function finds the first index where the letter \u201ce\u201d is  found, which is 3. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 27, which is \u201cstr.\u201d       \nTherefore, the value of str would be \u201csillystr.\u201d\n", "question": "What is the value of str after execution of the following?\n                \n    String line = \u201cSome more silly stuff on strings!\u201d;\n    int x = line.indexOf(\u201ce\u201d);\n    String str = line.substring(10, 15) + line.substring(25, 25 + x);\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201csillystrin\u201d\n\n", "\n \u201csilly str\u201d\n\n", "\n \u201csilly st\u201d\n\n", "\n \u201csillystr\u201d       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "numberCheck(50) essentially goes through the numbers 1 through 50 and checks how many are divisible by 5 and/or 2. typeA counts the amount of numbers that are divisible by 2 and 5, which is 5 (all the tens from 1 to 50). typeB counts the amount of numbers divisible by 2, which is 25 (even numbers from 1 to 50). typeC counts the amount of numbers divisible by 5, which is 10. Therefore, the correct output will be 5 25 10.\n", "wrong_ans_explanation": "numberCheck(50) essentially goes through the numbers 1 through 50 and checks how many are divisible by 5 and/or 2. typeA counts the amount of numbers that are divisible by 2 and 5, which is 5 (all the tens from 1 to 50). typeB counts the amount of numbers divisible by 2, which is 25 (even numbers from 1 to 50). typeC counts the amount of numbers divisible by 5, which is 10. Therefore, the correct output will be 5 25 10.\n", "question": "Consider the following method.\n                \n    public void numberCheck(int maxNum)\n    {\n            int typeA = 0;\n            int typeB = 0;\n            int typeC = 0;\n\n            for (int k = 1; k <= maxNum; k++)\n            {\n                    if (k % 2 == 0 && k % 5 == 0)\n                            typeA++;\n                    if (k % 2 == 0)\n                            typeB++;\n                    if (k % 5 == 0)\n                            typeC++\n            }\n            System.out.println(typeA + \u201c \u201c + typeB + \u201c \u201c + typeC);\n    }\n        \nWhat is printed as a result of the call numberCheck(50)?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5 20 5\n\n", "\n 5 20 10\n\n", "\n 5 25 5\n\n", "\n 5 25 10          \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In order to interchange values in an array, you must have a placeholder (or else one of the values will be lost). Firstly, the placeholder must be initialized (int k = arr[0]). Then, you can replace arr[0] with arr[5] (arr[0] = arr[5]). Finally, since arr[0] has already been changed to arr[5], we have to set arr[5] to k (arr[5] = k). \n", "wrong_ans_explanation": "In order to interchange values in an array, you must have a placeholder (or else one of the values will be lost). Firstly, the placeholder must be initialized (int k = arr[0]). Then, you can replace arr[0] with arr[5] (arr[0] = arr[5]). Finally, since arr[0] has already been changed to arr[5], we have to set arr[5] to k (arr[5] = k). \n", "question": "Assume that an array of integer values has been declared as follows and has been initialized.\n                        \n    int[] arr = new int[10];\n        \nWhich of the following code segments correctly interchanges the values of arr[0] and arr[5]?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n arr[0] = 5;\n arr[5] = 0;\n\n", "\n arr[0] = arr[5];\n arr[5] = arr[0];\n\n", "\n int k = arr[5];\n arr[0] = arr[5];\n arr[5] = k;\n\n", "\n int k = arr[0];\n arr[0] = arr[5];\n arr[5] = k;\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "ArrayLists do not have the same properties as an array. For example, to receive a value at an index, you must use the get() method. Additionally, to see if two values are equal, you have to use the equals() method. Therefore, to see if the value in nameList at the index j is equal to name, you must write this: nameList.get(j).equals(name).\n", "wrong_ans_explanation": "ArrayLists do not have the same properties as an array. For example, to receive a value at an index, you must use the get() method. Additionally, to see if two values are equal, you have to use the equals() method. Therefore, to see if the value in nameList at the index j is equal to name, you must write this: nameList.get(j).equals(name).\n", "question": "Consider the following method that is intended to modify its parameter nameList by replacing all occurrences of name with newValue.\n                \n    public void replace (ArrayList<String> nameList, String name, String newValue)\n    {\n        for (int j = 0; j < nameList.size(); j++)\n        {\n            if ( /* expression */ )\n            {\n                nameList.set(j, newValue);\n            }\n        }\n    }\n\nWhich of the following can be used to replace /* expression */ so that replace will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n nameList.get(j).equals(name)          \n\n", "\n nameList.get(j) == name\n\n", "\n nameList.remove(j)\n\n", "\n nameList[j].equals(name)\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Pattern recognition is essential to answer this question quickly. Firstly, you must realize that s is being added by increments of 1 every time an iteration of a for loop occurs. For example, since lim is 10 and inner is initially 1, s will be 10 by the time the inner for loop ends. However, there are multiple iterations of this inner for loop (as seen with the outer for loop) and every new iteration increases the initial value of inner by 1 (outer++). Therefore, after outer = lim( after the for loops have ended ), s = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55 and sol(10) would output 55.\n", "wrong_ans_explanation": "Pattern recognition is essential to answer this question quickly. Firstly, you must realize that s is being added by increments of 1 every time an iteration of a for loop occurs. For example, since lim is 10 and inner is initially 1, s will be 10 by the time the inner for loop ends. However, there are multiple iterations of this inner for loop (as seen with the outer for loop) and every new iteration increases the initial value of inner by 1 (outer++). Therefore, after outer = lim( after the for loops have ended ), s = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55 and sol(10) would output 55.\n", "question": "Consider the following method.\n                \n    public int sol(int lim)\n    {\n        int s = 0;\n        for (int outer = 1; outer <= lim; outer++)\n        {\n            for (int inner = outer; inner <= lim; inner++)\n            {\n                s++;\n            }\n        }                \n        return s;\n    }\n        \nWhat value is returned as a result of the call sol(10)?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 20\n\n", "\n 45\n\n", "\n 55       \n\n", "\n 100\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since outer is being printed, you are essentially outputting the number of times the inner for loop is being iterated. Since inner and outer both initially equal 0, the inner for loop will only iterate once, printing \u201c0.\u201d When outer = 1, the inner for loop will iterate twice, printing \u201c1 1.\u201d As you go on, you will notice that every number is printed one more time than the last number (1 is printed twice while 0 is printed once). This trend will continue until outer = 4 because the outer for loop only exists when outer < 4. Therefore, the printed result would be 0 1 1 2 2 2 3 3 3 3.\n", "wrong_ans_explanation": "Since outer is being printed, you are essentially outputting the number of times the inner for loop is being iterated. Since inner and outer both initially equal 0, the inner for loop will only iterate once, printing \u201c0.\u201d When outer = 1, the inner for loop will iterate twice, printing \u201c1 1.\u201d As you go on, you will notice that every number is printed one more time than the last number (1 is printed twice while 0 is printed once). This trend will continue until outer = 4 because the outer for loop only exists when outer < 4. Therefore, the printed result would be 0 1 1 2 2 2 3 3 3 3.\n", "question": "Consider the following code segment.\n\n    for (int outer = 0; outer < n; outer++)\n    {\n        for (int inner = 0; inner <= outer; inner++)\n        {\n            System.out.print(outer + \u201c \u201c);\n        }\n    }\n\nIf n has been declared as an integer with value 4, what is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 1 2 3\n\n", "\n 0 0 1 0 1 2\n\n", "\n 0 1 2 2 3 3 3\n\n", "\n 0 1 1 2 2 2 3 3 3 3            \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I produces the correct output because as this code loops from 1 to 20 while adding by 3 from every iteration (k = k + 3) with a while loop, it prints every number where the remainder is 1 when divided by 3. Option II is the exact same code as Option I, except for the fact that it is restructured into a for loop. Option III is also correct and the most efficient code because this code realizes the fact that the output is a sequence that keeps adding by 3 until 20 is reached. Therefore, for Option III, no if statement is needed because k is added by 3 every iteration. Option I, II, and III are correct.\n", "wrong_ans_explanation": "Option I produces the correct output because as this code loops from 1 to 20 while adding by 3 from every iteration (k = k + 3) with a while loop, it prints every number where the remainder is 1 when divided by 3. Option II is the exact same code as Option I, except for the fact that it is restructured into a for loop. Option III is also correct and the most efficient code because this code realizes the fact that the output is a sequence that keeps adding by 3 until 20 is reached. Therefore, for Option III, no if statement is needed because k is added by 3 every iteration. Option I, II, and III are correct.\n", "question": "Consider the following code segments.\n                \n      I. int k = 1;\n         while (k < 20)\n         {\n             if (k % 3 == 1)\n             System.out.print(k + \u201c  \u201c);\n             k = k + 3;\n         }\n\n     II. for (int k = 1; k < 20; k++)\n         {\n             if (k % 3 == 1)\n                 System.out.print(k + \u201c  \u201c);\n         }\n\n    III. for (int k = 1; k < 20; k = k + 3)\n         {\n             System.out.print(k + \u201c  \u201c);\n         }                         \n\nWhich of the code segments above will produce the following output?\n\n    1  4  7  10  13  16  19\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II only\n\n", "\n II and III only\n\n", "\n I, II, and III          \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since a is being rotated, the number of rows of rotate( a ) would be equal to the number of columns of a. Therefore, because a[0].length is the number of columns of a ( a[0] is the first row in a ), it is also the number of rows for rotate( a ). Additionally, the number of rows of a is equal to the number of columns of rotate( a ). Therefore, a.length is equal to the number of columns of rotate( a ). \n    Finally, the initialization of an array should be as follows: new int[x][y] where x and y are x is equal to the number of rows and y is equal to the number of columns. As a result, expression 1 should be a[0].length, expression 2 should be a.length, and expression 3 should be new int[rows][cols].\n", "wrong_ans_explanation": "Since a is being rotated, the number of rows of rotate( a ) would be equal to the number of columns of a. Therefore, because a[0].length is the number of columns of a ( a[0] is the first row in a ), it is also the number of rows for rotate( a ). Additionally, the number of rows of a is equal to the number of columns of rotate( a ). Therefore, a.length is equal to the number of columns of rotate( a ). \n    Finally, the initialization of an array should be as follows: new int[x][y] where x and y are x is equal to the number of rows and y is equal to the number of columns. As a result, expression 1 should be a[0].length, expression 2 should be a.length, and expression 3 should be new int[rows][cols].\n", "question": "Consider the following code.\n        \n    public int[][] rotate( int[][] a )\n    {\n        int rows = <expression 1>;\n        int cols = <expression 2>;\n        int[][] b = <expression 3>;\n\n        for (int r = 0; r < rows; r++)\n            for (int c = 0; c < cols; c++)\n                b[r][c] = <expression 4>;\n        return b;\n    }\n\n    // For example, if a holds \n            1 2 3\n            4 5 6\n    // rotate( a ) will hold\n            3 6\n            2 5\n            1 4\n\nWhich of the following should replace <expression 1>, <expression 2>, and <expression 3> respectively?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\na.cols, a.rows, new int(rows, cols)\n\n", "\na.cols, a.rows, new int[][](rows, cols)\n\n", "\na[0].length,  a.length, new int[rows][cols]\n\n", "\na[0].length, a.length, new int[][](rows, cols)\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "To determine the code that should replace expression 4, we should take an example such as b[0][0]. As seen in the question, b[0][0] = a[0][2] = 3. Now let us look at the choices to see which option correctly replaces expression 4 to achieve the desired result. Initially, rows = 3, cols = 2, r = 0, and c = 0. Therefore, the only expression that initially outputs a[0][2] is a[c][rows - 1 - r]. \n", "wrong_ans_explanation": "To determine the code that should replace expression 4, we should take an example such as b[0][0]. As seen in the question, b[0][0] = a[0][2] = 3. Now let us look at the choices to see which option correctly replaces expression 4 to achieve the desired result. Initially, rows = 3, cols = 2, r = 0, and c = 0. Therefore, the only expression that initially outputs a[0][2] is a[c][rows - 1 - r]. \n", "question": "Consider the following code.\n        \n    public int[][] rotate( int[][] a )\n    {\n        int rows = <expression 1>;\n        int cols = <expression 2>;\n        int[][] b = <expression 3>;\n\n        for (int r = 0; r < rows; r++)\n            for (int c = 0; c < cols; c++)\n                b[r][c] = <expression 4>;\n        return b;\n    }\n\n    // For example, if a holds \n            1 2 3\n            4 5 6\n    // rotate( a ) will hold\n            3 6\n            2 5\n            1 4\n\nWhich of the following should replace <expression 4>?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a[c][rows - 1 - r]      \n\n", "\n a[cols - 1- c][r]       \n\n", "\n a[cols - 1- c][rows - 1- r]\n\n", "\n a[rows - 1 -r][cols - 1 - c]\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In this for loop, s.substring(1) returns a string from s[1] to the end of s. For example, if s  = \u201cdog,\u201d s.substring(1) would be \u201cog.\u201d After the for loop ends, str1 would return the accumulation of all the portions of the strings in list from its first index to the end of the string. As a result, the output for str1 by a call to mystery would be: \u201cogatowird\u201d\n", "wrong_ans_explanation": "In this for loop, s.substring(1) returns a string from s[1] to the end of s. For example, if s  = \u201cdog,\u201d s.substring(1) would be \u201cog.\u201d After the for loop ends, str1 would return the accumulation of all the portions of the strings in list from its first index to the end of the string. As a result, the output for str1 by a call to mystery would be: \u201cogatowird\u201d\n", "question": "Refer to the following data field and method.\n        \n    private ArrayList<String> list;\n\n    public void mystery()\n    {\n        String str1 = \u201c\u201d, str2 = \u201c\u201d;\n        for (String s : list)\n        {\n            str1 += s.substring(1);\n            str2 += s.substring(1, 2);\n        }\n        System.out.println(str1);\n        System.out.println(str2);\n    }\n        \nAssume that the contents of list are \n\n    dog      cat     cow     bird\n\nWhat will be the output for str1 by a call to mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n og\n\n", "\n oaoi\n\n", "\n dccb\n\n", "\n ogatowird                    \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In this for loop, s.substring(1, 2) returns a string from s[1] to s[2-1], which is just s[1]. For example, if s = \u201cdog\u201d, s.substring(1, 2) would be \u201co.\u201d After the for loop ends, str1 would output the characters at the first index of all the strings in list. As a result, the output for str1 by a call to mystery would be: \u201coaoi.\u201d\n", "wrong_ans_explanation": "In this for loop, s.substring(1, 2) returns a string from s[1] to s[2-1], which is just s[1]. For example, if s = \u201cdog\u201d, s.substring(1, 2) would be \u201co.\u201d After the for loop ends, str1 would output the characters at the first index of all the strings in list. As a result, the output for str1 by a call to mystery would be: \u201coaoi.\u201d\n", "question": "Refer to the following data field and method.\n        \n    private ArrayList<String> list;\n\n    public void mystery()\n    {\n        String str = \u201c\u201d, str2 = \u201c\u201d;\n        for (String s : list)\n        {\n            str1 += s.substring(1);\n            str2 += s.substring(1, 2);\n        }\n        System.out.println(str1);\n        System.out.println(str2);\n    }\n        \nAssume that the contents of list are \n\n    dog      cat     cow     bird\n        \nWhat will be the output for str2 by a call to mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n dccb\n\n", "\n oaoi              \n\n", "\n grwr \n\n", "\n docacobi\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question tests your knowledge of attacking methods that include recursion. Firstly, you must recognize that a call to mystery will keep occurring until x / 10 = 0 (AKA x < 10). Since x / 10 is used as a parameter after every call to mystery, x keeps decreasing (123456 -> 12345 -> 1234 -> 123 -> 12 -> 1). When x = 1, we can finally bypass the if statement and print x % 10. However, since this is recursion, all the calls to mystery are nested within each other, so we must essentially go backwards. We must first find 1 % 10 = 1, then 12 % 10 = 2, then 123 % 10 = 3, and so on. Therefore, after calling mystery(123456), 123456 is printed. \n", "wrong_ans_explanation": "This question tests your knowledge of attacking methods that include recursion. Firstly, you must recognize that a call to mystery will keep occurring until x / 10 = 0 (AKA x < 10). Since x / 10 is used as a parameter after every call to mystery, x keeps decreasing (123456 -> 12345 -> 1234 -> 123 -> 12 -> 1). When x = 1, we can finally bypass the if statement and print x % 10. However, since this is recursion, all the calls to mystery are nested within each other, so we must essentially go backwards. We must first find 1 % 10 = 1, then 12 % 10 = 2, then 123 % 10 = 3, and so on. Therefore, after calling mystery(123456), 123456 is printed. \n", "question": "Consider the following method. \n        \n    // precondition: x >= 0\n\n    public void mystery(int x)\n    {\n        if ((x / 10) != 0)\n        {\n            mystery(x / 10);\n        }\n        System.out.print(x % 10);\n    }\n        \nWhich of the following is printed as a result of the call mystery(123456)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 654321\n\n", "\n 123456        \n\n", "\n 56\n\n", "\n 16\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If n = 6, as seen in the last question, then n = 6 at // Point A. Furthermore, if n = 2, then at // Point C, x would be equal to 1. Additionally, at // Point C, since the while loop regulates the value of n, n can never be greater than 2 at // Point C. Moreover, since the while loop controls the value of n above 2, the correct answer is:\n        \n    n will always be greater than 2 at // Point B \n        ", "wrong_ans_explanation": "If n = 6, as seen in the last question, then n = 6 at // Point A. Furthermore, if n = 2, then at // Point C, x would be equal to 1. Additionally, at // Point C, since the while loop regulates the value of n, n can never be greater than 2 at // Point C. Moreover, since the while loop controls the value of n above 2, the correct answer is:\n        \n    n will always be greater than 2 at // Point B \n        ", "question": "Consider the following method.\n                        \n    public static int mystery(int n)\n    {\n        int x = 1;        \n        int y = 1;\n        // Point A\n        while (n > 2)\n        {\n            x = x + y;\n            // Point B        \n            y = x - y;\n            n--;        \n        }\n        // Point C\n        return x;\n    }\n        \nWhich of the following is true of the method mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n will always be greater than 2 at // Point B.           \n\n", "\n n will never be greater than 2 at // Point A.\n\n", "\n x will never be 1 at // Point C.\n\n", "\n n will sometimes be greater than 2 at // Point C.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "You can never create an instance of an interface in Java. However, you can create an instance of a class that implements an interface. Additionally, a superclass does not have to implement an interface that is already implemented in a child class. However, this is false and vice versa. If a superclass implements an interface, then the child classes must also implement the interface. Finally, if a class implements an interface, it must implement every method of the interface unless it is an abstract class. Therefore, none of the options are true. \n        ", "wrong_ans_explanation": "You can never create an instance of an interface in Java. However, you can create an instance of a class that implements an interface. Additionally, a superclass does not have to implement an interface that is already implemented in a child class. However, this is false and vice versa. If a superclass implements an interface, then the child classes must also implement the interface. Finally, if a class implements an interface, it must implement every method of the interface unless it is an abstract class. Therefore, none of the options are true. \n        ", "question": "Which of the following statements about a class thisClass that implements an interface is true?\n        \n         I. It is illegal to create an instance of thisClass\n        II. Any superclass of thisClass must also implement that interface\n       III. thisClass must implement every method of the interface\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only           \n\n", "\n II only\n\n", "\n III only\n\n", "\n None            \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "You might need a paper and a pencil for this question. Initially, k = animals.size() - 1 = 5. Then we see if animals.get(5).substring(0, 1).equals(\u201cb\u201d), which is the same thing as saying, does the string at index 5 starts with a \u201cb.\u201d Since baboon starts with a \u201cb,\u201d then we remove it from that position and add it to index 1 (6 - 5). The animal array has now changed to this:\n\n    [\u201cbear\u201d, \u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\nNow k is 4. Since \u201cbaboon\u201d has been removed, the value at index k is \u201ccat,\u201d not \u201ckoala.\u201d Since \u201ccat\u201d does not start with a \u201cb,\u201d we keep moving to k = 3. Since the value at k = 3 is \u201cbass\u201d and \u201cbass\u201d starts with a \u201cb,\u201d then we remove \u201cbass\u201d from the 3rd index. However, since animals.size() - k = 3, then we add \u201cbass\u201d back to its initial position, the 3rd index. Then, at k = 2, since \u201czebra\u201d does not start with a \u201cb,\u201d we do not change the array. At k = 1, since \u201cbaboon\u201d starts with a \u201cb,\u201d we remove this string from its current position and add it to the (6 - 1) 5th index. The array has now changed again to:\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nSince the for loop ends when k = 0, we do not touch the string at index 0. Therefore, the correct contents of animals is as shown above (the same as the initial ArrayList).\n", "wrong_ans_explanation": "You might need a paper and a pencil for this question. Initially, k = animals.size() - 1 = 5. Then we see if animals.get(5).substring(0, 1).equals(\u201cb\u201d), which is the same thing as saying, does the string at index 5 starts with a \u201cb.\u201d Since baboon starts with a \u201cb,\u201d then we remove it from that position and add it to index 1 (6 - 5). The animal array has now changed to this:\n\n    [\u201cbear\u201d, \u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\nNow k is 4. Since \u201cbaboon\u201d has been removed, the value at index k is \u201ccat,\u201d not \u201ckoala.\u201d Since \u201ccat\u201d does not start with a \u201cb,\u201d we keep moving to k = 3. Since the value at k = 3 is \u201cbass\u201d and \u201cbass\u201d starts with a \u201cb,\u201d then we remove \u201cbass\u201d from the 3rd index. However, since animals.size() - k = 3, then we add \u201cbass\u201d back to its initial position, the 3rd index. Then, at k = 2, since \u201czebra\u201d does not start with a \u201cb,\u201d we do not change the array. At k = 1, since \u201cbaboon\u201d starts with a \u201cb,\u201d we remove this string from its current position and add it to the (6 - 1) 5th index. The array has now changed again to:\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nSince the for loop ends when k = 0, we do not touch the string at index 0. Therefore, the correct contents of animals is as shown above (the same as the initial ArrayList).\n", "question": "Consider the following instance variable and method. \n        \n    private List<String> animals;\n\n    public void change()\n    {\n        for (int k = animals.size() - 1; k > 0; k--)\n        {\n            if (animals.get(k).substring(0, 1).equals(\u201cb\u201d))\n            {\n                animals.add(animals.size() - k, animals.remove(k));\n            }        \n        }\n    }\n        \nAssume that animals has been instantiated and initialized with the following contents.\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nWhat will the contents of animals be as a result of calling change?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [\u201cbaboon\u201d, \u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\n", "\n [\u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201cbear\u201d, \u201ckoala\u201d]\n\n", "\n [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]             \n\n", "\n [\u201czebra\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d, \u201cbass\u201d, \u201cbear\u201d]\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "At first glance, it may seem that this method removes all the zeroes from the ArrayList. However, let us start from j = 0. Inside the while loop, since the value at the 0th index is 0, then this value is removed from the ArryaList vals. Then Vals will look like this:\n\n    [0, 4, 2, 5, 0, 3, 0]\n\nNow we look at j = 1. Since the value at j = 1 is 4, the zero before four is essentially skipped. As a result of attempting to change the same array using the remove method, one zero gets neglected and you are left with:\n        \n    [0, 4, 2, 5, 3]\n        ", "wrong_ans_explanation": "At first glance, it may seem that this method removes all the zeroes from the ArrayList. However, let us start from j = 0. Inside the while loop, since the value at the 0th index is 0, then this value is removed from the ArryaList vals. Then Vals will look like this:\n\n    [0, 4, 2, 5, 0, 3, 0]\n\nNow we look at j = 1. Since the value at j = 1 is 4, the zero before four is essentially skipped. As a result of attempting to change the same array using the remove method, one zero gets neglected and you are left with:\n        \n    [0, 4, 2, 5, 3]\n        ", "question": "Consider the following instance variable and method.         \n                        \n    private ArrayList<Integer> vals;\n\n    // Precondition: vals.size > 0\n\n    public void whatToDo()\n    {        \n        int j = 0;\n        Integer zero = new Integer(0);\n\n        while (j < vals.size())\n        {\n            if (vals.get(j).equals(zero))\n                vals.remove(j);\n            j++;\n        }\n    }\n                \nAssume that ArrayList vals initially contains the following Integer values.\n\n    [0, 0, 4, 2, 5, 0, 3, 0]\n\nWhat will the ArrayList vals contain as a result of executing whatToDo?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [3, 5, 2, 4, 0, 0, 0, 0]\n\n", "\n [0, 0, 4, 2, 5, 0, 3, 0]\n\n", "\n [4, 2, 5, 3]\n\n", "\n [0, 4, 2, 5, 3]                  \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since y and z are local variables and there is no return statement, these changes to y and z do not alter s and k. Therefore, the new y and z values are not passed on to s and k. The values of s and k remain \u201cworld\u201d and 6, respectively.\n", "wrong_ans_explanation": "Since y and z are local variables and there is no return statement, these changes to y and z do not alter s and k. Therefore, the new y and z values are not passed on to s and k. The values of s and k remain \u201cworld\u201d and 6, respectively.\n", "question": "Assume the the following declarations have been made.\n        \n    private String s;\n    private int k;\n\n    public void change( String y, int z)\n    {\n        y = y + \u201cpeace\u201d;\n        z = z * 2;\n    }\n                \nAssume s has the value \u201cworld\u201d and k is 6. What are the values of s and k after the call change(s, k)?\n\n    s                   k\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n world           6         \n\n", "\n worldpeace           6\n\n", "\n world           12\n\n", "\n worldpeace           12\n\n"]}, {"points": "7", "Answer": "0", "correct_ans_explanation": "import java.util.*;\n\npublic class APLine {\n    private int a;\n    private int b;\n    private int c;\n    \n    public APLine(int x, int y, int z)\n    {\n        if (x == 0 || y == 0)\n        {\n            throw new IllegalArgumentException(\"a and b must be nonzero integers\");\n        }\n        \n        a = x;\n        b = y;\n        c = z;\n    }\n    \n    public double getSlope()\n    { \n        double slope = - (double)a / (double)b;\n        return slope;\n    }\n    \n    public boolean isOnLine(int i, int j)\n    {\n        return ((a * i) + (b * j) + c == 0);\n    }\n}\n\n\n\n", "wrong_ans_explanation": "import java.util.*;\n\npublic class APLine {\n    private int a;\n    private int b;\n    private int c;\n    \n    public APLine(int x, int y, int z)\n    {\n        if (x == 0 || y == 0)\n        {\n            throw new IllegalArgumentException(\"a and b must be nonzero integers\");\n        }\n        \n        a = x;\n        b = y;\n        c = z;\n    }\n    \n    public double getSlope()\n    { \n        double slope = - (double)a / (double)b;\n        return slope;\n    }\n    \n    public boolean isOnLine(int i, int j)\n    {\n        return ((a * i) + (b * j) + c == 0);\n    }\n}\n\n\n\n",
    
    "question": "An APLine is a line defined by the equation ax + by + c = 0, where a is not equal to zero, b is not equal to zero, and a, b, and c are all integers. The slope of an APLine is defined to be the double value -a/b. A point (represented by integers x and y) is on an APLine if the equation of the APLine is satisfied when those x and y values are substituted into the equation. That is, a point represented by x and y is on the line if ax + by + c = 0. \n\nExamples of two APLine equations are shown in the following.\n\nEquation1: 5x + 4y - 17 = 0; \nSlope (-a/b):  -5/4 = -1.25; \nIs point (5,-2) on the line? Yes, because (5(5) + 4(-2) + (-17)) equal to 0\n\nEquation2: -25x + 40y + 30 = 0; \nSlope (-a/b): 25/40 = 0.625; \nIs point (5,-2) on the line? No, because (-25(5) + 40(-2) + 30) not equal to 0\n\n\nAssume that the following code segment appears in a class other than APLine. The code segment shows an example of using the APLine class to represent the two equations shown above.\n\nAPLine line1 = new APLine(5, 4, -17); \ndouble slope 1 = line1.getSlope(); // slope1 is assigned -1.25 \nboolean onLine1 = line1.isOnLine(5, -2); // true because 5(5) + 4(-2) + (-17) equal to 0\n\nAPLine line2 = new APLine (-25, 40, 30); \ndouble slope2 = line2.getSlope(); // slope2 is assigned 0.625 \nboolean onLine2 = line2. isOnLine(5,-2); // false because -25(5) + 40(-2) + 30 not equal to 0\n\nWrite the APLine class. Your implementation must include a constructor that has three integer  parameters that represent a, b, and c, in that order. You may assume that the values of the parameters representing a and b are not zero. It must also include a method getslope that calculates and returns the slope line, and a method isOnLine that returns true if the point represented by its two parameters (x and y in that order) is on the APLine and returns false otherwise. Your class must produce the indicated results when invoked by the code segment given above. You may ignore any issues related to integer overflow.\n\n\n",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}, {"points": "7", "Answer": "0", "correct_ans_explanation": "public static int[] triangular (int n)\n{\n    int[] a = new int[n];\n    a[0] = 1;\n    int count = 1;\n    int triangular = 2;\n    while (n > count)\n    {\n        a[count] = triangular + a[count - 1];\n        count++;\t\n        triangular++;\n    }\n    return a;\n}\n\n\n", "wrong_ans_explanation": "public static int[] triangular (int n)\n{\n    int[] a = new int[n];\n    a[0] = 1;\n    int count = 1;\n    int triangular = 2;\n    while (n > count)\n    {\n        a[count] = triangular + a[count - 1];\n        count++;\t\n        triangular++;\n    }\n    return a;\n}\n\n\n",
    
    "question": "The n-th triangular number is the sum of the first n positive integers. For example, the first four triangular numbers are 1, 1+2 = 3, 1+2+3 = 6, and 1+2+3+4 = 10. Write the complete code for the method public static int[] triangular (int n), which constructs and returns an array containing the first n triangular numbers. For example, triangular(4) returns an array (1,3,6,10). Use int[] a = new int[n]; to construct the array.\n\n\n",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}, {"points": "7", "Answer": "0", "correct_ans_explanation": "(a) \npublic static Fraction add(Fraction x, Fraction y)\n{\n    int j = (x.top * y. bot) + (x.bot * y.top);\n    int i= x.bot * y.bot;\n    Fraction z = new Fraction (j, i); \n    return z;\n}\n\n(b) \npublic static Fraction multiply(Fraction x, Fraction y)\n{\n    int i = x.top * y.top; \n    int j = x.bot * y. bot;\n    Fraction z = new Fraction (i, j)\n    return z;\n}\n\n", "wrong_ans_explanation": "(a) \npublic static Fraction add(Fraction x, Fraction y)\n{\n    int j = (x.top * y. bot) + (x.bot * y.top);\n    int i= x.bot * y.bot;\n    Fraction z = new Fraction (j, i); \n    return z;\n}\n\n(b) \npublic static Fraction multiply(Fraction x, Fraction y)\n{\n    int i = x.top * y.top; \n    int j = x.bot * y. bot;\n    Fraction z = new Fraction (i, j)\n    return z;\n}\n\n",
    
    "question": "Consider the following partial implementation of a Fraction class.\n\npublic class Fraction implements Comparable<Fraction>\n{\n    private long top = 0; \n    private long bot = 1;\n\n    public Fraction(long a, long b)\n    {\n        // Code which install top and bot, \n        //making sure that bot > 0 \n        //and gcd(top, bot) = 1\n\t}\n    public int compareTo (Fraction that)\n\t{\n        return compare(this, that);\n    }\n}\n\n(a) Write the body of this method:\n\n    public static Fraction add(Fraction x, Fraction y)\n\n(b) Write the body of this method:\n\n    public static Fraction multiply(Fraction x, Fraction y)",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}]}
