{"Questions": [{"points": "1", "Answer": "0", "correct_ans_explanation": " Remember: The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes. Therefore, in option III, when int x is converted to double y, y can hold the memory of int x. However, in option I, when double x is converted to int y, y is restricted by its limited memory, and therefore an error would appear. Option II is the same as option I except double x is being downcast into an int. This allows Java to read x as an int. Therefore, only option I will cause an error message to appear. \n", "wrong_ans_explanation": " Remember: The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes. Therefore, in option III, when int x is converted to double y, y can hold the memory of int x. However, in option I, when double x is converted to int y, y is restricted by its limited memory, and therefore an error would appear. Option II is the same as option I except double x is being downcast into an int. This allows Java to read ..x as an int. Therefore, only option I will cause an error message to appear. \n", "question": "Which of the following pairs of declarations will cause an error message?                 \n        \n      I. double x = 14.7;\n         int y = x;\n\n     II. double x = 14.7;\n         int y = (int) x;\n\n    III. int x = 14;\n         double y = x;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only   \n\n", "\n II only      \n\n", "\n III only \n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us split this expression into two different statements, The first expression, ! ( a <= b )  will only evaluate to true if a is not <= b. Therefore a must be greater than b. The second expression, (a * b > 0) will only evaluate to true if both a and b are positive or a and b are both negative. The correct answer must satisfy the conditions of both expressions. \nNow let us look at the choices. a > b and a < b do not take the second condition into account. (a > b and b < 0) will not always evaluate to true because if a > b and b < 0, then a could also be greater than 0, which results in the expression returning false. However, if a > b and b > 0, a must also be greater than 0, which satisfies both conditions. Therefore, (a > b and b > 0) is the correct answer. \n", "wrong_ans_explanation": "Let us split this expression into two different statements, The first expression, ! ( a <= b )  will only evaluate to true if a is not <= b. Therefore a must be greater than b. The second expression, (a * b > 0) will only evaluate to true if both a and b are positive or a and b are both negative. The correct answer must satisfy the conditions of both expressions. \nNow let us look at the choices. a > b and a < b do not take the second condition into account. (a > b and b < 0) will not always evaluate to true because if a > b and b < 0, then a could also be greater than 0, which results in the expression returning false. However, if a > b and b > 0, a must also be greater than 0, which satisfies both conditions. Therefore, (a > b and b > 0) is the correct answer. \n", "question": "Assume that a and b are integers. The boolean expression \n                                \n    ! ( a <= b ) && (a * b > 0)\n\nwill always evaluate to true given that \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a > b\n\n", "\n a < b\n\n", "\n a > b and b > 0       \n\n", "\n a > b and b < 0\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Java has its own order of operations. In this case, multiplication, division, and modular arithmetic all have equal priority within Java. So, you would start with the leftmost function and then keep going to the right. So, 3 * 6 = 18, 18 / 4 = 4 (round down because  it is an integer), and 4 % 3 = 1. Then, since subtraction has a lower priority than the other stated functions, this operation is done last. 13 - 1 = 12, so 12 is the correct answer.\n", "wrong_ans_explanation": "Java has its own order of operations. In this case, multiplication, division, and modular arithmetic all have equal priority within Java. So, you would start with the leftmost function and then keep going to the right. So, 3 * 6 = 18, 18 / 4 = 4 (round down because  it is an integer), and 4 % 3 = 1. Then, since subtraction has a lower priority than the other stated functions, this operation is done last. 13 - 1 = 12, so 12 is the correct answer.\n", "question": "What value is stored in end if\n    \n    int end = 13 - 3 * 6 / 4 % 3;\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 13\n\n", "\n -1\n\n", "\n 12     \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "This problem relies on nested if-else statements. Firstly, x >= 0 so we go inside the first if-statement. x <= 100 so we go into the second if statement. Then y is set to 90 (30 * 3 = 90), but y is not less than 50, so we skip the next if statement. Since the rest of the else statements are paired up with the first two if statements (if you are unsure about the pairing of if and else statements, look at the indenting), we can skip these else statements. Therefore, we end up with x = 30 and y = 90.\n", "wrong_ans_explanation": "This problem relies on nested if-else statements. Firstly, x >= 0 so we go inside the first if-statement. x <= 100 so we go into the second if statement. Then y is set to 90 (30 * 3 = 90), but y is not less than 50, so we skip the next if statement. Since the rest of the else statements are paired up with the first two if statements (if you are unsure about the pairing of if and else statements, look at the indenting), we can skip these else statements. Therefore, we end up with x = 30 and y = 90.\n", "question": "What values are stored in x and y after execution of the following program segment?\n        \n    int x = 30;\n    int y = 30;\n    if (x >= 0)\n    {\n        if (x <= 100)\n        {\n            y = x * 3;\n            if (y < 50)\n                x /= 10;\n        }\n        else\n            y = x * 2;\n    }\n    else\n        y = -x;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n x = 30 and y = 90         \n\n", "\n x = 30 and y = -30\n\n", "\n x = 30 and y = 60\n\n", "\n x = 30 and y = 40\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "You may think s.length would be 2 or there would be a compile-time error. However, when s is equated to t, the initial length of s is overridden by the properties of t, including its length (which is 3). So, the correct length of s is 3. \n                ", "wrong_ans_explanation": "You may think s.length would be 2 or there would be a compile-time error. However, when s is equated to t, the initial length of s is overridden by the properties of t, including its length (which is 3). So, the correct length of s is 3. \n                ", "question": "Consider the following code segment:\n        \n    String[] s = new String[2];\n    String[] t = { \u201cJoe\u201d, \u201cJack\u201d, \u201cJudy\u201d};\n    s = t;\n    System.out.print(s.length);\n        \nWhat will print as a result of this code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2\n\n", "\n 3   \n\n", "\n Nothing will print due to compile-time error\n\n", "\n Nothing will print due to run-time error\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "wrong_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "question": "Consider the method reverse:\n        \n    //Precondition:    n > 0.\n    //Postcondition:  returns n with its digits reversed.\n    //Example:          if n = 234, method reverse returns 432.\n    int reverse (int n)\n    {\n        int rem, revNum = 0;\n\n        /* code segment  */\n        return revNum;\n    }\n\nWhich of the following replacements for /* code segment  */ would cause the method to work as intended?\n                \n      I. for (int i = 0; i <= n; i++)\n         {\n              rem = n % 10;\n              revNum = revNum * 10 + rem;\n              n /= 10;\n         }        \n\n\n     II. while (n != 0)\n         {\n             rem = n % 10;\n             revNum = revNum * 10 + rem;\n             n /= 10;\n         }\n\n\n    III. for (int i = n; i != 0; i /= 10)\n         {\n            rem = i % 10;\n            revNum = revNum * 10 + rem;\n         }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II only \n\n", "\n II and III only       \n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: FINAL denotes that the values are constant and cannot be changed. In this problem, when a1 is set to b1, it tries to change the values within a1, which causes a compile-time error. Therefore, nothing will be printed due to a compile-time error.  \n", "wrong_ans_explanation": "Remember: FINAL denotes that the values are constant and cannot be changed. In this problem, when a1 is set to b1, it tries to change the values within a1, which causes a compile-time error. Therefore, nothing will be printed due to a compile-time error.  \n", "question": "Consider the following code segment:\n               \n    final int[] a1 = {1, 2};\n    int[] b1 = {3, 4};\n    a1 = b1;\n    System.out.print(a1[1]);\n        \nWhat is printed as a result of executing the code segment?\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2\n\n", "\n 3\n\n", "\n Nothing will be printed due to compile-time error          \n\n", "\n Nothing will be printed due to run-time error \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "There are two different ways to use the substring method. Firstly, you can use two parameters with the first one being the index you want to start the substring and the last parameter being one plus the index you want to stop the substring. \nSecondly, you can use one parameter that denotes the index you want to start the substring and Java will assume that you want the substring to include the rest of the string. To get \u201cscience\u201d out of \u201ccomputer science,\u201d you can either include one parameter (s.substring(9)) or make the second parameter the last index + 1, which is 16. Therefore, I and III are the correct options. \n", "wrong_ans_explanation": "There are two different ways to use the substring method. Firstly, you can use two parameters with the first one being the index you want to start the substring and the last parameter being one plus the index you want to stop the substring. \nSecondly, you can use one parameter that denotes the index you want to start the substring and Java will assume that you want the substring to include the rest of the string. To get \u201cscience\u201d out of \u201ccomputer science,\u201d you can either include one parameter (s.substring(9)) or make the second parameter the last index + 1, which is 16. Therefore, I and III are the correct options. \n", "question": "If the string \u201ccomputer science\u201d is assigned to the variable s, which of the following will return the string \u201cscience\u201d?\n                \n      I. s.substring(9);\n     II. s.substring(9, 15);\n    III. s.substring(9, 16);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only \n\n", "\n III only\n\n", "\n I and III   \n\n", "\n I and II\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The method doSomething replaces the values of the array with the indices of the array (i denotes the index). Therefore, after doSomething(arr) is called, arr would be {0, 1, 2, 3}. arr[1] = 1 and arr[3] = 3, so the correct output is 1 3. \n", "wrong_ans_explanation": "The method doSomething replaces the values of the array with the indices of the array (i denotes the index). Therefore, after doSomething(arr) is called, arr would be {0, 1, 2, 3}. arr[1] = 1 and arr[3] = 3, so the correct output is 1 3. \n", "question": "What will be the output of this code program?\n        \n    class Something\n    {\n        public static void main(String[] args)\n        {\n            int[] arr = {1, 2, 3, 4};\n            doSomething(arr);\n            System.out.print(arr[1] + \u201c \u201c);\n            System.out.print(arr[3]);\n        }\n\n\n        public void doSomething(int[] list)\n        {\n            int[] b = list;\n            for (int i = 0; i < b.length; i++)\n                b[i] = i;\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 0 \n\n", "\n 2 4\n\n", "\n 1 3      \n\n", "\n 0 2\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The .indexOf(\u201ce\u201d) function finds the first index where the letter \u201ce\u201d is  found, which is 3. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 27, which is \u201cstr.\u201d       \nTherefore, the value of str would be \u201csillystr.\u201d\n", "wrong_ans_explanation": "The .indexOf(\u201ce\u201d) function finds the first index where the letter \u201ce\u201d is  found, which is 3. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 27, which is \u201cstr.\u201d       \nTherefore, the value of str would be \u201csillystr.\u201d\n", "question": "What is the value of str after execution of the following?\n                \n    String line = \u201cSome more silly stuff on strings!\u201d;\n    int x = line.indexOf(\u201ce\u201d);\n    String str = line.substring(10, 15) + line.substring(25, 25 + x);\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201csillystrin\u201d\n\n", "\n \u201csilly str\u201d\n\n", "\n \u201csilly st\u201d\n\n", "\n \u201csillystr\u201d       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "numberCheck(50) essentially goes through the numbers 1 through 50 and checks how many are divisible by 5 and/or 2. typeA counts the amount of numbers that are divisible by 2 and 5, which is 5 (all the tens from 1 to 50). typeB counts the amount of numbers divisible by 2, which is 25 (even numbers from 1 to 50). typeC counts the amount of numbers divisible by 5, which is 10. Therefore, the correct output will be 5 25 10.\n", "wrong_ans_explanation": "numberCheck(50) essentially goes through the numbers 1 through 50 and checks how many are divisible by 5 and/or 2. typeA counts the amount of numbers that are divisible by 2 and 5, which is 5 (all the tens from 1 to 50). typeB counts the amount of numbers divisible by 2, which is 25 (even numbers from 1 to 50). typeC counts the amount of numbers divisible by 5, which is 10. Therefore, the correct output will be 5 25 10.\n", "question": "Consider the following method.\n                \n    public void numberCheck(int maxNum)\n    {\n            int typeA = 0;\n            int typeB = 0;\n            int typeC = 0;\n\n            for (int k = 1; k <= maxNum; k++)\n            {\n                    if (k % 2 == 0 && k % 5 == 0)\n                            typeA++;\n                    if (k % 2 == 0)\n                            typeB++;\n                    if (k % 5 == 0)\n                            typeC++;\n            }\n            System.out.println(typeA + \u201c \u201c + typeB + \u201c \u201c + typeC);\n    }\n        \nWhat is printed as a result of the call numberCheck(50)?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5 20 5\n\n", "\n 5 20 10\n\n", "\n 5 25 5\n\n", "\n 5 25 10          \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In order to interchange values in an array, you must have a placeholder (or else one of the values will be lost). Firstly, the placeholder must be initialized (int k = arr[0]). Then, you can replace arr[0] with arr[5] (arr[0] = arr[5]). Finally, since arr[0] has already been changed to arr[5], we have to set arr[5] to k (arr[5] = k). \n", "wrong_ans_explanation": "In order to interchange values in an array, you must have a placeholder (or else one of the values will be lost). Firstly, the placeholder must be initialized (int k = arr[0]). Then, you can replace arr[0] with arr[5] (arr[0] = arr[5]). Finally, since arr[0] has already been changed to arr[5], we have to set arr[5] to k (arr[5] = k). \n", "question": "Assume that an array of integer values has been declared as follows and has been initialized.\n                        \n    int[] arr = new int[10];\n        \nWhich of the following code segments correctly interchanges the values of arr[0] and arr[5]?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n arr[0] = 5;\n arr[5] = 0;\n\n", "\n arr[0] = arr[5];\n arr[5] = arr[0];\n\n", "\n int k = arr[5];\n arr[0] = arr[5];\n arr[5] = k;\n\n", "\n int k = arr[0];\n arr[0] = arr[5];\n arr[5] = k;\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The add method with one parameter just adds the object to the end of the items ArrayList. Therefore, after A, B, and C are added, items will look like this: [A, B, C]. Items.add(0, \u201cD\u201d) adds D at the 0th index and shifts all the other letters to the right. After this is called, items will look like this: [D, A, B, C]. When items.remove(3) is called, the letter at the third index will be removed, so items will look like this: [D, A, B]. Finally, after E is added at the 0th index, items will look like [E, D, A, B], which is the correct answer.\n                ", "wrong_ans_explanation": "The add method with one parameter just adds the object to the end of the items ArrayList. Therefore, after A, B, and C are added, items will look like this: [A, B, C]. Items.add(0, \u201cD\u201d) adds D at the 0th index and shifts all the other letters to the right. After this is called, items will look like this: [D, A, B, C]. When items.remove(3) is called, the letter at the third index will be removed, so items will look like this: [D, A, B]. Finally, after E is added at the 0th index, items will look like [E, D, A, B], which is the correct answer.\n                ", "question": "Consider the following code segment.\n        \n    ArrayList<String> items = new ArrayList<String>();\n    items.add(\u201cA\u201d);\n    items.add(\u201cB\u201d);        \n    items.add(\u201cC\u201d);\n    items.add(0, \u201cD\u201d);\n    items.remove(3);\n    items.add(0, \u201cE\u201d);\n    System.out.println(items);\n\nWhat is the output by the code segment?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [A, B, C, E]\n\n", "\n [A, B, D, E]\n\n", "\n [E, D, A, B]            \n\n", "\n [E, D, A, C]\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "ArrayLists do not have the same properties as an array. For example, to receive a value at an index, you must use the get() method. Additionally, to see if two values are equal, you have to use the equals() method. Therefore, to see if the value in nameList at the index j is equal to name, you must write this: nameList.get(j).equals(name).\n", "wrong_ans_explanation": "ArrayLists do not have the same properties as an array. For example, to receive a value at an index, you must use the get() method. Additionally, to see if two values are equal, you have to use the equals() method. Therefore, to see if the value in nameList at the index j is equal to name, you must write this: nameList.get(j).equals(name).\n", "question": "Consider the following method that is intended to modify its parameter nameList by replacing all occurrences of name with newValue.\n                \n    public void replace (ArrayList<String> nameList, String name, String newValue)\n    {\n        for (int j = 0; j < nameList.size(); j++)\n        {\n            if ( /* expression */ )\n            {\n                nameList.set(j, newValue);\n            }\n        }\n    }\n\nWhich of the following can be used to replace /* expression */ so that replace will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n nameList.get(j).equals(name)          \n\n", "\n nameList.get(j) == name\n\n", "\n nameList.remove(j)\n\n", "\n nameList[j].equals(name)\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Pattern recognition is essential to answer this question quickly. Firstly, you must realize that s is being added by increments of 1 every time an iteration of a for loop occurs. For example, since lim is 10 and inner is initially 1, s will be 10 by the time the inner for loop ends. However, there are multiple iterations of this inner for loop (as seen with the outer for loop) and every new iteration increases the initial value of inner by 1 (outer++). Therefore, after outer = lim( after the for loops have ended ), s = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55 and sol(10) would output 55.\n", "wrong_ans_explanation": "Pattern recognition is essential to answer this question quickly. Firstly, you must realize that s is being added by increments of 1 every time an iteration of a for loop occurs. For example, since lim is 10 and inner is initially 1, s will be 10 by the time the inner for loop ends. However, there are multiple iterations of this inner for loop (as seen with the outer for loop) and every new iteration increases the initial value of inner by 1 (outer++). Therefore, after outer = lim( after the for loops have ended ), s = 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55 and sol(10) would output 55.\n", "question": "Consider the following method.\n                \n    public int sol(int lim)\n    {\n        int s = 0;\n        for (int outer = 1; outer <= lim; outer++)\n        {\n            for (int inner = outer; inner <= lim; inner++)\n            {\n                s++;\n            }\n        }                \n        return s;\n    }\n        \nWhat value is returned as a result of the call sol(10)?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 20\n\n", "\n 45\n\n", "\n 55       \n\n", "\n 100\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "You could solve this problem by finding every value of k and doing modular arithmetic until k = 10. Or you could realize that since k is added by increments of 2 if k is divisible by 3 and added by increments of 1 if k is not divisible by 3, k % 3  repeatedly oscillates between 0 and 2. For example, when k = 0, k % 3 = 0, so 0 is printed and k is added by 2. Then, k is 2 and k % 3 is now 2, so 2 is printed and k is added by 1. This results in k being 3 and k % 3 = 0, which starts the entire cycle again. Now that the pattern has been realized, we need to understand when we have to stop. Since the last value where k % 3 = 0 is k = 9 (k has to be less than 10), we know that 0 is outputted and k is incremented by 2 after this, which results in k being 11, thus ending the while loop. \n    Therefore, the correct answer out of the answer choices would be 0 2 0 2 0 2 0.\n", "wrong_ans_explanation": "You could solve this problem by finding every value of k and doing modular arithmetic until k = 10. Or you could realize that since k is added by increments of 2 if k is divisible by 3 and added by increments of 1 if k is not divisible by 3, k % 3  repeatedly oscillates between 0 and 2. For example, when k = 0, k % 3 = 0, so 0 is printed and k is added by 2. Then, k is 2 and k % 3 is now 2, so 2 is printed and k is added by 1. This results in k being 3 and k % 3 = 0, which starts the entire cycle again. Now that the pattern has been realized, we need to understand when we have to stop. Since the last value where k % 3 = 0 is k = 9 (k has to be less than 10), we know that 0 is outputted and k is incremented by 2 after this, which results in k being 11, thus ending the while loop. \n    Therefore, the correct answer out of the answer choices would be 0 2 0 2 0 2 0.\n", "question": "Consider the following code segment.\n        \n    int k = 0; \n    while (k < 10)\n    {\n        System.out.print((k % 3) + \u201c \u201c);\n        if ((k % 3) == 0)\n            k = k + 2;\n        else\n            k++;\n    }\n\nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 2 1 0 2\n\n", "\n 0 2 0 2 0 2\n\n", "\n 0 2 1 0 2 1 0\n\n", "\n 0 2 0 2 0 2 0            \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since outer is being printed, you are essentially outputting the number of times the inner for loop is being iterated. Since inner and outer both initially equal 0, the inner for loop will only iterate once, printing \u201c0.\u201d When outer = 1, the inner for loop will iterate twice, printing \u201c1 1.\u201d As you go on, you will notice that every number is printed one more time than the last number (1 is printed twice while 0 is printed once). This trend will continue until outer = 4 because the outer for loop only exists when outer < 4. Therefore, the printed result would be 0 1 1 2 2 2 3 3 3 3.\n", "wrong_ans_explanation": "Since outer is being printed, you are essentially outputting the number of times the inner for loop is being iterated. Since inner and outer both initially equal 0, the inner for loop will only iterate once, printing \u201c0.\u201d When outer = 1, the inner for loop will iterate twice, printing \u201c1 1.\u201d As you go on, you will notice that every number is printed one more time than the last number (1 is printed twice while 0 is printed once). This trend will continue until outer = 4 because the outer for loop only exists when outer < 4. Therefore, the printed result would be 0 1 1 2 2 2 3 3 3 3.\n", "question": "Consider the following code segment.\n\n    for (int outer = 0; outer < n; outer++)\n    {\n        for (int inner = 0; inner <= outer; inner++)\n        {\n            System.out.print(outer + \u201c \u201c);\n        }\n    }\n\nIf n has been declared as an integer with value 4, what is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 1 2 3\n\n", "\n 0 0 1 0 1 2\n\n", "\n 0 1 2 2 3 3 3\n\n", "\n 0 1 1 2 2 2 3 3 3 3            \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The first part of the expression, !( a < b ) is equivalent to saying a >= b. The second part of the expression, !( a > b ) is equivalent to saying a <= b. Since an AND statement connects these two statements, the only possible values that would satisfy both parts of the expression would be if a == b.\n", "wrong_ans_explanation": "The first part of the expression, !( a < b ) is equivalent to saying a >= b. The second part of the expression, !( a > b ) is equivalent to saying a <= b. Since an AND statement connects these two statements, the only possible values that would satisfy both parts of the expression would be if a == b.\n", "question": "Assume that a and b are variables of type int. The expression \n                \n    !( a < b ) && !( a > b ) \n        \nis equivalent to which of the following?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n true\n\n", "\n false\n\n", "\n a == b           \n\n", "\n a != b \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I produces the correct output because as this code loops from 1 to 20 while adding by 3 from every iteration (k = k + 3) with a while loop, it prints every number where the remainder is 1 when divided by 3. Option II is the exact same code as Option I, except for the fact that it is restructured into a for loop. Option III is also correct and the most efficient code because this code realizes the fact that the output is a sequence that keeps adding by 3 until 20 is reached. Therefore, for Option III, no if statement is needed because k is added by 3 every iteration. Option I, II, and III are correct.\n", "wrong_ans_explanation": "Option I produces the correct output because as this code loops from 1 to 20 while adding by 3 from every iteration (k = k + 3) with a while loop, it prints every number where the remainder is 1 when divided by 3. Option II is the exact same code as Option I, except for the fact that it is restructured into a for loop. Option III is also correct and the most efficient code because this code realizes the fact that the output is a sequence that keeps adding by 3 until 20 is reached. Therefore, for Option III, no if statement is needed because k is added by 3 every iteration. Option I, II, and III are correct.\n", "question": "Consider the following code segments.\n                \n      I. int k = 1;\n         while (k < 20)\n         {\n             if (k % 3 == 1)\n             System.out.print(k + \u201c  \u201c);\n             k = k + 3;\n         }\n\n     II. for (int k = 1; k < 20; k++)\n         {\n             if (k % 3 == 1)\n                 System.out.print(k + \u201c  \u201c);\n         }\n\n    III. for (int k = 1; k < 20; k = k + 3)\n         {\n             System.out.print(k + \u201c  \u201c);\n         }                         \n\nWhich of the code segments above will produce the following output?\n\n    1  4  7  10  13  16  19\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II only\n\n", "\n II and III only\n\n", "\n I, II, and III          \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Taking the necessary information from the mini-paragraph is essential to understanding this question. The student should get 5 bonus points if and only if the student gets all the bonus questions correct. Therefore, option I is obviously correct and option II is false. Option III is also incorrect because there are consecutive if statements without else statements. This means that if a student gets only one bonus question correct, he/she will still get 5 bonus points.\n", "wrong_ans_explanation": "Taking the necessary information from the mini-paragraph is essential to understanding this question. The student should get 5 bonus points if and only if the student gets all the bonus questions correct. Therefore, option I is obviously correct and option II is false. Option III is also incorrect because there are consecutive if statements without else statements. This means that if a student gets only one bonus question correct, he/she will still get 5 bonus points.\n", "question": "A teacher puts three bonus questions on a test and awarded 5 extra points to anyone who answered all three bonus questions correctly and no extra points otherwise. Assume the boolean variables bonusOne, bonusTwo, and bonusThree indicate whether a student has answered the particular question correctly. Each variable was assigned true if the answer was correct and false if the answer was incorrect. Which of the following code segments will properly update the variable grade based on a student\u2019s performance on the bonus questions? \n        \n      I. if (bonusOne && bonusTwo && bonusThree)\n             grade += 5; \n\n\n     II. if (bonusOne || bonusTwo || bonusThree)\n             grade += 5; \n\n\n    III. if (bonusOne)\n             grade += 5;\n         if (bonusTwo)\n             grade += 5;\n         if (bonusThree)\n             grade += 5;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only           \n\n", "\n III only\n\n", "\n I and III\n\n", "\n II and III\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires sheer brute force because it would be more time-consuming to find a pattern and utilize it. So, firstly, since j = 0 and a.length is 5, a[j] + 3 = 3 and 3 % a.length is 3. Therefore, a[0] = a[3] = 1. When j = 2, a[j] + 3 = 5 and 5 % a.length = 0. Therefore, a[1] = a[0] = 1. By that method of reasoning, the value of a[1] is 1.\n", "wrong_ans_explanation": "This question requires sheer brute force because it would be more time-consuming to find a pattern and utilize it. So, firstly, since j = 0 and a.length is 5, a[j] + 3 = 3 and 3 % a.length is 3. Therefore, a[0] = a[3] = 1. When j = 2, a[j] + 3 = 5 and 5 % a.length = 0. Therefore, a[1] = a[0] = 1. By that method of reasoning, the value of a[1] is 1.\n", "question": "What is the value of a[1] after the following code is executed?\n        \n    int[] a = {0, 2, 4, 1, 3};\n    for (int j = 0; j < a.length; j++)\n        a[j] = a[(a[j] + 3) % a.length];\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 1       \n\n", "\n 2\n\n", "\n 3\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since k is added by 2 every iteration, x essentially adds up every second value in arr. x would equal arr[0] + arr[2] + arr[4] + arr[6]. This is equal to 3 + 1 + 1 + 2 = 7. Therefore, mystery(num) would return 7.\n", "wrong_ans_explanation": "Since k is added by 2 every iteration, x essentially adds up every second value in arr. x would equal arr[0] + arr[2] + arr[4] + arr[6]. This is equal to 3 + 1 + 1 + 2 = 7. Therefore, mystery(num) would return 7.\n", "question": "Consider the following method.\n\n    public static int mystery(int[] arr)\n    {\n        int x = 0;\n        for (int k = 0; k < arr.length; k = k + 2)\n            x = x + arr[k];\n        return x;\n    }\n\nAssume that the array num has been declared and initialized as follows. \n\n    int[] num = {3, 6, 1, 0, 1, 4, 2};\n\nWhat value will be returned as a result of the call mystery(num)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5\n\n", "\n 6\n\n", "\n 7         \n\n", "\n 10\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Something to memorize ( Mnemonic: i4f4d8 ...I am a fan of Falcons, I will remember the mnemonic as \u2018I root for Falcons\u2019...thus i4f and double is 4 times 2)... The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes.\n", "wrong_ans_explanation": "Something to memorize ( Mnemonic: i4f4d8 ...I am a fan of Falcons, I will remember the mnemonic as \u2018I root for Falcons\u2019...thus i4f and double is 4 times 2)... The size of an int is 4 bytes, the size of a float is 4 bytes, and since doubles have a larger size than both these primitive types, the size of a double has to be 8 bytes.\n", "question": "What is the size of a double variable in Java?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2 bytes\n\n", "\n 4 bytes\n\n", "\n 8 bytes         \n\n", "\n It depends on the compiler setting\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since both these operators(+) have the same precedence, the leftmost operator must be executed first (left to right). Because a string is attempting to be added to an integer, concatenation must occur, which results in the integer turning into a string. Therefore, \u201c1\u201d + new Integer(2) would equal \u201c12\u201d as a string. Then, this would have to be added to 3, which would equal 123.\n", "wrong_ans_explanation": "Since both these operators(+) have the same precedence, the leftmost operator must be executed first (left to right). Because a string is attempting to be added to an integer, concatenation must occur, which results in the integer turning into a string. Therefore, \u201c1\u201d + new Integer(2) would equal \u201c12\u201d as a string. Then, this would have to be added to 3, which would equal 123.\n", "question": "What is displayed by \n                \n    System.out.println(\u201c1\u201d + new Integer(2) + 3);\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 15\n\n", "\n 123         \n\n", "\n ClassCastException\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In option I, a new object from the Year2019 class is created, which returns 2019 from the toString() method. Therefore, for option I, Test2019 would compile and print 2019. If option II is used, the object that is created from Test2019 will call a toString() method. Since Test2019 has no toString() method, the Test2019 class would inherit the toString() method in the Year2019 class and return 2019 without any errors. \n    Option III is the exact same as Option II because this refers to the current object, which is test, a new Test2019(). Therefore, the code for option III would mimic the behavior of the code for option II and would display 2019. Therefore, option I, II, and III are all correct.\n", "wrong_ans_explanation": "In option I, a new object from the Year2019 class is created, which returns 2019 from the toString() method. Therefore, for option I, Test2019 would compile and print 2019. If option II is used, the object that is created from Test2019 will call a toString() method. Since Test2019 has no toString() method, the Test2019 class would inherit the toString() method in the Year2019 class and return 2019 without any errors. \n    Option III is the exact same as Option II because this refers to the current object, which is test, a new Test2019(). Therefore, the code for option III would mimic the behavior of the code for option II and would display 2019. Therefore, option I, II, and III are all correct.\n", "question": "Consider the following classes:               \n        \n    public class Year2019\n    {\n        public String toString() { return \u201c2019\u201d; }\n    }\n\n    public class Test2019 extends Year2019\n    {\n        public void print()\n        {        \n            < missing statement > \n        }\n    }\n\nWhich of the following could replace < missing statement > so that Test2019 would compile with no errors and would display 2019? \n\n    Test2019 test = new Test2019();\n    test.print();\n\n      I. System.out.println(new Year2019());\n     II. System.out.println(new Test2019());        \n    III. System.out.println(this);\n        \n        ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II \n\n", "\n II and III\n\n", "\n I, II, and III        \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since x = 7 < 10 and y = 3 > 0, the statement (x < 10) && (y < 0) would evaluate to false. Therefore, we must turn to the else statement, which prints \u201cValue is: \u201c + x / y. Because both x and y are integers, when dividing x and y, we must round down. By that method of reasoning, 7 / 3 = 2, so the code would print \u201cValue is: 2\u201d. \n", "wrong_ans_explanation": "Since x = 7 < 10 and y = 3 > 0, the statement (x < 10) && (y < 0) would evaluate to false. Therefore, we must turn to the else statement, which prints \u201cValue is: \u201c + x / y. Because both x and y are integers, when dividing x and y, we must round down. By that method of reasoning, 7 / 3 = 2, so the code would print \u201cValue is: 2\u201d. \n", "question": "Consider the following code segment.\n        \n    int x = 7;\n    int y = 3;\n    if ((x < 10) && (y < 0))\n        System.out.println(\u201cValue is: \u201c + x * y);\n    else\n        System.out.println(\u201cValue is: \u201c + x / y);\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Value is: 21\n\n", "\n Value is: 2.3333333\n\n", "\n Value is: 2            \n\n", "\n Value is : 0\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Don\u2019t worry, you do not have to do 50 iterations to find the value of n. However, we still must find n after a few iterations to determine the correct answer. In this for loop, n is being added by 3 and then divided by 2 for 50 iterations. (Remember: Since n is an int, we must always round down when dividing.) So, (2005 + 3) / 2 = 1004, (1004 + 3) / 2 = 503, (503 + 3) / 2 = 253, (253 + 3) / 2 = 128, (128 + 3) / 2 = 65, (65 + 3) / 2 = 34, (34 + 3) / 2 = 18, (18 + 3) / 2 = 10, (10 + 3) / 2 = 6, (6 + 3) / 2 = 4, and finally, (4 + 3) / 2 = 3. Although these aren\u2019t 50 iterations, as you can see if you try to do (3 + 3) / 2, you will keep receiving 3. Therefore, the rest of the iterations are redundant, so you are left with n being 3. \n", "wrong_ans_explanation": "Don\u2019t worry, you do not have to do 50 iterations to find the value of n. However, we still must find n after a few iterations to determine the correct answer. In this for loop, n is being added by 3 and then divided by 2 for 50 iterations. (Remember: Since n is an int, we must always round down when dividing.) So, (2005 + 3) / 2 = 1004, (1004 + 3) / 2 = 503, (503 + 3) / 2 = 253, (253 + 3) / 2 = 128, (128 + 3) / 2 = 65, (65 + 3) / 2 = 34, (34 + 3) / 2 = 18, (18 + 3) / 2 = 10, (10 + 3) / 2 = 6, (6 + 3) / 2 = 4, and finally, (4 + 3) / 2 = 3. Although these aren\u2019t 50 iterations, as you can see if you try to do (3 + 3) / 2, you will keep receiving 3. Therefore, the rest of the iterations are redundant, so you are left with n being 3. \n", "question": "What is the value of n after the following code is executed?\n        \n    int n = 2005;\n    for (int j = 0; j < 50; j++)\n        n = (n + 3) / 2; \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 1\n\n", "\n 2\n\n", "\n 3           \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since a is being rotated, the number of rows of rotate( a ) would be equal to the number of columns of a. Therefore, because a[0].length is the number of columns of a ( a[0] is the first row in a ), it is also the number of rows for rotate( a ). Additionally, the number of rows of a is equal to the number of columns of rotate( a ). Therefore, a.length is equal to the number of columns of rotate( a ). \n    Finally, the initialization of an array should be as follows: new int[x][y] where x and y are x is equal to the number of rows and y is equal to the number of columns. As a result, expression 1 should be a[0].length, expression 2 should be a.length, and expression 3 should be new int[rows][cols].\n", "wrong_ans_explanation": "Since a is being rotated, the number of rows of rotate( a ) would be equal to the number of columns of a. Therefore, because a[0].length is the number of columns of a ( a[0] is the first row in a ), it is also the number of rows for rotate( a ). Additionally, the number of rows of a is equal to the number of columns of rotate( a ). Therefore, a.length is equal to the number of columns of rotate( a ). \n    Finally, the initialization of an array should be as follows: new int[x][y] where x and y are x is equal to the number of rows and y is equal to the number of columns. As a result, expression 1 should be a[0].length, expression 2 should be a.length, and expression 3 should be new int[rows][cols].\n", "question": "Consider the following code.\n        \n    public int[][] rotate( int[][] a )\n    {\n        int rows = <expression 1>;\n        int cols = <expression 2>;\n        int[][] b = <expression 3>;\n\n        for (int r = 0; r < rows; r++)\n            for (int c = 0; c < cols; c++)\n                b[r][c] = <expression 4>;\n        return b;\n    }\n\n    // For example, if a holds \n            1 2 3\n            4 5 6\n    // rotate( a ) will hold\n            3 6\n            2 5\n            1 4\n\nWhich of the following should replace <expression 1>, <expression 2>, and <expression 3> respectively?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\na.cols, a.rows, new int(rows, cols)\n\n", "\na.cols, a.rows, new int[][](rows, cols)\n\n", "\na[0].length,  a.length, new int[rows][cols]\n\n", "\na[0].length, a.length, new int[][](rows, cols)\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "To determine the code that should replace expression 4, we should take an example such as b[0][0]. As seen in the question, b[0][0] = a[0][2] = 3. Now let us look at the choices to see which option correctly replaces expression 4 to achieve the desired result. Initially, rows = 3, cols = 2, r = 0, and c = 0. Therefore, the only expression that initially outputs a[0][2] is a[c][rows - 1 - r]. \n", "wrong_ans_explanation": "To determine the code that should replace expression 4, we should take an example such as b[0][0]. As seen in the question, b[0][0] = a[0][2] = 3. Now let us look at the choices to see which option correctly replaces expression 4 to achieve the desired result. Initially, rows = 3, cols = 2, r = 0, and c = 0. Therefore, the only expression that initially outputs a[0][2] is a[c][rows - 1 - r]. \n", "question": "Consider the following code.\n        \n    public int[][] rotate( int[][] a )\n    {\n        int rows = <expression 1>;\n        int cols = <expression 2>;\n        int[][] b = <expression 3>;\n\n        for (int r = 0; r < rows; r++)\n            for (int c = 0; c < cols; c++)\n                b[r][c] = <expression 4>;\n        return b;\n    }\n\n    // For example, if a holds \n            1 2 3\n            4 5 6\n    // rotate( a ) will hold\n            3 6\n            2 5\n            1 4\n\nWhich of the following should replace <expression 4>?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a[c][rows - 1 - r]      \n\n", "\n a[cols - 1- c][r]       \n\n", "\n a[cols - 1- c][rows - 1- r]\n\n", "\n a[rows - 1 -r][cols - 1 - c]\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question can be done relatively quickly. When k = 1, mystery adds 1 * 1 + 3 = 4 to the ArrayList<Integer> seq. Therefore, the first value in seq should be 4, which is true in only one option. Consequently, the [4, 7, 12, 19, 28, 39] is the correct output.\n", "wrong_ans_explanation": "This question can be done relatively quickly. When k = 1, mystery adds 1 * 1 + 3 = 4 to the ArrayList<Integer> seq. Therefore, the first value in seq should be 4, which is true in only one option. Consequently, the [4, 7, 12, 19, 28, 39] is the correct output.\n", "question": "Consider the following method.\n                \n    public ArrayList<Integer> mystery(int n)\n    {\n        ArrayList<Integer> seq = new ArrayList<Integer>();\n        for (int k = 1; k <= n; k++)\n            seq.add(new Integer(k * k + 3));\n        return seq;\n    }\n        \nWhich of the following is printed as a result of executing the following statement?\n\n    System.out.println(mystery(6));\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [3, 4, 7, 12, 19, 28]\n\n", "\n [3, 4, 7, 12, 19, 28, 39]\n\n", "\n [4, 7, 12, 19, 28, 39]          \n\n", "\n [39, 28, 19, 12, 7, 4]\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "If d1 and d2 are considered equal according to almostEqual, then this means that the difference between d1 and d2 is less than or equal to the tolerance value. However, an absolute value must be used because d2 could be greater than d1, which would result in (d1 - d2) being negative. Therefore, the correct code should be:\n        \n    return Math.abs(d1 - d2) <= tolerance;  \n", "wrong_ans_explanation": "If d1 and d2 are considered equal according to almostEqual, then this means that the difference between d1 and d2 is less than or equal to the tolerance value. However, an absolute value must be used because d2 could be greater than d1, which would result in (d1 - d2) being negative. Therefore, the correct code should be:\n        \n    return Math.abs(d1 - d2) <= tolerance;  \n", "question": "Consider the following method that is intended to determine if the double values d1 and d2 are close enough to be considered equal. For example, given a tolerance of 0.001, the values 54.32271 and 54.32294 would be considered equal.\n        \n    /* return true if d1 and d2 are within the specified tolerance, false otherwise */\n\n    public boolean almostEqual(double d1, double d2, double tolerance)\n    {\n            /* missing code */\n    }\n\nWhich of the following should replace /* missing code */ so that almostEqual will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n return ((d1 + d2) / 2) <= tolerance;\n\n", "\n return (d1 - d2) >= tolerance;\n\n", "\n return ((d1 + d2) / 2) >= tolerance;\n\n", "\n return Math.abs(d1 - d2) <= tolerance;              \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "To find the sum of the elements in the array key, we must add up the individual values of each index in key. Therefore, it would seem that the sum should be:\n\n    sum += key[j];\n\nHowever, since j begins at 1 and ends at key.length, this code would return an IndexOutOfBoundsException. Therefore, to accommodate, the correct line of code should be:\n\n    sum += key[j - 1];\n", "wrong_ans_explanation": "To find the sum of the elements in the array key, we must add up the individual values of each index in key. Therefore, it would seem that the sum should be:\n\n    sum += key[j];\n\nHowever, since j begins at 1 and ends at key.length, this code would return an IndexOutOfBoundsException. Therefore, to accommodate, the correct line of code should be:\n\n    sum += key[j - 1];\n", "question": "Consider the following method that is intended to return the sum of the elements in the array key.\n                \n    public static int sumArray(int[] key)\n    {\n        int sum = 0;\n        for (int j = 1; j <= key.length; j++)\n        {\n            /* missing code */\n        }\n        return sum;\n    }\n\nWhich of the following statements should be used to replace /* missing code */ so that sumArray will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n sum = key[j];\n\n", "\n sum += key[j - 1];        \n\n", "\n sum += key[j];\n\n", "\n sum += sum + key[j - 1];\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "(Remember: The method .substring(x, y) returns the string from index x to index y - 1.) Inside the for loop, input.substring(k, k + 1) returns the part of input from k to k + 1 - 1 (which is just k). As a result, this call to substring just returns the value at k. Since the for loop begins at k = 1 and iterates in intervals of k += 2, at the end of the execution of the for loop, the output should return:\n\n    output = input[1] + input[3] + input[5] + input[7] = \u201coptr\u201d\n    ", "wrong_ans_explanation": "(Remember: The method .substring(x, y) returns the string from index x to index y - 1.) Inside the for loop, input.substring(k, k + 1) returns the part of input from k to k + 1 - 1 (which is just k). As a result, this call to substring just returns the value at k. Since the for loop begins at k = 1 and iterates in intervals of k += 2, at the end of the execution of the for loop, the output should return:\n\n    output = input[1] + input[3] + input[5] + input[7] = \u201coptr\u201d\n    ", "question": "Consider the following method.\n        \n    public String mystery(String input)\n    {\n        String output = \u201c\u201d;\n        for (int k = 1; k < input.length(); k += 2)\n        {\n            output += input.substring(k, k + 1);\n        }        \n        return output;\n    }\n        \nWhat is returned as a result of the call mystery(\u201ccomputer\u201d)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201ccomputer\u201d\n\n", "\n \u201ccmue\u201d\n\n", "\n \u201coptr\u201d             \n\n", "\n \u201compute\u201d\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This code essentially prints all the indices and values in the array where this value of this index is greater than the value of this index + 1. The first place where this condition is upheld is k = 0. At k = 0, (arr[0] = 7) > (arr[1] = 2). Therefore, 0 (the index) and 7 (the value) is printed. This condition is also true at k = 2 and k = 3. As a result of executing the code segment, this will be printed:\n\n    0 7 2 5 3 3\n                ", "wrong_ans_explanation": "This code essentially prints all the indices and values in the array where this value of this index is greater than the value of this index + 1. The first place where this condition is upheld is k = 0. At k = 0, (arr[0] = 7) > (arr[1] = 2). Therefore, 0 (the index) and 7 (the value) is printed. This condition is also true at k = 2 and k = 3. As a result of executing the code segment, this will be printed:\n\n    0 7 2 5 3 3\n                ", "question": "Consider the following code segment.\n                \n    int[] arr = {7, 2, 5, 3, 0, 10};\n    for (int k = 0; k < arr.length - 1; k++)\n    {\n        if (arr[k] > arr[k + 1])\n            System.out.print(k + \u201c \u201c + arr[k] + \u201c \u201c);\n    }\n        \nWhat will be printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 2 2 3 3 0\n\n", "\n 0 7 2 5 3 3            \n\n", "\n 0 7 2 5 5 10\n\n", "\n 1 7 3 5 4 3 \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question requires you look at the intricacies of for loops. Since the contents of a1 end at index a1.length - 1 (since j < a1.length), a2 must start at a1.length. Therefore, the contents of a2 must be positioned at indices k + a1.length.\n", "wrong_ans_explanation": "This question requires you look at the intricacies of for loops. Since the contents of a1 end at index a1.length - 1 (since j < a1.length), a2 must start at a1.length. Therefore, the contents of a2 must be positioned at indices k + a1.length.\n", "question": "Consider the following incomplete method that is intended to return an array that contains the contents of its first array parameter followed by the contents of its second array parameter.\n                \n    public static int[] add(int[] a1, int[] a2)\n    {\n        int[] result = new int[a1.length + a2.length];\n        for (int j = 0; j < a1.length; j++)\n            result[j] = a1[j];\n        for (int k = 0; k < a2.length; k++)\n            result[  /*  index  */  ] = a2[k];        \n        return result;\n     }\n                \nWhich of the following expressions can be used to replace /*  index  */ so that add will work as intended?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n k\n\n", "\n k + a1.length - 1\n\n", "\n k + a1.length        \n\n", "\n k + a1.length + 1\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since the for loop begins at k = 3, the values from index 0 to 2 are untouched. However, starting from k = 3 to the end of the array, the value at index k is replaced with the value at index k + 1. Additionally, since the length of the array must remain the same (since we are not changing the length of the array), the last value in the array must be the same because there is no value after this to replace it with. Therefore, after executing the code segment, the array arr will look like this: \n\n    {1, 2, 3, 5, 6, 7, 7}\n", "wrong_ans_explanation": "Since the for loop begins at k = 3, the values from index 0 to 2 are untouched. However, starting from k = 3 to the end of the array, the value at index k is replaced with the value at index k + 1. Additionally, since the length of the array must remain the same (since we are not changing the length of the array), the last value in the array must be the same because there is no value after this to replace it with. Therefore, after executing the code segment, the array arr will look like this: \n\n    {1, 2, 3, 5, 6, 7, 7}\n", "question": "Consider the following code segment.\n        \n    int[] arr = {1, 2, 3, 4, 5, 6, 7};\n    for (int k = 3; k < arr.length - 1; k++)\n            arr[k] = arr[k + 1];\n        \nWhich of the following represents the contents of arr as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n {1, 2, 3, 4, 5, 6, 7}\n\n", "\n {1, 2, 3, 5, 6, 7}\n\n", "\n {1, 2, 3, 5, 6, 7, 7}            \n\n", "\n {1, 2, 3, 5, 6, 7, 8}\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Firstly, we can see that !( a != b ) is equal to a == b. Let A = ( a == b ) and B = (b  > 7). Then, !( A && B ) must equal !A || !B. Since !A is equal to ( a != b ) and !B is equal to (b <= 7), then \n\n    !( !( a != b ) && ( b > 7 )) must equal ( a != b ) || ( b <= 7 ) \n", "wrong_ans_explanation": "Firstly, we can see that !( a != b ) is equal to a == b. Let A = ( a == b ) and B = (b  > 7). Then, !( A && B ) must equal !A || !B. Since !A is equal to ( a != b ) and !B is equal to (b <= 7), then \n\n    !( !( a != b ) && ( b > 7 )) must equal ( a != b ) || ( b <= 7 ) \n", "question": "Assume that a and b have been defined and initialized as int values. The expression \n                \n    !( !( a != b ) && ( b > 7 ))\n        \nis equivalent to which of the following?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n ( a != b ) || ( b < 7 )\n\n", "\n ( a != b ) || ( b <= 7 )              \n\n", "\n ( a == b ) || ( b <= 7 )\n\n", "\n ( a != b ) && (b <= 7)\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The .compareTo() method compares two strings lexicographically (A.K.A. according to Unicode). If the first string appears first in an alphabetized list, then this .compareTo() method would return a negative number. Therefore, to find the index of the word that appears first in an alphabetized list, you would have to make sure that this word would return a negative number in the .compareTo() method when compared to all the other words in the array of Strings. As a result, the condition in the for loop should be:\n\n    words[index].compareTo(words[minPos]) < 0 \n ", "wrong_ans_explanation": "The .compareTo() method compares two strings lexicographically (A.K.A. according to Unicode). If the first string appears first in an alphabetized list, then this .compareTo() method would return a negative number. Therefore, to find the index of the word that appears first in an alphabetized list, you would have to make sure that this word would return a negative number in the .compareTo() method when compared to all the other words in the array of Strings. As a result, the condition in the for loop should be:\n\n    words[index].compareTo(words[minPos]) < 0 \n ", "question": "The following method is intended to return the index to the \u201csmallest\u201d word, namely, the word that would appear first in an alphabetized list.\n        \n    //Precondition: words is initialized with lowercase words.\n    //              words.length > 0\n\n    public static int findMin(String[] words)\n    {\n        int minPos = 0;\n        for (int index = 1; index < words.length; index++)\n        {\n            if ( /* condition */ )\n            {\n                minPos = index;\n            }        \n        }\n        return minPos;\n    }\n        \nWhich of the following should be used to replace /* condition */  so that findMin works as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n words[index] > words[minPos]\n\n", "\n words[index].compareTo(words[minPos]) > 0\n\n", "\n words[index].compareTo(words[minPos]) >= 0\n\n", "\n words[index].compareTo(words[minPos]) < 0              \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In this for loop, s.substring(1) returns a string from s[1] to the end of s. For example, if s  = \u201cdog,\u201d s.substring(1) would be \u201cog.\u201d After the for loop ends, str1 would return the accumulation of all the portions of the strings in list from its first index to the end of the string. As a result, the output for str1 by a call to mystery would be: \u201cogatowird\u201d\n", "wrong_ans_explanation": "In this for loop, s.substring(1) returns a string from s[1] to the end of s. For example, if s  = \u201cdog,\u201d s.substring(1) would be \u201cog.\u201d After the for loop ends, str1 would return the accumulation of all the portions of the strings in list from its first index to the end of the string. As a result, the output for str1 by a call to mystery would be: \u201cogatowird\u201d\n", "question": "Refer to the following data field and method.\n        \n    private ArrayList<String> list;\n\n    public void mystery()\n    {\n        String str1 = \u201c\u201d, str2 = \u201c\u201d;\n        for (String s : list)\n        {\n            str1 += s.substring(1);\n            str2 += s.substring(1, 2);\n        }\n        System.out.println(str1);\n        System.out.println(str2);\n    }\n        \nAssume that the contents of list are \n\n    dog      cat     cow     bird\n\nWhat will be the output for str1 by a call to mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n og\n\n", "\n oaoi\n\n", "\n dccb\n\n", "\n ogatowird                    \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In this for loop, s.substring(1, 2) returns a string from s[1] to s[2-1], which is just s[1]. For example, if s = \u201cdog\u201d, s.substring(1, 2) would be \u201co.\u201d After the for loop ends, str1 would output the characters at the first index of all the strings in list. As a result, the output for str1 by a call to mystery would be: \u201coaoi.\u201d\n", "wrong_ans_explanation": "In this for loop, s.substring(1, 2) returns a string from s[1] to s[2-1], which is just s[1]. For example, if s = \u201cdog\u201d, s.substring(1, 2) would be \u201co.\u201d After the for loop ends, str1 would output the characters at the first index of all the strings in list. As a result, the output for str1 by a call to mystery would be: \u201coaoi.\u201d\n", "question": "Refer to the following data field and method.\n        \n    private ArrayList<String> list;\n\n    public void mystery()\n    {\n        String str = \u201c\u201d, str2 = \u201c\u201d;\n        for (String s : list)\n        {\n            str1 += s.substring(1);\n            str2 += s.substring(1, 2);\n        }\n        System.out.println(str1);\n        System.out.println(str2);\n    }\n        \nAssume that the contents of list are \n\n    dog      cat     cow     bird\n        \nWhat will be the output for str2 by a call to mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n dccb\n\n", "\n oaoi              \n\n", "\n grwr \n\n", "\n docacobi\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Let A = (x && y). Then the expression, \n\n    (x && y) || !(x && y) is equal to A || !A.\n\nSince either A or !A always has to be true, this expression must always evaluate to true.\n", "wrong_ans_explanation": "Let A = (x && y). Then the expression, \n\n    (x && y) || !(x && y) is equal to A || !A.\n\nSince either A or !A always has to be true, this expression must always evaluate to true.\n", "question": "Assume that x and y are Boolean variables and have been properly initialized. \n                \n    (x && y) || !(x && y)\n        \nThe result of evaluating the expression above is best described as\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n always true           \n\n", "\n always false\n\n", "\n true only when x is true and y is true\n\n", "\n true only when x and y have the same value\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires us to keep iterating through the while loop until b = 0. In the first iteration of the while loop, r = 24 % 30 = 24, a = b = 30, and b = r = 24. In the second iteration of the while loop, r = 30 % 24 = 6, a = b = 24, and b = r = 6. Since b is not yet equal to 0, we shall continue iterating through the while loop. In the third iteration, r = 24 % 6 = 0, a = b = 6, and b = r = 0. Since b is now 0, we can print a, which is 6.\n", "wrong_ans_explanation": "This question requires us to keep iterating through the while loop until b = 0. In the first iteration of the while loop, r = 24 % 30 = 24, a = b = 30, and b = r = 24. In the second iteration of the while loop, r = 30 % 24 = 6, a = b = 24, and b = r = 6. Since b is not yet equal to 0, we shall continue iterating through the while loop. In the third iteration, r = 24 % 6 = 0, a = b = 6, and b = r = 0. Since b is now 0, we can print a, which is 6.\n", "question": "Consider the following code segment.             \n        \n    int a = 24;\n    int b = 30;\n    while (b != 0)\n    {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    System.out.println( a );\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 6            \n\n", "\n 12\n\n", "\n 24\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires you to essentially guess and check the choices to obtain the correct answer. After attempting multiple possibilities for a, you will find that a must be 18 for aProperty( a ) to return true. If a = 18, a / 10 = 1 and a % 10 = 8. Therefore, 2 * (a / 10 + a % 10) would be 2 * (1 + 8) = 18, which is a. Therefore, if a = 18, aProperty( a ) would return true. \n", "wrong_ans_explanation": "This question requires you to essentially guess and check the choices to obtain the correct answer. After attempting multiple possibilities for a, you will find that a must be 18 for aProperty( a ) to return true. If a = 18, a / 10 = 1 and a % 10 = 8. Therefore, 2 * (a / 10 + a % 10) would be 2 * (1 + 8) = 18, which is a. Therefore, if a = 18, aProperty( a ) would return true. \n", "question": "The method aProperty is defined as follows:\n        \n    public boolean aProperty( int a )\n    {\n        return a == 2 * (a / 10 + a % 10);\n    }\n        \nFor which of the following values of a does aProperty( a ) return true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2\n\n", "\n 18           \n\n", "\n 128\n\n", "\n 28\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the iteration of value (value++) comes after the printing of value, the first number that will be printed is the initial value of value( no pun intended ). Since value has to be less than 28 in order for it to be printed, the last number that will be printed is 27. \n", "wrong_ans_explanation": "Since the iteration of value (value++) comes after the printing of value, the first number that will be printed is the initial value of value( no pun intended ). Since value has to be less than 28 in order for it to be printed, the last number that will be printed is 27. \n", "question": "Consider the following code segment. \n        \n    int value = 15;\n    while (value < 28)\n    {\n        System.out.println(value);\n        value++;\n    }\n        \nWhat are the first and last numbers output by the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n First: 15       Last: 27            \n\n", "\n First: 15       Last: 28\n\n", "\n First: 16       Last: 27\n\n", "\n First: 16       Last: 28\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since k is a random number from 1 to n, the minimum number of times that Hello will be printed is when k is 1 (at its minimum). If k = 1, then the code inside the for loop will never execute since p <= k for this to occur(p = 2 and k = 1). Since the code inside the for loop will never execute, then Hello will be printed a minimum of 0 times. \n", "wrong_ans_explanation": "Since k is a random number from 1 to n, the minimum number of times that Hello will be printed is when k is 1 (at its minimum). If k = 1, then the code inside the for loop will never execute since p <= k for this to occur(p = 2 and k = 1). Since the code inside the for loop will never execute, then Hello will be printed a minimum of 0 times. \n", "question": "Consider the following code segment. \n                \n    int k = [a random number such that 1 <= k <= n];\n\n    for (int p = 2; p <= k; p++)\n        for (int r = 1; r < k; r++)\n            System.out.println(\u201cHello\u201d);\n        \nWhat is the minimum number of times that Hello will be printed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0          \n\n", "\n 1\n\n", "\n n - 1\n\n", "\n n - 2\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question tests your knowledge of attacking methods that include recursion. Firstly, you must recognize that a call to mystery will keep occurring until x / 10 = 0 (AKA x < 10). Since x / 10 is used as a parameter after every call to mystery, x keeps decreasing (123456 -> 12345 -> 1234 -> 123 -> 12 -> 1). When x = 1, we can finally bypass the if statement and print x % 10. However, since this is recursion, all the calls to mystery are nested within each other, so we must essentially go backwards. We must first find 1 % 10 = 1, then 12 % 10 = 2, then 123 % 10 = 3, and so on. Therefore, after calling mystery(123456), 123456 is printed. \n", "wrong_ans_explanation": "This question tests your knowledge of attacking methods that include recursion. Firstly, you must recognize that a call to mystery will keep occurring until x / 10 = 0 (AKA x < 10). Since x / 10 is used as a parameter after every call to mystery, x keeps decreasing (123456 -> 12345 -> 1234 -> 123 -> 12 -> 1). When x = 1, we can finally bypass the if statement and print x % 10. However, since this is recursion, all the calls to mystery are nested within each other, so we must essentially go backwards. We must first find 1 % 10 = 1, then 12 % 10 = 2, then 123 % 10 = 3, and so on. Therefore, after calling mystery(123456), 123456 is printed. \n", "question": "Consider the following method. \n        \n    // precondition: x >= 0\n\n    public void mystery(int x)\n    {\n        if ((x / 10) != 0)\n        {\n            mystery(x / 10);\n        }\n        System.out.print(x % 10);\n    }\n        \nWhich of the following is printed as a result of the call mystery(123456)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 654321\n\n", "\n 123456        \n\n", "\n 56\n\n", "\n 16\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The maximum number of times that Hello will be printed will occur when k = n (at its maximum). If k = n, then the inner for loop will execute n - 1 times under one iteration of the outer for loop (because r is initially 1 and r < n). The outer for loop will also execute n - 1 times (because p is initially 2 and p <= n). Therefore, since the inner for loop executes n - 1 times under one iteration of the outer for loop and the outer for loop executes n - 1 times, then Hello will be printed a maximum of (n -1)^2 times.\n", "wrong_ans_explanation": "The maximum number of times that Hello will be printed will occur when k = n (at its maximum). If k = n, then the inner for loop will execute n - 1 times under one iteration of the outer for loop (because r is initially 1 and r < n). The outer for loop will also execute n - 1 times (because p is initially 2 and p <= n). Therefore, since the inner for loop executes n - 1 times under one iteration of the outer for loop and the outer for loop executes n - 1 times, then Hello will be printed a maximum of (n -1)^2 times.\n", "question": "Consider the following code segment. \n\n    int k = [a random number such that 1 <= k <= n];\n\n    for (int p = 2; p <= k; p++)\n        for (int r = 1; r < k; r++)\n            System.out.println(\u201cHello\u201d);\n        \nWhat is the maximum number of times that Hello will be printed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n - 1\n\n", "\n n - 2\n\n", "\n (n - 1)^2             \n\n", "\n n^2\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Option I would correctly return the sum of all values in sums because total adds up the values in nums from index 0 to nums.length - 1, which is correct. Option II is incorrect because the for loop begins at index nums.length, which would provide an IndexOutOfBoundsException. Option III is correct because this code is a transmutation from the for loop in Option I to this while loop. Since the while loop iterates from the 0th index to mums.length - 1, it behaves exactly like the for loop in Option I, and therefore is also correct. Option I and Option III are correct.\n        ", "wrong_ans_explanation": "Option I would correctly return the sum of all values in sums because total adds up the values in nums from index 0 to nums.length - 1, which is correct. Option II is incorrect because the for loop begins at index nums.length, which would provide an IndexOutOfBoundsException. Option III is correct because this code is a transmutation from the for loop in Option I to this while loop. Since the while loop iterates from the 0th index to mums.length - 1, it behaves exactly like the for loop in Option I, and therefore is also correct. Option I and Option III are correct.\n        ", "question": "Consider the following instance variable and incomplete method. The method total is intended to return the sum of all values in nums.\n        \n    private int[] nums;\n\n    public int total()\n    {\n        int total = 0;\n        /* missing code */\n        return total;\n    }\n                \nWhich of the code segments shown below can be used to replace /* missing code */ so that total will work as intended?\n                \n      I. for (int pos = 0; pos < nums.length; pos++)\n         {        \n             total += nums[pos];\n         }\n\n     II. for (int pos = nums.length; pos > 0; pos--)\n         {\n             total += nums[pos];\n         }\n\n    III. int pos = 0;\n         while (pos < nums.length)\n         {        \n             total += nums[pos];\n             pos++;\n         }                                 \n                \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n III only\n\n", "\n I and III          \n\n", "\n II and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question requires an understanding of the purpose of the code segment. This code segment is moving the values in oldArray into a double array, newArray. As seen from row++, the values are being added by column (vertically downwards) until it hits the end of the column \u2014 that is, when row % 3 = 0. Then, if the column is filled, col++ and row = 0 is called, which means that the values are now being added in the next column starting from the 0th row. Therefore, newArray would look like this:\n\n    1 4 7\n    2 5 8\n    3 6 9\n\nAs you can see, newArray[0][2] would be 7. \n", "wrong_ans_explanation": "This question requires an understanding of the purpose of the code segment. This code segment is moving the values in oldArray into a double array, newArray. As seen from row++, the values are being added by column (vertically downwards) until it hits the end of the column \u2014 that is, when row % 3 = 0. Then, if the column is filled, col++ and row = 0 is called, which means that the values are now being added in the next column starting from the 0th row. Therefore, newArray would look like this:\n\n    1 4 7\n    2 5 8\n    3 6 9\n\nAs you can see, newArray[0][2] would be 7. \n", "question": "Consider the following code segment.\n        \n    int[] oldArray = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int[][] newArray = new int[3][3];\n    int row = 0;\n    int col = 0;\n    for (int value : oldArray)\n    {        \n        newArray[row][col] = value;\n        row++;\n        if ((row % 3) == 0)\n        {\n            col++;\n            row = 0;\n        }        \n    }\n    System.out.println(newArray[0][2]);\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8\n\n", "\n 4\n\n", "\n 7        \n\n", "\n 3\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "You may need a paper and a pencil for this question. Starting from n = 6, x = 1 + 1 = 2 and y = 2 - 1 = 1. When n = 5, x = 2 + 1 = 3 and y = 3 - 1 = 2. When n = 4, x = 3 + 2 = 5 and y = 5 - 2 = 3. When n = 3, x = 5 + 3 = 8 and y = 8 - 3 = 5. Since n is now 2, the while loop ends and x is 8. \n        ", "wrong_ans_explanation": "You may need a paper and a pencil for this question. Starting from n = 6, x = 1 + 1 = 2 and y = 2 - 1 = 1. When n = 5, x = 2 + 1 = 3 and y = 3 - 1 = 2. When n = 4, x = 3 + 2 = 5 and y = 5 - 2 = 3. When n = 3, x = 5 + 3 = 8 and y = 8 - 3 = 5. Since n is now 2, the while loop ends and x is 8. \n        ", "question": "Consider the following method. \n        \n    public static int mystery(int n)\n    {\n        int x = 1;        \n        int y = 1;\n        while (n > 2)\n        {\n            x = x + y;        \n            y = x - y;\n            n--;        \n        }\n        return x;\n    }\n        \nWhat value is returned as a result of the call mystery(6)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5\n\n", "\n 13\n\n", "\n 8          \n\n", "\n 1        \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If n = 6, as seen in the last question, then n = 6 at // Point A. Furthermore, if n = 2, then at // Point C, x would be equal to 1. Additionally, at // Point C, since the while loop regulates the value of n, n can never be greater than 2 at // Point C. Moreover, since the while loop controls the value of n above 2, the correct answer is:\n        \n    n will always be greater than 2 at // Point B \n        ", "wrong_ans_explanation": "If n = 6, as seen in the last question, then n = 6 at // Point A. Furthermore, if n = 2, then at // Point C, x would be equal to 1. Additionally, at // Point C, since the while loop regulates the value of n, n can never be greater than 2 at // Point C. Moreover, since the while loop controls the value of n above 2, the correct answer is:\n        \n    n will always be greater than 2 at // Point B \n        ", "question": "Consider the following method.\n                        \n    public static int mystery(int n)\n    {\n        int x = 1;        \n        int y = 1;\n        // Point A\n        while (n > 2)\n        {\n            x = x + y;\n            // Point B        \n            y = x - y;\n            n--;        \n        }\n        // Point C\n        return x;\n    }\n        \nWhich of the following is true of the method mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n will always be greater than 2 at // Point B.           \n\n", "\n n will never be greater than 2 at // Point A.\n\n", "\n x will never be 1 at // Point C.\n\n", "\n n will sometimes be greater than 2 at // Point C.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The code segment stated in the question prints all the numbers between 1 and 100 that are divisible by 4. This is the same as printing out every number from 4 to 100 in arithmetic steps of 4. Therefore, the code segment that will produce the same output would be:\n\n    for (int k = 4; k <= 100; k = k + 4)            \n        System.out.println(k);\n", "wrong_ans_explanation": "The code segment stated in the question prints all the numbers between 1 and 100 that are divisible by 4. This is the same as printing out every number from 4 to 100 in arithmetic steps of 4. Therefore, the code segment that will produce the same output would be:\n\n    for (int k = 4; k <= 100; k = k + 4)            \n        System.out.println(k);\n", "question": "Consider the following code segment.\n\n    for (int k = 1; k <= 100; k++)\n        if ((k % 4) == 0)\n            System.out.println(k);\n        \nWhich of the following code segments will produce the same output as the code segment above?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n for (int k = 4; k <= 25; k = 4 * k)\n       System.out.println(k);\n\n", "\n for (int k = 1; k <= 25; k++)\n       System.out.println(k);\n\n", "\n for (int k = 1; k <= 100; k = k + 4)\n       System.out.println(k);\n\n", "\n for (int k = 4; k <= 100; k = k + 4)             \n       System.out.println(k);\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "If the word was \u201ccompiler\u201d and howFar = 3, then word.substring(howFar + 1, word.length()) would be the subsection of word from index 4 to word.length() - 1, or \u201ciler.\u201d Moreover, word.substring(0, howFar) would be the subsection of word from index 0 to howFar - 1, which is \u201ccom.\u201d Therefore, \u201cilercom\u201d is returned.\n", "wrong_ans_explanation": "If the word was \u201ccompiler\u201d and howFar = 3, then word.substring(howFar + 1, word.length()) would be the subsection of word from index 4 to word.length() - 1, or \u201ciler.\u201d Moreover, word.substring(0, howFar) would be the subsection of word from index 0 to howFar - 1, which is \u201ccom.\u201d Therefore, \u201cilercom\u201d is returned.\n", "question": "Consider the following method.\n        \n    public static String scramble(String word, int howFar)\n    {\n        return word.substring(howFar + 1, word.length()) + word.substring(0, howFar);\n    }\n\nWhat value is returned as a result of the call scramble(\u201ccompiler\u201d, 3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201cilercomp\u201d\n\n", "\n \u201cilercom\u201d       \n\n", "\n \u201ccompiler\u201d\n\n", "\n \u201cpilercom\u201d\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question is purely theoretical without any numbers. Every time the for loop iterates, ans is multiplied by n. But how many times does the for loop iterate? This can be answered by looking at the initialization of the for loop. Since it begins at j = 1 and j must be <= k, the for loop iterates k times. Therefore, since ans is multiplied by n a k amount of times, then ans will return n^k.\n", "wrong_ans_explanation": "This question is purely theoretical without any numbers. Every time the for loop iterates, ans is multiplied by n. But how many times does the for loop iterate? This can be answered by looking at the initialization of the for loop. Since it begins at j = 1 and j must be <= k, the for loop iterates k times. Therefore, since ans is multiplied by n a k amount of times, then ans will return n^k.\n", "question": "Consider the following method.\n        \n    public int compute(int n, int k)\n    {        \n        int ans = 1;\n        for(int j = 1; j <= k; j++)\n            ans *= n;\n        return ans;\n    }\n        \nWhich of the following represents the value returned as a result of the call compute(n, k)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n!\n\n", "\n n * k\n\n", "\n 2^k\n\n", "\n n^k        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In the first iteration of the while loop, result = 0 * 10 + 2574 % 10 = 4 and num = 2574 / 10 = 257. In the second iteration of the while loop, result = 4 * 10 + 257 % 10 = 47 and num = 257 / 10 = 25. You can probably see where this is going. This method aims to reverse num. Therefore, 4752 is printed as a result of executing the code segment.\n", "wrong_ans_explanation": "In the first iteration of the while loop, result = 0 * 10 + 2574 % 10 = 4 and num = 2574 / 10 = 257. In the second iteration of the while loop, result = 4 * 10 + 257 % 10 = 47 and num = 257 / 10 = 25. You can probably see where this is going. This method aims to reverse num. Therefore, 4752 is printed as a result of executing the code segment.\n", "question": "Consider the following code segment.\n        \n    int num = 2574;\n    int result = 0;\n    while (num > 0)\n    {\n        result = result * 10 + num % 10;\n        num /= 10;\n    }\n    System.out.println(result);\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 4\n\n", "\n 2574\n\n", "\n 18\n\n", "\n 4752       \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "These types of questions where you have to deduct the purpose of the code segment has a very high likelihood of being on the AP. As you can see in the code segment, the first three lines of code in the while loop swap the values of indices j and k. As seen in the last two lines of code in the while loop, j and k both increase steadily and converge to the middle of the array nums. Therefore, this code swaps the values of the first half of the array with the values of the second half of the array. This is also known as reversing the contents of the array nums.\n", "wrong_ans_explanation": "These types of questions where you have to deduct the purpose of the code segment has a very high likelihood of being on the AP. As you can see in the code segment, the first three lines of code in the while loop swap the values of indices j and k. As seen in the last two lines of code in the while loop, j and k both increase steadily and converge to the middle of the array nums. Therefore, this code swaps the values of the first half of the array with the values of the second half of the array. This is also known as reversing the contents of the array nums.\n", "question": "Consider the following method. \n        \n    public static void arrayMethod(int[] nums)\n    {\n        int j = 0;\n        int k = nums.length -1;\n        while (j < k)\n        {\n            int x = nums[j];\n            nums[j] = nums[k];\n            nums[k] = x;\n            j++;\n            k--;\n        }\n    }\n                \nWhich of the following described what the method arrayMethod() does to the array nums?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The last value in nums is copied to every location in the array.\n\n", "\n The first value in nums is copied to every location in the array.\n\n", "\n The contents of the array nums are reversed.                                   \n\n", "\n The method generates an ArrayIndexOutOfBoundsException.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "To find the number of lines this code segment will produce, you just have to find how many times it takes to divide 50 by 2 to reach 0. 50 / 2 = 25, 25 / 2 = 12, 12 / 2 = 6, 6 / 2 = 3, 3 / 2 = 1, and 1 / 2 = 0. Since this took 6 iterations, 6 lines of output will be produced by this segment.\n", "wrong_ans_explanation": "To find the number of lines this code segment will produce, you just have to find how many times it takes to divide 50 by 2 to reach 0. 50 / 2 = 25, 25 / 2 = 12, 12 / 2 = 6, 6 / 2 = 3, 3 / 2 = 1, and 1 / 2 = 0. Since this took 6 iterations, 6 lines of output will be produced by this segment.\n", "question": "Refer to the following program segment. \n                \n    for (int k = 50; k > 0; k = k / 2)\n        System.out.println(k);\n        \nHow many lines of output will this segment produce?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 50\n\n", "\n 49        \n\n", "\n 7\n\n", "\n 6        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "You can never create an instance of an interface in Java. However, you can create an instance of a class that implements an interface. Additionally, a superclass does not have to implement an interface that is already implemented in a child class. However, this is false and vice versa. If a superclass implements an interface, then the child classes must also implement the interface. Finally, if a class implements an interface, it must implement every method of the interface unless it is an abstract class. Therefore, none of the options are true. \n        ", "wrong_ans_explanation": "You can never create an instance of an interface in Java. However, you can create an instance of a class that implements an interface. Additionally, a superclass does not have to implement an interface that is already implemented in a child class. However, this is false and vice versa. If a superclass implements an interface, then the child classes must also implement the interface. Finally, if a class implements an interface, it must implement every method of the interface unless it is an abstract class. Therefore, none of the options are true. \n        ", "question": "Which of the following statements about a class thisClass that implements an interface is true?\n        \n         I. It is illegal to create an instance of thisClass\n        II. Any superclass of thisClass must also implement that interface\n       III. thisClass must implement every method of the interface\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only           \n\n", "\n II only\n\n", "\n III only\n\n", "\n None            \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The .set(x, y) method for ArrayList<String> replaces the value at index x with the string y. Therefore, option I (someList.set(2, \u201c6\u201d);) will not cause an error to occur. Option II also will not cause an error to occur because although index 4 is out of the bounds, when used in a .add() method, it is perfectly fine. This code in option II will add the word \u201cPat\u201d at the end of the ArrayList. Since the .get(x) method retrieves the value at index x, option III will cause an error to occur because the 4th index does not have a value in someList. Therefore, only option III will cause an error message to appear.\n        ", "wrong_ans_explanation": "The .set(x, y) method for ArrayList<String> replaces the value at index x with the string y. Therefore, option I (someList.set(2, \u201c6\u201d);) will not cause an error to occur. Option II also will not cause an error to occur because although index 4 is out of the bounds, when used in a .add() method, it is perfectly fine. This code in option II will add the word \u201cPat\u201d at the end of the ArrayList. Since the .get(x) method retrieves the value at index x, option III will cause an error to occur because the 4th index does not have a value in someList. Therefore, only option III will cause an error message to appear.\n        ", "question": "Let someList be an ArrayList<String> containing only these elements:\n                        \n    \u201cJoe\u201d, \u201cJudy\u201d, \u201cJack\u201d, \u201cJames\u201d\n        \nWhich of the following statements will cause an error to occur?\n\n      I. someList.set(2, \u201c6\u201d);\n     II. someList.add(4, \u201cPat\u201d);\n    III. String s = someList.get(4);\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only            \n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To change the name of student from Jerry to Joe, you must use the setName(name) method that has already been constructed in the Person class. But do you put student or Person before the setName(name) method to accurately change the name? Since Person is just the object type and student is the actual name of the object (since it has been initialized), the correct statement would be:\n\n    student.setName(\u201cJoe\u201d);\n", "wrong_ans_explanation": "To change the name of student from Jerry to Joe, you must use the setName(name) method that has already been constructed in the Person class. But do you put student or Person before the setName(name) method to accurately change the name? Since Person is just the object type and student is the actual name of the object (since it has been initialized), the correct statement would be:\n\n    student.setName(\u201cJoe\u201d);\n", "question": "Consider the following class declaration.\n        \n    public class Person\n    {\n        private String myName;\n        private int myYearOfBirth;\n\n        public Person(String name, int yearOfBirth)\n        {\n            myName = name;\n            myYearOfBirth = yearOfBirth;\n        }\n\n        public String getName()\n        {\n            return myName;\n        }\n\n        public void setName(String name)\n        {\n            myName = name;\n        }\n\n        // There may be instance variables, constructors, and methods that are not shown.\n    }\n                \nAssume that the following declaration has been made.\n\n    Person student = new Person(\u201cJerry\u201d, 1996);\n\nWhich of the following statements is the most appropriate for changing the name from \u201cJerry\u201d to \u201cJoe\u201d?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n student = new Person(\u201cJoe\u201d, 1996);\n\n", "\n Person.setName(\u201cJoe\u201d);\n\n", "\n student.setName(\u201cJoe\u201d);              \n\n", "\n student.getName(\u201cTom\u201d);\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since this sequentialSearch method is recursive, we need to know when to stop this recursion. One way this recursion ends is if target is found in data and the index is returned. But what if this target value is not found? Then last will keep decreasing and eventually be less than 0. To avoid this IndexOutOfBoundsException, we must place a condition that returns -1 if last is less than 0. It will look like this:\n        \n    if (last < 0)               \n        return -1; \n", "wrong_ans_explanation": "Since this sequentialSearch method is recursive, we need to know when to stop this recursion. One way this recursion ends is if target is found in data and the index is returned. But what if this target value is not found? Then last will keep decreasing and eventually be less than 0. To avoid this IndexOutOfBoundsException, we must place a condition that returns -1 if last is less than 0. It will look like this:\n        \n    if (last < 0)               \n        return -1; \n", "question": "Consider the following instance variable and methods. You may assume that data has been initialized with length > 0. The methods are intended to return the index of an array element equal to target, or -1, if no such element exists.\n        \n    private int[] data;\n\n    public int seqSearch(int target)\n    {\n        return seqSearchHelper(target, data.length - 1);\n    }\n\n    private int seqSearchHelper(int target, int last)\n    {\n        // Line 1\n        if (data[last] == target)\n            return last;\n        else\n            return seqSearchHelper(target, last - 1);\n    }\n        \nWhich of the following should be used to replace // Line 1 in seqSearchHelper so that seqSearch will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n if (last <= 0)      return -1;\n\n", "\n if (last < 0)      return -1;          \n\n", "\n if (last <= 0)      return -1;\n\n", "\n while (last >= 0)                \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Remember: Math.random() * x takes a random value from 0 to x - 1. Since the indices in myList extend from 0 to myList.size() - 1, the expression that would produce a valid random index for myList would be:\n\n    (int)( Math.random() * myList.size() ) \n", "wrong_ans_explanation": "Remember: Math.random() * x takes a random value from 0 to x - 1. Since the indices in myList extend from 0 to myList.size() - 1, the expression that would produce a valid random index for myList would be:\n\n    (int)( Math.random() * myList.size() ) \n", "question": "Assume that myList is an ArrayList that has been correctly constructed and populated with objects. Which of the following expressions produces a valid random index for myList?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n (int)( Math.random() * myList.size() ) - 1\n\n", "\n (int)( Math.random() * myList.size() )               \n\n", "\n (int)( Math.random() * myList.size() ) + 1\n\n", "\n (int)( Math.random() * (myList.size() + 1) )\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "You might need a paper and a pencil for this question. Initially, k = animals.size() - 1 = 5. Then we see if animals.get(5).substring(0, 1).equals(\u201cb\u201d), which is the same thing as saying, does the string at index 5 starts with a \u201cb.\u201d Since baboon starts with a \u201cb,\u201d then we remove it from that position and add it to index 1 (6 - 5). The animal array has now changed to this:\n\n    [\u201cbear\u201d, \u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\nNow k is 4. Since \u201cbaboon\u201d has been removed, the value at index k is \u201ccat,\u201d not \u201ckoala.\u201d Since \u201ccat\u201d does not start with a \u201cb,\u201d we keep moving to k = 3. Since the value at k = 3 is \u201cbass\u201d and \u201cbass\u201d starts with a \u201cb,\u201d then we remove \u201cbass\u201d from the 3rd index. However, since animals.size() - k = 3, then we add \u201cbass\u201d back to its initial position, the 3rd index. Then, at k = 2, since \u201czebra\u201d does not start with a \u201cb,\u201d we do not change the array. At k = 1, since \u201cbaboon\u201d starts with a \u201cb,\u201d we remove this string from its current position and add it to the (6 - 1) 5th index. The array has now changed again to:\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nSince the for loop ends when k = 0, we do not touch the string at index 0. Therefore, the correct contents of animals is as shown above (the same as the initial ArrayList).\n", "wrong_ans_explanation": "You might need a paper and a pencil for this question. Initially, k = animals.size() - 1 = 5. Then we see if animals.get(5).substring(0, 1).equals(\u201cb\u201d), which is the same thing as saying, does the string at index 5 starts with a \u201cb.\u201d Since baboon starts with a \u201cb,\u201d then we remove it from that position and add it to index 1 (6 - 5). The animal array has now changed to this:\n\n    [\u201cbear\u201d, \u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\nNow k is 4. Since \u201cbaboon\u201d has been removed, the value at index k is \u201ccat,\u201d not \u201ckoala.\u201d Since \u201ccat\u201d does not start with a \u201cb,\u201d we keep moving to k = 3. Since the value at k = 3 is \u201cbass\u201d and \u201cbass\u201d starts with a \u201cb,\u201d then we remove \u201cbass\u201d from the 3rd index. However, since animals.size() - k = 3, then we add \u201cbass\u201d back to its initial position, the 3rd index. Then, at k = 2, since \u201czebra\u201d does not start with a \u201cb,\u201d we do not change the array. At k = 1, since \u201cbaboon\u201d starts with a \u201cb,\u201d we remove this string from its current position and add it to the (6 - 1) 5th index. The array has now changed again to:\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nSince the for loop ends when k = 0, we do not touch the string at index 0. Therefore, the correct contents of animals is as shown above (the same as the initial ArrayList).\n", "question": "Consider the following instance variable and method. \n        \n    private List<String> animals;\n\n    public void change()\n    {\n        for (int k = animals.size() - 1; k > 0; k--)\n        {\n            if (animals.get(k).substring(0, 1).equals(\u201cb\u201d))\n            {\n                animals.add(animals.size() - k, animals.remove(k));\n            }        \n        }\n    }\n        \nAssume that animals has been instantiated and initialized with the following contents.\n\n    [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]\n\nWhat will the contents of animals be as a result of calling change?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [\u201cbaboon\u201d, \u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d]\n\n", "\n [\u201cbaboon\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201cbear\u201d, \u201ckoala\u201d]\n\n", "\n [\u201cbear\u201d, \u201czebra\u201d, \u201cbass\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d]             \n\n", "\n [\u201czebra\u201d, \u201ccat\u201d, \u201ckoala\u201d, \u201cbaboon\u201d, \u201cbass\u201d, \u201cbear\u201d]\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This is an example of recursive looping. The doSomething method is executed again and again till the if condition is met. Since the if statement ends when len =1, the doSomething method is executed 4 times. The deepest nesting occurs when s reaches \u201cW\u201d and the outermost nest occurs at \u201cWATC\u201d (s equals the subsection from the 0th index to the (len - 1) index), resulting in the following output : \n        \n    W                 \n    WA\n    WAT\n    WATC\n        ", "wrong_ans_explanation": "This is an example of recursive looping. The doSomething method is executed again and again till the if condition is met. Since the if statement ends when len =1, the doSomething method is executed 4 times. The deepest nesting occurs when s reaches \u201cW\u201d and the outermost nest occurs at \u201cWATC\u201d (s equals the subsection from the 0th index to the (len - 1) index), resulting in the following output : \n        \n    W                 \n    WA\n    WAT\n    WATC\n        ", "question": "Consider the following recursive method.\n\n    public static void doSomething(String str)\n    {\n        int len = str.length();                \n        if (len > 1)\n        {\n            String s = str.substring(0, len - 1);\n            doSomething(s);\n            System.out.println(s);\n        }\n    }\n        \nWhat is printed as a result of the call doSomething(\u201cWATCH\u201d)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n W\n WA\n  WAT\n WATC\n WATCH\n\n", "\n W\n WA\n WAT\n WATC\n\n", "\n WATC\n WAT\n WA\n  W\n\n", "\n WATCH\n WATC\n WAT\n WA\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since the for loop above iterates from 0 to 20 in steps of 2 and prints only if the value % 3 == 1, then only even numbers from 0 to 20 that have a remainder of 1 when divided by 3 will be printed. Therefore, 4, 10, and 16 will be printed.\n        ", "wrong_ans_explanation": "Since the for loop above iterates from 0 to 20 in steps of 2 and prints only if the value % 3 == 1, then only even numbers from 0 to 20 that have a remainder of 1 when divided by 3 will be printed. Therefore, 4, 10, and 16 will be printed.\n        ", "question": "Consider the following code segment.\n        \n    for (int j = 0; j < 20; j = j + 2)\n    {\n        if (j % 3 == 1)\n            System.out.print(j + \u201c \u201c);\n    }\n                \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 6 12 18\n\n", "\n 4 10 16           \n\n", "\n 1 4 7 10 13 16 19\n\n", "\n 0 2 4 6 8 10 12 14 16 18\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The first three additions of A, B, and C simply add these letters in list, respectively. After those three lines of code, this is what list looks like:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cC]\n\nThen, list.set(2, \u201cd\u201d) replaces the current value located in the 2nd index of list with \u201cd.\u201d Now list looks like this:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d]\n\nWhen \u201cE\u201d is added at the second index, everything currently at the second index and after is shifted to the right. In addition with adding \u201cf,\u201d this is what list looks like after executing the code segment:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]        \n        ", "wrong_ans_explanation": "The first three additions of A, B, and C simply add these letters in list, respectively. After those three lines of code, this is what list looks like:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cC]\n\nThen, list.set(2, \u201cd\u201d) replaces the current value located in the 2nd index of list with \u201cd.\u201d Now list looks like this:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d]\n\nWhen \u201cE\u201d is added at the second index, everything currently at the second index and after is shifted to the right. In addition with adding \u201cf,\u201d this is what list looks like after executing the code segment:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]        \n        ", "question": "Consider the following code segment.\n\n    ArrayList<String> list = new ArrayList<String>();\n\n    list.add(\u201cA\u201d);\n    list.add(\u201cB\u201d);        \n    list.add(\u201cC\u201d);\n    list.set(2, \u201cd\u201d);\n    list.add(2, \u201cE\u201d);\n    list.add(\u201cf\u201d);\n                \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]          \n\n", "\n [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d, \u201cE\u201d, \u201cf\u201d] \n\n", "\n [\u201cA\u201d, \u201cE\u201d, \u201cB\u201d, \u201cd\u201d, \u201cf\u201d] \n\n", "\n [\u201cA\u201d, \u201cE\u201d, \u201cd\u201d, \u201cc\u201d, \u201cf\u201d]\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "At first glance, it may seem that this method removes all the zeroes from the ArrayList. However, let us start from j = 0. Inside the while loop, since the value at the 0th index is 0, then this value is removed from the ArryaList vals. Then Vals will look like this:\n\n    [0, 4, 2, 5, 0, 3, 0]\n\nNow we look at j = 1. Since the value at j = 1 is 4, the zero before four is essentially skipped. As a result of attempting to change the same array using the remove method, one zero gets neglected and you are left with:\n        \n    [0, 4, 2, 5, 3]\n        ", "wrong_ans_explanation": "At first glance, it may seem that this method removes all the zeroes from the ArrayList. However, let us start from j = 0. Inside the while loop, since the value at the 0th index is 0, then this value is removed from the ArryaList vals. Then Vals will look like this:\n\n    [0, 4, 2, 5, 0, 3, 0]\n\nNow we look at j = 1. Since the value at j = 1 is 4, the zero before four is essentially skipped. As a result of attempting to change the same array using the remove method, one zero gets neglected and you are left with:\n        \n    [0, 4, 2, 5, 3]\n        ", "question": "Consider the following instance variable and method.         \n                        \n    private ArrayList<Integer> vals;\n\n    // Precondition: vals.size > 0\n\n    public void whatToDo()\n    {        \n        int j = 0;\n        Integer zero = new Integer(0);\n\n        while (j < vals.size())\n        {\n            if (vals.get(j).equals(zero))\n                vals.remove(j);\n            j++;\n        }\n    }\n                \nAssume that ArrayList vals initially contains the following Integer values.\n\n    [0, 0, 4, 2, 5, 0, 3, 0]\n\nWhat will the ArrayList vals contain as a result of executing whatToDo?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [3, 5, 2, 4, 0, 0, 0, 0]\n\n", "\n [0, 0, 4, 2, 5, 0, 3, 0]\n\n", "\n [4, 2, 5, 3]\n\n", "\n [0, 4, 2, 5, 3]                  \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since each bus has a fixed amount of doors, an absence or presence of air conditioning, and an average number of miles per gallon, only one class is needed. Although these numbers are variable, they are fixed for each bus, so the most efficient design would be to declare each of these variables as data fields, where the number of doors is an int, the presence of air conditioning is a boolean, and the amount of average miles per gallon is a double. \n", "wrong_ans_explanation": "Since each bus has a fixed amount of doors, an absence or presence of air conditioning, and an average number of miles per gallon, only one class is needed. Although these numbers are variable, they are fixed for each bus, so the most efficient design would be to declare each of these variables as data fields, where the number of doors is an int, the presence of air conditioning is a boolean, and the amount of average miles per gallon is a double. \n", "question": "A bus dealership needs a program to store information about the buses for sale. For each bus, they want to keep track of the following information: number of doors, whether the bus has air conditioning, and its average number of miles per gallon. Which of the following is the best design?\n                \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Use a class Bus which has three subclasses: Doors, AirConditioning, and MilesPerGallon.\n\n\n", "\n Use a class Bus, which has a subclass Doors, with a subclass AirConditioning, with a subclass MilesPerGallon.\n\n\n", "\n Use three classes: Doors, AirConditioning, and MilesPerGallon, each with a subclass Bus.\n\n\n", "\n Use one class Bus, which has three data fields: int numDoors, boolean hasAir, and double milesPerGallon.   \n\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "When adding minutes to m, the number of minutes can often exceed 60, which would result in us needing to distribute this time across hours and minutes. Therefore, to accurately calculate the number of hours, we must add minutes / 60 to the current amount hours. To calculate the remaining amount of minutes, we must do minutes % 60. As a result, the correct lines of code would be:\n\n    hours = hours + minutes / 60;         \n    minutes = minutes % 60;\n        ", "wrong_ans_explanation": "When adding minutes to m, the number of minutes can often exceed 60, which would result in us needing to distribute this time across hours and minutes. Therefore, to accurately calculate the number of hours, we must add minutes / 60 to the current amount hours. To calculate the remaining amount of minutes, we must do minutes % 60. As a result, the correct lines of code would be:\n\n    hours = hours + minutes / 60;         \n    minutes = minutes % 60;\n        ", "question": "Refer to the following incomplete class declaration. \n        \n    public class TimeKeeper\n    {\n        private int hours;\n        private int minutes; // 0 <= minutes < 60\n\n        public TimeKeeper(int h, int m)\n        {\n            hours = h;\n            minutes = m;\n        }\n\n        // return the number of hours\n        public int getHours()\n        {  /* implementation not shown */  }\n\n        // return the number of minutes                \n        // Postcondition: 0 <= minutes < 60\n        public int getMinutes()\n        {  /* implementation not shown */  }\n\n        // Adds h hours and m minutes to this TimeRecord.\n        // param h the number of hours\n        // Precondition: h >= 0 \n        // param m the number of minutes\n        // Precondition: m >= 0\n        public void  update(int h, int m)\n        {\n            hours = hours + h;        \n            minutes = minutes + m;\n            /* missing code */\n        }\n\n        // \u2026 other methods not shown\n    }\n                \nWhich of the following can be used to replace /* missing code */ so that update will correctly update the time?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n minutes = minutes + hours % 60;\n\n", "\n hours = hours + minutes / 60;\n\n", "\n hours = hours + minutes / 60;         \n   minutes = minutes % 60;\n\n", "\n hours = hours + minutes % 60;\n   minutes = minutes / 60;\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To compute the total of all times stored in time, we must use the update method to quite literally update the total time for each iteration of the for loop. Since the parameters for the update method are h and m, we must use the accessor methods for hours and minutes. Therefore, the correct expression for the missing expression would be:\n        \n    total.update(time[j].getHours(), time[j].getMinutes())\n        ", "wrong_ans_explanation": "To compute the total of all times stored in time, we must use the update method to quite literally update the total time for each iteration of the for loop. Since the parameters for the update method are h and m, we must use the accessor methods for hours and minutes. Therefore, the correct expression for the missing expression would be:\n        \n    total.update(time[j].getHours(), time[j].getMinutes())\n        ", "question": "Refer to the following incomplete class declaration. \n        \n    public class TimeKeeper\n    {\n        private int hours;\n        private int minutes; // 0 <= minutes < 60\n\n        public TimeKeeper(int h, int m)\n        {\n            hours = h;\n            minutes = m;\n        }\n\n        // return the number of hours\n        public int getHours()\n        {  /* implementation not shown */  }\n\n        // return the number of minutes                \n        // Postcondition: 0 <= minutes < 60\n        public int getMinutes()\n        {  /* implementation not shown */  }\n\n        // Adds h hours and m minutes to this TimeRecord.\n        // param h the number of hours\n        // Precondition: h >= 0 \n        // param m the number of minutes\n        // Precondition: m >= 0\n        public void  update(int h, int m)\n        {\n            hours = hours + h;        \n            minutes = minutes + m;\n            /* missing code */\n        }\n\n        // \u2026 other methods not shown\n    }\n        \nConsider the following declaration that appears in a client program.\n\n    TimeKeeper[] time = new TimeKeeper[100];\n\nAssume that time has been initialized with TimeKeeper objects. Consider the following code segment that is intended to compute the total of all the times stored in time.\n\n    TimeKeeper total = new TimeKeeper(0, 0);\n\n    for (int j = 0; j < time.length; j++)\n    {\n        /* missing expression */\n    }\n\nWhich of the following can be used to replace /* missing expression */ so that the code segment will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n total += time[j].update()\n\n", "\n total.update(time[j].hours, time[j].minutes)\n\n", "\n total.update(time[j].getHours(), time[j].getMinutes())         \n\n", "\n time[j].update(time[j].getHours(), time[j].getMinutes())\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "For the first print statement, 4 will be printed first (since 1234 % 10 = 4). Since x / 10 != 0, mystery(123) has been called, which results in 3 being printed next (since 123 % 10). This will keep occurring until x = 1. When reaches the conditional statement, 4321 will have already been printed. Since x / 10 is now 0, we find ourselves nested within many mystery methods. To get out of each nesting, we must finish the method, which is printing x % 10. The innermost nest is x = 1, so 1 % 10 = 1. Since the outermost nest is 1234 (because this was the original number), the final print statement will be 4 (1234 % 10). Therefore, as a result of calling mystery(1234), this will be printed:   \n\n    43211234\n        ", "wrong_ans_explanation": "For the first print statement, 4 will be printed first (since 1234 % 10 = 4). Since x / 10 != 0, mystery(123) has been called, which results in 3 being printed next (since 123 % 10). This will keep occurring until x = 1. When reaches the conditional statement, 4321 will have already been printed. Since x / 10 is now 0, we find ourselves nested within many mystery methods. To get out of each nesting, we must finish the method, which is printing x % 10. The innermost nest is x = 1, so 1 % 10 = 1. Since the outermost nest is 1234 (because this was the original number), the final print statement will be 4 (1234 % 10). Therefore, as a result of calling mystery(1234), this will be printed:   \n\n    43211234\n        ", "question": "Consider the following method.\n         \n    // param x >= 0\n    public void mystery(int x)\n    {        \n        System.out.print(x % 10);\n\n        if ((x / 10) != 0)\n            mystery(x / 10);\n\n        System.out.print(x % 10);\n    }\n        \nWhich of the following is printed as a result of the call mystery(1234)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 43211234                   \n\n", "\n 12344321\n\n", "\n 3443\n\n", "\n 1441\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since j begins from myThings.length - 1 towards 0, we know that this for loop begins at the end of the array. Additionally, we know that the conditional if statement states that if the value at index j is less than a, then stop and return j. This means that everything after index j has already been checked and is greater than or equal to a. Therefore, since z stores the value of a, all values in positions z + 1 through myThings.length are greater the or equal to a.\n        ", "wrong_ans_explanation": "Since j begins from myThings.length - 1 towards 0, we know that this for loop begins at the end of the array. Additionally, we know that the conditional if statement states that if the value at index j is less than a, then stop and return j. This means that everything after index j has already been checked and is greater than or equal to a. Therefore, since z stores the value of a, all values in positions z + 1 through myThings.length are greater the or equal to a.\n        ", "question": "Consider the following instance variable and method.\n        \n    private int[] myThings;\n\n    //Precondition: myThings contains int values in no particular order\n\n    public int mystery(int num)        \n    {\n        for (int j = myThings.length - 1; j >= 0; j--)\n        {\n            if (myThings[j] < num)\n                return j;\n        }\n        return -1;\n    }\n                \nWhich of the following best describes the contents of myThings after the following statement has been executed?\n\n    int z = mystery( a );\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n All values in positions z + 1 through myThings.length are less than a.\n\n", "\n All values in positions z + 1 through myThings.length are greater than or equal to a.     \n\n\n", "\n All values in position 0 through z are less than a.\n\n", "\n The largest value that is smaller than a is at position z.\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since fido is an underdog, we must go to the act() method in the Underdog class. This method first asks us to execute super.act(), which means we must revert back to the parent class .act() method. This method first prints \u201crun,\u201d then calls the eat() method. Remember: Fido is an underdog, so we are actually calling the Underdog\u2019s eat() method. In this eat() method, super.eat() is called, so we must print \u201ceat,\u201d as stated in the Dog\u2019s eat() method. Then, we go back to Underdog\u2019s eat() method and print \u201cbark.\u201d After this, we go back to finish executing the Underdog\u2019s act() method, and print \u201csleep.\u201d Altogether, as a result of calling fido.act(), this is printed:\n\n    run eat bark sleep\n                ", "wrong_ans_explanation": "Since fido is an underdog, we must go to the act() method in the Underdog class. This method first asks us to execute super.act(), which means we must revert back to the parent class .act() method. This method first prints \u201crun,\u201d then calls the eat() method. Remember: Fido is an underdog, so we are actually calling the Underdog\u2019s eat() method. In this eat() method, super.eat() is called, so we must print \u201ceat,\u201d as stated in the Dog\u2019s eat() method. Then, we go back to Underdog\u2019s eat() method and print \u201cbark.\u201d After this, we go back to finish executing the Underdog\u2019s act() method, and print \u201csleep.\u201d Altogether, as a result of calling fido.act(), this is printed:\n\n    run eat bark sleep\n                ", "question": "Consider the following two classes.\n                         \n    public class Dog\n    {\n        public void act()\n        {\n            System.out.print(\u201crun\u201d);\n            eat();\n        }\n\n        public void eat()\n        {\n            System.out.print(\u201ceat\u201d);\n        }\n    }\n\n    public class UnderDog extends Dog\n    {\n        public void act()\n        {\n            super.act();\n            System.out.print(\u201csleep\u201d);\n        }        \n\n        public void eat()\n        {\n            super.eat();\n            System.out.print(\u201cbark\u201d);\n        }\n    }\n                \nAssume that the following declaration appears in a client program. \n\n    Dog fido = new Underdog();\n\nWhat is printed as a result of the call fido.act()?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n run eat \n\n", "\n run eat sleep\n\n", "\n run eat bark sleep        \n\n", "\n run eat sleep bark\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "When dealing with recursive methods, it is easier and less time-consuming to find a pattern to the method. Since 3 is multiplied to the answer every time n is not 0, we just have to calculate how many times the method recurs until n is 0. Since n is subtracted by 1 every time n does not equal 0, the recursive method occurs 5 times. Therefore, 3 is multiplied by 1 (when n = 0, 1 is returned) 5 times. 3^5 = 243. As a result, 243 is returned.\n        ", "wrong_ans_explanation": "When dealing with recursive methods, it is easier and less time-consuming to find a pattern to the method. Since 3 is multiplied to the answer every time n is not 0, we just have to calculate how many times the method recurs until n is 0. Since n is subtracted by 1 every time n does not equal 0, the recursive method occurs 5 times. Therefore, 3 is multiplied by 1 (when n = 0, 1 is returned) 5 times. 3^5 = 243. As a result, 243 is returned.\n        ", "question": "Consider the following recursive method. \n        \n    public static int mystery(int n)\n    {\n        if (n == 0)\n            return 1;\n        else\n            return 3 * mystery(n - 1);\n    }\n                \nWhat value is returned as a result of the call mystery(5)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3 \n\n", "\n 81\n\n", "\n 243         \n\n", "\n 6561\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The AP loves asking questions like these which tests your knowledge about the purpose of a code segment given to you. In this method, the for loop iterates throughout the entire array and if a value in the array is greater than the value of loc, then this value becomes loc. Therefore, by the time the for loop iterates throughout the entire array, loc would have stored the index of the largest value in array vals. That is the postcondition of of the check() method. \n                ", "wrong_ans_explanation": "The AP loves asking questions like these which tests your knowledge about the purpose of a code segment given to you. In this method, the for loop iterates throughout the entire array and if a value in the array is greater than the value of loc, then this value becomes loc. Therefore, by the time the for loop iterates throughout the entire array, loc would have stored the index of the largest value in array vals. That is the postcondition of of the check() method. \n                ", "question": "Consider the following instance variable and method.\n        \n    private int[] vals;\n\n    // Precondition: vals.length > 0\n    public int check()\n    {        \n        int loc = vals.length / 2;\n\n        for (int j = 0; j < vals.length; j++)\n        {        \n            if (vals[j] > vals[loc];\n                loc = j;\n        }\n        return loc;\n    }\n                \nWhich of the following is the best postcondition for check?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n returns the index of the last element in array vals whose value is greater than vals[loc]\n\n\n", "\n returns the index of the first element in array vals whose value is greater than vals[loc]\n\n\n", "\n returns the index of the largest value in the second half of array vals\n\n", "\n returns the index of the largest value in array vals           \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since y and z are local variables and there is no return statement, these changes to y and z do not alter s and k. Therefore, the new y and z values are not passed on to s and k. The values of s and k remain \u201cworld\u201d and 6, respectively.\n", "wrong_ans_explanation": "Since y and z are local variables and there is no return statement, these changes to y and z do not alter s and k. Therefore, the new y and z values are not passed on to s and k. The values of s and k remain \u201cworld\u201d and 6, respectively.\n", "question": "Assume the the following declarations have been made.\n        \n    private String s;\n    private int k;\n\n    public void change( String y, int z)\n    {\n        y = y + \u201cpeace\u201d;\n        z = z * 2;\n    }\n                \nAssume s has the value \u201cworld\u201d and k is 6. What are the values of s and k after the call change(s, k)?\n\n    s                   k\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n world           6         \n\n", "\n worldpeace           6\n\n", "\n world           12\n\n", "\n worldpeace           12\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Pay attention to the words -- only if -- in the question. You need to evluate all the choices to see which choice is correct. Among all the choices, only the boolean expression !X || !Y || !Z does evaluate to true when ONLY IF X, Y, and Z, are all false. \n", "wrong_ans_explanation": "Pay attention to the words -- only if -- in the question. You need to evluate all the choices to see which choice is correct. Among all the choices, only the boolean expression !X || !Y || !Z does evaluate to true when ONLY IF X, Y, and Z, are all false. \n", "question": "Which of the following will evaluate to true ONLY IF boolean expressions X, Y, and Z are all false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n !(X && Y && Z)\n\n", "\n !(X || Y || Z)             \n\n", "\n !X || !Y || !Z\n\n", "\n !X && !(Y && !Z)\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Method overriding, in object-oriented programming, is a language feature that allows a subclass to provide a specific implementation of a method that is already provided by one of its parent classes. This is apparent in the question because method1() in Class1 and Class2 both have the same names, return types, and signatures while having different implementations. Remember: Method overriding occurs in a child and parent class while method overloading usually occurs in one class. Since method1() is seen in different classes, method overriding is being used. \n", "wrong_ans_explanation": "Method overriding, in object-oriented programming, is a language feature that allows a subclass to provide a specific implementation of a method that is already provided by one of its parent classes. This is apparent in the question because method1() in Class1 and Class2 both have the same names, return types, and signatures while having different implementations. Remember: Method overriding occurs in a child and parent class while method overloading usually occurs in one class. Since method1() is seen in different classes, method overriding is being used. \n", "question": "Refer to the classes below.\n\n    public class Class1\n    {\n        // default constructor not shown \u2026\n\n        public void method1()\n        { /* implementation of method1 */ }\n    }\n\n    public class Class2 extends Class1\n    {\n        // default constructor not shown \u2026\n\n        public void method1()\n        { /* different implementation from method1 in Class1 */ }\n\n        public void method2()\n        { /* implementation of method2 */ }\n    }\n\nThe method1 in Class2 is an example of \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n method overloading     \n\n", "\n polymorphism \n\n", "\n method overriding    \n\n", "\n information hiding\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Option II would not give an error because method2() is a function within Class2 and b is an instance of Class2. Option III would not give an error because although a is not an instance of Class 2, it is cast to Class2 accurately, and therefore it can call method2() without error. However, option I does cause an error because a is an instance of Class1, and therefore cannot call method2(). Altogether, only option I causes an error message to appear.  \n", "wrong_ans_explanation": "Option II would not give an error because method2() is a function within Class2 and b is an instance of Class2. Option III would not give an error because although a is not an instance of Class 2, it is cast to Class2 accurately, and therefore it can call method2() without error. However, option I does cause an error because a is an instance of Class1, and therefore cannot call method2(). Altogether, only option I causes an error message to appear.  \n", "question": "Refer to the classes below.\n\n    public class Class1\n    {\n        // default constructor not shown \u2026\n\n        public void method1()\n        { /* implementation of method1 */ }\n    }\n\n    public class Class2 extends Class1\n    {\n        // default constructor not shown \u2026\n\n        public void method1()\n        { /* different implementation from method1 in Class1 */ }\n\n        public void method2()\n        { /* implementation of method2 */ }\n    }\n\t\nConsider the following declarations in a client class.\n\n    Class1 a = new Class1();\n    Class2 b = new Class2();\n\nWhich of the following method calls will cause an error?\n\n      I. a.method2();\t\n     II. b.method2();\t\n    III. ( (Class2) a ).method2();\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only      \n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "An abstract class could have abstract and non-abstract methods, but is not required to have abstract methods. Additionally, abstract classes can have constructors and static methods, but is not required to have them. Moreover, abstract classes CANNOT be instantiated, but they can be subclassed. Therefore, a client program that uses Class1 must have another class that is a subclass of Class1. \n", "wrong_ans_explanation": "An abstract class could have abstract and non-abstract methods, but is not required to have abstract methods. Additionally, abstract classes can have constructors and static methods, but is not required to have them. Moreover, abstract classes CANNOT be instantiated, but they can be subclassed. Therefore, a client program that uses Class1 must have another class that is a subclass of Class1. \n", "question": "Consider the following class declaration.        \n\n    public abstract class Class1\n    {\n        private int a;\n        private int b;\n\n        // methods of the class \u2026\n    }\n\nWhich is true about Class1?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n In a client program, more than one instance of Class1 can be created.\n\n", "\n Class1 must have a constructor with two parameters in order to initialize a and b.\n\n", "\n A client program that uses Class1 must have another class that is a subclass of Class1.      \n\n", "\n At least one method of Class1 must be abstract.\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Overloading occurs when two or more methods in one class have the same method name but different parameters. The names of the parameters do not matter; however, the number and types of parameters do matter when considering to overload two methods within the same class. Therefore, the statement that \u201cTwo overloaded methods in the same class must have parameters with different names.\u201d is false.  \n", "wrong_ans_explanation": "Overloading occurs when two or more methods in one class have the same method name but different parameters. The names of the parameters do not matter; however, the number and types of parameters do matter when considering to overload two methods within the same class. Therefore, the statement that \u201cTwo overloaded methods in the same class must have parameters with different names.\u201d is false.  \n", "question": "Which statement about parameters is false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The scope of parameters is the method in which they are defined.\n\n", "\n Static methods have no implicit parameter this.\n\n", "\n Two overloaded methods in the same class must have parameters with different names.\n\n\n", "\n All parameters in Java are passed by value.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "To find the best candidate for being a static method, you must locate the method that will remain constant throughout the entire life of the Frog object. Since swim is an action determined by the code and could occur variably, it is not a good candidate. The eat method is also variable since the Frog does not constantly eat or not eat. Since the frog does not constantly die, the die method would also be unsuitable for the static method. However, the getPondTemp method is the best candidate for being a static method because it will likely be constant from the Frog\u2019s birth to death.\n", "wrong_ans_explanation": "To find the best candidate for being a static method, you must locate the method that will remain constant throughout the entire life of the Frog object. Since swim is an action determined by the code and could occur variably, it is not a good candidate. The eat method is also variable since the Frog does not constantly eat or not eat. Since the frog does not constantly die, the die method would also be unsuitable for the static method. However, the getPondTemp method is the best candidate for being a static method because it will likely be constant from the Frog\u2019s birth to death.\n", "question": "Here are the private instance variables for a Frog object:\n\n    public class Frog\n    {\n        private String species;\n        private int age;\n        private double weight;\n        private Position pos;\t//position (x, y) in pond\n        private boolean alive;\n            \u2026\n\nWhich of the following methods in the Frog class is the best candidate for being a static method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n swim //frog swims to new position in pond\n\n", "\n getPondTemp //return temperature of pond\n\n", "\n eat //frog eats and gains weight\n\n", "\n die //frog dies with some probability based on frog\u2019s age and pond temperature\n\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Although it may seem that the strange method changes a and b, it does not. Since x and y are local variables, an alteration of x and y does not necessarily change a and b unless it is explicitly changed. Since there is no explicit alteration of a and b, a and b remain 6 and 3, respectively. As for x and y, these variables still change because it is explicitly stated in the strange method. Therefore, the correct output would be:\n\n\t9 27       \n\t6 3\n", "wrong_ans_explanation": "Although it may seem that the strange method changes a and b, it does not. Since x and y are local variables, an alteration of x and y does not necessarily change a and b unless it is explicitly changed. Since there is no explicit alteration of a and b, a and b remain 6 and 3, respectively. As for x and y, these variables still change because it is explicitly stated in the strange method. Therefore, the correct output would be:\n\n\t9 27       \n\t6 3\n", "question": "What output will be produced by this program?\n\n    public class Mystery\n    {\n        public static void strange(int x, int y)\n        {\n            x += y;\n            y *= x;\n            System.out.println(x + \u201c \u201c + y);\n        }\n\n        public static void main(String[] args)\n        {\n            int a = 6, b = 3;\n            strange( a, b );\n            System.out.println( a + \u201c \u201c + b );\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 9 27\n 6 3\n\n", "\n 9 27\n 9 27\n\n", "\n 6 3\n 9 27\n\n", "\n 3 6\n 9\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: Variables initialized within a method only have the scope of that method. Since the main method only recognizes the count initialized within the main method, it will print that variable. The count variable in the main method is not altered by the something method, so 0 will be printed 3 times. \n", "wrong_ans_explanation": "Remember: Variables initialized within a method only have the scope of that method. Since the main method only recognizes the count initialized within the main method, it will print that variable. The count variable in the main method is not altered by the something method, so 0 will be printed 3 times. \n", "question": "Consider this program.\n\n    public class Count\n    {\n        public static void something()\n        {\n            int count = 0;\n                \u2026\n            //code to do something - no screen output produced\n        }\n\n        public static void main(String[] args)\n        {\n            int count = 0;\n            System.out.println(\u201cHow many iterations?\u201d);\n            int n = IO.readInt();\t\t//read user input\n            for (int j = 1; j <= n; j++)\n            {\n                something();\n                System.out.println(count);\n            }\n        }\n    }\n\nIf the input value for n is 3, what screen output will this program subsequently produce?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n3\n3\n3\n\n", "\n1\n2\n3\n\n", "\n0\n0\n0\n\n", "\nNo output will be produced.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Static methods are created with the aim to be shared among all Objects created from the same class. Therefore, x, y, and a will share the same value whenever the static method something is called. When something(y) is called, x becomes 8. Because of the static property, x, y, and a all become 8. After something(x) is called, a becomes 9, and so do y and a. As a result, the values of x, y, and a are 9, 9, and 9.\n", "wrong_ans_explanation": "Static methods are created with the aim to be shared among all Objects created from the same class. Therefore, x, y, and a will share the same value whenever the static method something is called. When something(y) is called, x becomes 8. Because of the static property, x, y, and a all become 8. After something(x) is called, a becomes 9, and so do y and a. As a result, the values of x, y, and a are 9, 9, and 9.\n", "question": "This question refers to the following class.\n\n    public class Object\n    {\n        private int num;\n\n        public Object() \t\t//default constructor\n        { num = 0; }\n\n        public Object(int n)\t\t//constructor\n        { num = n; }\n\n        public void increment()\t//increment by 1\n        { num++; }\n    }\n\nHere is a client program that uses this class.\n\n    public class ObjectTest\n    {\n        public static Object something(Object obj)\n        {\n            Object o = obj;\n            o.increment();\n            return o;\n        }\n\n        public static void main(String[] args)\n        {\n            Object x = new Object(2);\n            Object y = new Object(7);\n            Object a = y;\n            x = something(y);\n            a = something(x);\n        }\n    }\n\n    Just before exiting this program, what are the object values of x, y, and a, respectively?\t\n\n    ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2, 9, 9\n\n", "\n 9, 9, 9        \n\n", "\n 2, 8, 9\n\n", "\n 7, 8, 9\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since a, b, and temp are local variables and nothing is returned within the something method, this method has no effect on the values x and y. Therefore, x remains 6, y remains 8, and temp is undefined (because it is unknown out of its local scope).\n", "wrong_ans_explanation": "Since a, b, and temp are local variables and nothing is returned within the something method, this method has no effect on the values x and y. Therefore, x remains 6, y remains 8, and temp is undefined (because it is unknown out of its local scope).\n", "question": "Consider the following program.\n\n    public class Test\n    {\n        public void something( int a, int b )\n        {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n    }\n\n\n    public class TestMain\n    {\n        public static void main(String[] args)\n        {\n            int x = 6, y = 8;\n            Test test = new Test();\n            Test.something(x, y);\n        }\n    }\n\nJust before the end of execution of this program, what are the values of x, y, and temp, respectively?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8, 6, 6\n\n", "\n 6, 8, ?, where ? means undefined              \n\n", "\n 8, 6, ?, where ? means undefined\n\n", "\n 8, 6, 8\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since constructors are not technically members of classes, they are not inherited by subclasses. Therefore, HighSchoolStudent does not inherit the constructors of Student and option I is false. Since the HighSchoolStudent is not restricted by Student, it can obviously add new methods and private instance variables. As such, option II is true. Additionally, since overriding always occurs between methods of a subclass and parent class, HighSchoolStudent can override existing methods of Student. Therefore, option II and III are true. \n", "wrong_ans_explanation": "Since constructors are not technically members of classes, they are not inherited by subclasses. Therefore, HighSchoolStudent does not inherit the constructors of Student and option I is false. Since the HighSchoolStudent is not restricted by Student, it can obviously add new methods and private instance variables. As such, option II is true. Additionally, since overriding always occurs between methods of a subclass and parent class, HighSchoolStudent can override existing methods of Student. Therefore, option II and III are true. \n", "question": "Consider these class declarations.\n\n    public class Student\n    {\n        \u2026\n    }\n\n    public class HighSchoolStudent extends Student\n    {\n        \u2026\n    }\n\nWhich is a true statement?\n\n      I. HighSchoolStudent inherits the constructors of Student.\n     II. HighSchoolStudent can add new methods and private instance variables.\n    III. HighSchoolStudent can override existing methods of Student.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only          \n\n", "\n III only\n\n", "\n II and III only  \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Differences to remember between interfaces and abstract classes:\n\n\t1. Interfaces can only contain abstract methods. Abstract classes can have abstract and non-abstract methods.\n\t2. Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.\n\t3. An abstract class can provide the implementation of an interface. However, an interface can\u2019t provide the implementation of an abstract class.\n\t4. Methods of a Java interface are public by default. A Java abstract class can have private methods as well as public methods.\n\nTherefore, the statement that \u201cAll of the methods in both an abstract class and an interface are public.\u201d is false.", "wrong_ans_explanation": "Differences to remember between interfaces and abstract classes:\n\n\t1. Interfaces can only contain abstract methods. Abstract classes can have abstract and non-abstract methods.\n\t2. Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.\n\t3. An abstract class can provide the implementation of an interface. However, an interface can\u2019t provide the implementation of an abstract class.\n\t4. Methods of a Java interface are public by default. A Java abstract class can have private methods as well as public methods.\n\nTherefore, the statement that \u201cAll of the methods in both an abstract class and an interface are public.\u201d is false.", "question": "Which statement about abstract classes and interfaces is false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\nAn interface cannot implement any non-default instance methods, whereas an abstract class can.\n\n\n", "\nA class may implement many interfaces but can have only one superclass.\n\n", "\nAn unlimited number of unrelated classes can implement the same interface.\n\n", "\nAll of the methods in both an abstract class and an interface are public.        \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The intent of the teacher/programmer is to output (C. Average score). However, since else is not used, each of the if statements will be executed and two lines will be printed. The first is printed when the program passes the if (score >= 70.0) test, the second when it passes the if (score >= 60.0) test. \nThe programmer can avoid this either by using a sequence of else if tests, thus excluding all other tests when one is found to be true, or by returning the appropriate string (with a return statement) as soon as a test is true.\n", "wrong_ans_explanation": "The intent of the teacher/programmer is to output (C. Average score). However, since else is not used, each of the if statements will be executed and two lines will be printed. The first is printed when the program passes the if (score >= 70.0) test, the second when it passes the if (score >= 60.0) test. \nThe programmer can avoid this either by using a sequence of else if tests, thus excluding all other tests when one is found to be true, or by returning the appropriate string (with a return statement) as soon as a test is true.\n", "question": "The intent of a class teacher is to print a student's test score as a letter grade. Test score can be any real number between 0 and 100.\n\n    public class TestReport\n    {\n        private double score;\n\n        //Constructor. Sets score to the specified value.\n        public TestReport(double value)\n        { score = value; }\n\n        //Prints grade and comment.\n        public void printGrade()\n        {\n            if (score >= 90.0)\n                System.out.println(\"A. Congratulations!\");\n            if (score >= 80.0)\n                System.out.println(\"B. Good job.\");\n            if (score >= 70.0)\n                System.out.println(\"C. Average score.\");\n            if (score >= 60.0)\n                System.out.println(\"D. Barely passing.\");\n            if (score < 60.0)\n                System.out.println(\"F. Failing score.\");\n        }\n    }\n\nConsider the following segment of a client program.\n\n    double testScore = IO.readInput();    //read user input\n    TestReport t = new TestReport(testScore);\n    t.printGrade();\n\nIf the user inputs a test score of 75.0, what will be output?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n C. Average score.\n D. Barely passing.\n F. Failing score. \n", "\n C. Average score. \n  D. Barely passing.\n", "\n C. Average score.\n", "\n A. Congratulations!\n B. Good job.\n C. Average score.\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Notice that 93 \u00f7 16 = 5 remainder 13. So\n\n        93 = 5(16)1 + 13(16)0\n        5Dhex\n", "wrong_ans_explanation": "Notice that 93 \u00f7 16 = 5 remainder 13. So\n\n        93 = 5(16)1 + 13(16)0\n        5Dhex\n", "question": "Suppose the characters 0, 1, ... , 8, 9, A, B, C, D, E, F are used to represent a hexadecimal (base-16) number. Here A = 10, B = 11,..., F = 15. Which of the following hexadecimal numbers represents the base-10 integer 93?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 53\n\n", "\n D3\n\n", "\n 5D\n\n", "\n F3\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Statement I is incorrect because when a and b are both false, the expression !a && !b is equivalent to T && T, which is true. Statements II and III are correct because T && F and F && T both evaluate to false.\n", "wrong_ans_explanation": "Statement I is incorrect because when a and b are both false, the expression !a && !b is equivalent to T && T, which is true. Statements II and III are correct because T && F and F && T both evaluate to false.\n", "question": "Suppose a and b are boolean variables. The expression\n\n        !a && !b\n\nwill evaluate to false whenever\n\n         I. a and b are both false.\n         II. a is false and b is true.\n         III. a is true and b is false.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "\nThis statement:\n\n    Each of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code\n\nis true because the doJob method can be overridden in each of its subclasses. \n\nThis statement:\n\n    Both Accountant and Manager inherit the constructors in Employee\n\nis false because constructors are never inherited. If a subclass has no constructor, the default constructor for the superclass is generated. If the superclass does not have a default constructor, a compile-time error will occur. \n\nThis statement: \n\n    If Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\nis false because the subclasses can use accessors to access these variables. \n\nThis statement: \n\n    If Accountant has a private instance variable accounting, employee can access it\n\nis false because a superclass cannot access the private instance variables of its subclasses.\n", "wrong_ans_explanation": "\nThis statement:\n\n    Each of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code\n\nis true because the doJob method can be overridden in each of its subclasses. \n\nThis statement:\n\n    Both Accountant and Manager inherit the constructors in Employee\n\nis false because constructors are never inherited. If a subclass has no constructor, the default constructor for the superclass is generated. If the superclass does not have a default constructor, a compile-time error will occur. \n\nThis statement: \n\n    If Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\nis false because the subclasses can use accessors to access these variables. \n\nThis statement: \n\n    If Accountant has a private instance variable accounting, employee can access it\n\nis false because a superclass cannot access the private instance variables of its subclasses.\n", "question": "Consider the classes below, where Accountant and Manager are subclasses of Employees.                \n           Employee\n          \u21e7           \u21e7\n  Accountant    Manager\n\nWhich of the following is a true statement about the classes shown?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\nEach of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code \n\n\n", "\nBoth Accountant and Manager inherit the constructors in Employee\n\n", "\nIf Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\n\n", "\nIf Accountant has a private instance variable accounting, employee can access it\n\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The private instance variable total must be incremented by amt. \n\nChoices:\n\n    return total + amt;\n\nand \n\n    return getTotal() + amt;\n\nare wrong because incrementTotal is void and should not return a value. \n\nChoice:\n\n    getTotal() += amt;\n\nis wrong because you can't use a method call as the left-hand side of an assignment. Also, the total is not being changed. \n", "wrong_ans_explanation": "The private instance variable total must be incremented by amt. \n\nChoices:\n\n    return total + amt;\n\nand \n\n    return getTotal() + amt;\n\nare wrong because incrementTotal is void and should not return a value. \n\nChoice:\n\n    getTotal() += amt;\n\nis wrong because you can't use a method call as the left-hand side of an assignment. Also, the total is not being changed. \n", "question": "Refer to the following class: \n\n    public class PiggyBank\n    {\n        private double total;\n        private boolean isFull;\n\n\n        //Increase total by amt.\n        public void incrementTotal(double amt)\n        { /* implementation of incrementTotal */ }\n\n\n        //Change the value of isFull:\n        //If its current value is true, change it to false.\n        //If its current value is false, change it to true.\n        public void changePiggyState()\n        { /* implementation of changePiggyState */ }\n\n\n        //Constructors and other methods not shown.\n    }\n\nAssuming that the PiggyBank class has an accessor method getTotal that returns total, which is a correct /* implementation of incrementTotal */?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n return total + amt;\n\n", "\n return getTotal() + amt;\n\n", "\n total += amt;\n\n", "\n getTotal() += amt;\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The value of the boolean instance variable isFull must be changed to the opposite of what it currently is. Segments I and II both achieve this. Note that !true has a value of false, and !false has a value of true. Segment III fails to do what is required if the current value of isFull is false.\n", "wrong_ans_explanation": "The value of the boolean instance variable isFull must be changed to the opposite of what it currently is. Segments I and II both achieve this. Note that !true has a value of false, and !false has a value of true. Segment III fails to do what is required if the current value of isFull is false.\n", "question": "Refer to the following class:\n\n    public class PiggyBank\n    {\n        private double total;\n        private boolean isFull;\n\n\n        //Increase total by amt.\n        public void incrementTotal(double amt)\n        { /* implementation of incrementTotal */ }\n\n\n        //Change the value of isFull:\n        //If its current value is true, change it to false.\n        //If its current value is false, change it to true.\n        public void changePiggyState()\n        { /* implementation of changePiggyState */ }\n\n\n        //Constructors and other methods not shown.\n    }\n\nWhich is a correct /* implementation of changePiggyState */?\n\n      I. if (isFull)\n            isFull = false;\n         else\n            isFull = true;\n    \n     II. isFull = !isFull;\n\n    III. if (isFull)\n            isFull = !isFull;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and II only\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The computer should find the number in no more than 10 tries. This is because the binary search needs log_base2(n) attempts to find any number and log_base2(1000)~10. You can also see this manually. Guessing interval is halved on each successive try:\n\n    (1)        1000 \u00f7 2        =        500        numbers left to try\n    (2)        500 \u00f7 2        =        250        numbers left to try\n    (3)        250 \u00f7 2        =        125        numbers left to try\n    (4)        125 \u00f7 2        =        63        numbers left to try (at most)\n    (5)        63 \u00f7 2        =        32        numbers left to try (at most)\n    (6)        32 \u00f7 2        =        16        numbers left to try\n    (7)        16 \u00f7 2        =        8        numbers left to try\n    (8)        8 \u00f7 2        =        4        numbers left to try\n    (9)        4 \u00f7 2        =        2        numbers left to try\n    (10)       2 \u00f7 2        =        1        number left to try\n\nTen iterations of the loop leaves just 1 number left to try.\n", "wrong_ans_explanation": "The computer should find the number in no more than 10 tries. This is because the binary search needs log_base2(n) attempts to find any number and log_base2(1000)~10. You can also see this manually. Guessing interval is halved on each successive try:\n\n    (1)        1000 \u00f7 2        =        500        numbers left to try\n    (2)        500 \u00f7 2        =        250        numbers left to try\n    (3)        250 \u00f7 2        =        125        numbers left to try\n    (4)        125 \u00f7 2        =        63        numbers left to try (at most)\n    (5)        63 \u00f7 2        =        32        numbers left to try (at most)\n    (6)        32 \u00f7 2        =        16        numbers left to try\n    (7)        16 \u00f7 2        =        8        numbers left to try\n    (8)        8 \u00f7 2        =        4        numbers left to try\n    (9)        4 \u00f7 2        =        2        numbers left to try\n    (10)       2 \u00f7 2        =        1        number left to try\n\nTen iterations of the loop leaves just 1 number left to try.\n", "question": "Consider the problem of writing a game in which a user thinks of an integer from 1 to 1000 inclusive and the computer tries to guess that number. Each time the computer makes a guess, the user makes one of three responses:\n\n\"lower\" (i.e., the number is lower than the computer's guess)\n\"higher\" (i.e., the number is higher than the computer's guess)\n\"you got it in < however many > tries!\"\n\nSuppose the game is programmed so that the computer uses a binary search strategy for making its guesses. What is the maximum number of guesses the computer could make before guessing the user's number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 9\n\n", "\n 10\n\n", "\n 100\n\n", "\n 500\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The maximum number of guesses is 1000. Suppose the user's number is 1000 and the computer's first guess happens to be 1. In a sequential search, the computer will try each successive number until it gets to 1000. Therefore, in this worst case, the computer will take 1000 guesses to reach the user's number.\n", "wrong_ans_explanation": "The maximum number of guesses is 1000. Suppose the user's number is 1000 and the computer's first guess happens to be 1. In a sequential search, the computer will try each successive number until it gets to 1000. Therefore, in this worst case, the computer will take 1000 guesses to reach the user's number.\n", "question": "Consider the problem of writing a game in which a user thinks of an integer from 1 to 1000 inclusive and the computer tries to guess that number. Each time the computer makes a guess, the user makes one of three responses:\n\n\"lower\" (i.e., the number is lower than the computer's guess)\n\"higher\" (i.e., the number is higher than the computer's guess)\n\"you got it in < however many > tries!\"\n\nSuppose the computer starts by guessing a random integer between 1 and 1000, and then uses a sequential search strategy to find the user's number. What is the maximum number of guesses the computer could make before guessing the user's number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 50\n\n", "\n 250\n\n", "\n 500\n\n", "\n 1000\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "It doesn't make sense to make an accessor static, because an object will then not be able to invoke that method!\n", "wrong_ans_explanation": "It doesn't make sense to make an accessor static, because an object will then not be able to invoke that method!\n", "question": "Which is a false statement about static methods?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n A static method can use a static variable in its implementation code.\n\n", "\n If a class is such that it doesn\u2019t make sense to ever create an object of the class, then all methods of that class should be static.\n\n\n\n", "\n All methods in a driver class that have a main method should be static.\n\n", "\n Accessor methods in an object may be static, depending on the value that\u2019s been accessed.\n\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The statement\n\n    double r = Math.random();\n\nproduces a random real number in the range 0.0 to 1.0 such that 0.0 \u2264 r < 1.0. This range can be scaled and shifted.\n\nIn general, to produce a random real value in the range lowValue \u2264 x < highValue:\n\ndouble x = (highValue - lowValue) * Math.random() + lowValue;\n", "wrong_ans_explanation": "The statement\n\n    double r = Math.random();\n\nproduces a random real number in the range 0.0 to 1.0 such that 0.0 \u2264 r < 1.0. This range can be scaled and shifted.\n\nIn general, to produce a random real value in the range lowValue \u2264 x < highValue:\n\ndouble x = (highValue - lowValue) * Math.random() + lowValue;\n", "question": "A programmer needs to produce a random real value x in the range 20.0 \u2264 x < 30.0. A statement that does this correctly is\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n double x = Math.random(20, 30);\n\n", "\n double x = Math.random(30) -10;\n\n", "\n double x = Math.random(20) + 10;\n\n", "\n double x = 10*Math.random() + 20;\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "All satisfy the is-a test. Bird is-a Flyer; Sparrow is-a Bird; Sparrow is-a Flyer. Note: Since Sparrow is-a Bird, it automatically implements any interfaces implemented by Bird, its superclass.\n", "wrong_ans_explanation": "All satisfy the is-a test. Bird is-a Flyer; Sparrow is-a Bird; Sparrow is-a Flyer. Note: Since Sparrow is-a Bird, it automatically implements any interfaces implemented by Bird, its superclass.\n", "question": "Refer to the following classes:\n\n    public interface Flyer\n    { void fly(); }\n\n    public class Bird implements Flyer\n    {\n        public void fly()\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\n    public class Sparrow extends Bird\n    {\n        public void flyLow(Sparrow other)\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\nAssuming that both Bird and Sparrow have default constructors, which is (are) valid in a client class?\n\n       I. Flyer f1 = new Bird();\n      II. Bird b = new Sparrow();\n     III. Flyer f2 = new Sparrow();\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Method call I works because Sparrow inherits all the methods of Bird. Method call II fails because Bird, the superclass, does not inherit the methods of Sparrow, its subclass. Method call III uses a parameter that fails the is-a test: bi is not a Sparrow, which the parameter requires.\n", "wrong_ans_explanation": "Method call I works because Sparrow inherits all the methods of Bird. Method call II fails because Bird, the superclass, does not inherit the methods of Sparrow, its subclass. Method call III uses a parameter that fails the is-a test: bi is not a Sparrow, which the parameter requires.\n", "question": "Refer to the following classes:\n\n    public interface Flyer\n    { void fly(); }\n\n    public class Bird implements Flyer\n    {\n        public void fly()\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\n    public class Sparrow extends Bird\n    {\n        public void flyLow(Sparrow other)\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\nConsider the following declarations in a client class.\n\n    Sparrow s = new Sparrow();\n    Bird bi = new Bird();\n\nWhich method calls would be legal?\n\n       I. s.fly();\n      II. bi.flyLow(s);\n     III. s.flyLow(bi);\n     \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The least suitable class for containing a compareTo method would be the class that is easily comparable. For example, two cars cannot be easily compared because the comparison would most likely be subjective. Therefore, we would need a compareTo method for this class. However, comparing two numbers is not difficult, and therefore does not deserve a compareTo method. As a result, the Point class with double x and y is the least suitable candidate for containing a compareTo method. \n", "wrong_ans_explanation": "The least suitable class for containing a compareTo method would be the class that is easily comparable. For example, two cars cannot be easily compared because the comparison would most likely be subjective. Therefore, we would need a compareTo method for this class. However, comparing two numbers is not difficult, and therefore does not deserve a compareTo method. As a result, the Point class with double x and y is the least suitable candidate for containing a compareTo method. \n", "question": "Which of the following classes is the least suitable candidate for containing a compareTo method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \tpublic class Point              \n    {\n        private double x;\n        private double y;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Name\n    {\n        private String firstName;\n        private String lastName;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Car\n    {\n        private int modelNumber;\n        private int year;\n        private double price;\n        //various methods follow\n            \u2026\n    }\n\n", "\n \tpublic class Point\n    {\n        private String name;\n        private double gpa;\n        //various methods follow\n            \u2026\n    }\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since the LibraryList class will store an array of Book objects, then the LibraryList class can essentially be considered to have a higher sophistication than the Book class. Therefore, if we plan to implement the Book class first, then we are essentially starting from the bottom and building our way up towards more sophisticated classes. Hence, bottom-up development is being used.\n", "wrong_ans_explanation": "Since the LibraryList class will store an array of Book objects, then the LibraryList class can essentially be considered to have a higher sophistication than the Book class. Therefore, if we plan to implement the Book class first, then we are essentially starting from the bottom and building our way up towards more sophisticated classes. Hence, bottom-up development is being used.\n", "question": "A programmer is designing a program to catalog all books in a library. He plans to have a Book class that stores features of each book: author, title, isOnShelf, and so on, with operations like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Another class, LibraryList, will store an array of Book objects. The LibraryList class will include operations such as listAllBooks, addBook, removeBook, and searchForBook. The programmer plans to implement and test the Book class first, before implementing the LibraryList class. The programmer\u2019s plan to write the Book class first is an example of \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n procedural abstraction\n\n", "\n bottom-up development              \n\n", "\n top-down development\n\n", "\n information hiding\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since one byte is devoted to each primary color, then 3 bytes are needed to represent a color in the RGB model (red, blue, and green). Therefore, 24 bits (8 * 3) would be needed to represent a color in the RGB model.\n", "wrong_ans_explanation": "Since one byte is devoted to each primary color, then 3 bytes are needed to represent a color in the RGB model (red, blue, and green). Therefore, 24 bits (8 * 3) would be needed to represent a color in the RGB model.\n", "question": "The color of a pixel can be represented using the RGB (Red, Green, Blue) color model, which stores values for red, green, and blue, each ranging from 0 to 255. How many bits (binary digits) would be needed to represent a color in the RGB model?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8\n\n", "\n 16\n\n", "\n 24             \n\n", "\n 32\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the values in a cannot be greater than Integer.MAX_VALUE, the test in the while loop will be true at least once and will lead to the smallest element being stored in min. (If all the elements of the array are Integer.MAX_VALUE, the code still works.) Similarly, initializing min to a[0], the first element in the array, ensures that all elements in a will be examined and the smallest will be found. Choice I, Integer.MIN_VALUE, fails because the test in the loop will always be false! There is no array element that will be smaller than the smallest possible integer. Therefore, II and III only are the correct answers.\n", "wrong_ans_explanation": "Since the values in a cannot be greater than Integer.MAX_VALUE, the test in the while loop will be true at least once and will lead to the smallest element being stored in min. (If all the elements of the array are Integer.MAX_VALUE, the code still works.) Similarly, initializing min to a[0], the first element in the array, ensures that all elements in a will be examined and the smallest will be found. Choice I, Integer.MIN_VALUE, fails because the test in the loop will always be false! There is no array element that will be smaller than the smallest possible integer. Therefore, II and III only are the correct answers.\n", "question": "Refer to the following method that finds the smallest value in the array.\n\n    // Precondition: a is an array of nonzero length and is initialized with int values.\n    // param a the array to be processed\n    // return the smallest value in a\n\n    public static int min( int[] a ) \n     {\n        int min = /* some value */;\n        int index = 0;\n        while (index < a.length)\n        {\n            if (a[index] < min)\n                min = a[index];\n            index++;\n        }\n        return min;\n    }\n\nWhich replacement(s) for /* some value */ will always result in correct execution of the min method?\n\n    I. Integer.MIN_VALUE\n    II. Integer.MAX_VALUE\n    III. arr[0]", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only           \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The maximum number of times that the action could be executed will occur when the test returns true every iteration. Therefore, the maximum number of times the action could be executed is the number of iterations in the for loop. Let n be odd, say 3. Then, the iterations in the for loop will be j = 0 and j = 2, i.e. 2 iterations. Let n be even, say 4. Then, the iterations in the for loop will also be j = 0 and j = 2, i.e. 2 iterations. What do these examples have in common? Well, in both these examples, the number of iterations is equal to (n + 1) / 2. Therefore, the expression that represents the maximum number of times that /* perform some action */ could be executed is (n + 1) / 2.\n", "wrong_ans_explanation": "The maximum number of times that the action could be executed will occur when the test returns true every iteration. Therefore, the maximum number of times the action could be executed is the number of iterations in the for loop. Let n be odd, say 3. Then, the iterations in the for loop will be j = 0 and j = 2, i.e. 2 iterations. Let n be even, say 4. Then, the iterations in the for loop will also be j = 0 and j = 2, i.e. 2 iterations. What do these examples have in common? Well, in both these examples, the number of iterations is equal to (n + 1) / 2. Therefore, the expression that represents the maximum number of times that /* perform some action */ could be executed is (n + 1) / 2.\n", "question": "Consider the following loop, where n is some positive integer.\n\n    for (int j = 0; j < n; j += 2)\n    {\n        if ( /* test */ )\n            /* perform some action */\n    }\n\nIn terms of n, which Java expression represents the maximum number of times that /* perform some action */ could be executed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n - 1\n\n", "\n (n + 1) / 2             \n\n", "\n (n - 1) / 2\n\n", "\n n / 2\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "When a > b, a * b is immediately returned and the method stops executing. However, if a <= b, the method will keep calling itself while decreasing a by 1. The recursion will continue to occur (even when a is negative) until computer memory is exhausted. Therefore, stack overflow will occur when a <= b.\n", "wrong_ans_explanation": "When a > b, a * b is immediately returned and the method stops executing. However, if a <= b, the method will keep calling itself while decreasing a by 1. The recursion will continue to occur (even when a is negative) until computer memory is exhausted. Therefore, stack overflow will occur when a <= b.\n", "question": "When will method something cause a stack overflow ( i.e., cause computer memory to be exhausted )?\n\n    public static int something( int a, int b )\n    {\n        if ( a > b )\n            return a * b;\n        else\n            return something( a - 1, b );\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n only when a < b\n\n", "\n only when a <= b          \n\n", "\n only when a > b\n\n", "\n for all values of a and b\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The boolean expression:\n\nx[j] == max || !(max != x[j])\n\ncan be simplified by cancelling the not operators. Thus, the expression will look like this:\n\nx[j] == max || max == x[j]\n\nSince both the left and right side of the OR operator are identical, one of these sides is not needed and the OR operator is not needed. Therefore, the furthest simplification of this expression is :\n\nx[j] == max\n", "wrong_ans_explanation": "The boolean expression:\n\nx[j] == max || !(max != x[j])\n\ncan be simplified by cancelling the not operators. Thus, the expression will look like this:\n\nx[j] == max || max == x[j]\n\nSince both the left and right side of the OR operator are identical, one of these sides is not needed and the OR operator is not needed. Therefore, the furthest simplification of this expression is :\n\nx[j] == max\n", "question": "The boolean expression x[j] == max || !(max != x[j]) can be simplified to \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n x[j] == max           \n\n", "\n x[j] != max\n\n", "\n true\n\n", "\n false\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The largest two-digit hexadecimal number would be FF. To convert hexadecimal to base-10, we must multiply the first position by 16^0, the second position by 16^1, and so on. Since F = 15, \n\nFF = (16^0 * 15) + (16^1 *15) = 15 + 240 = 255. \n", "wrong_ans_explanation": "The largest two-digit hexadecimal number would be FF. To convert hexadecimal to base-10, we must multiply the first position by 16^0, the second position by 16^1, and so on. Since F = 15, \n\nFF = (16^0 * 15) + (16^1 *15) = 15 + 240 = 255. \n", "question": "Suppose the characters 0, 1, \u2026, 8, 9, A, B, C, D, E, F are used to represent a hexadecimal (base-16) number. Here A = 10, B = 11, \u2026, F = 15. What is the largest base-10 integer that can be represented with a two-digit hexadecimal number, such as 14 or 3A?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 32\n\n", "\n 225\n\n", "\n 255              \n\n", "\n 256 \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The method to receive the number of elements in an ArrayList is size(). However, since the elements in ArrayLists start at index 0, there is no element at index list.size(). Therefore, the expressions:\n\nPerson p = list.get(list.size());\nand\nPerson p = list.remove(list.size());\nand\nfor (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\nask for the index list.size(), which will cause an IndexOutOfBoundsException. Nevertheless, the expression:\n\nlist.add(list.size(), new Person()); \n\ndoesn\u2019t cause this exception because the .add() method allows the programmer to add a new element at the last index + 1. The AP often likes to test students on the functionality of this method. \n", "wrong_ans_explanation": "The method to receive the number of elements in an ArrayList is size(). However, since the elements in ArrayLists start at index 0, there is no element at index list.size(). Therefore, the expressions:\n\nPerson p = list.get(list.size());\nand\nPerson p = list.remove(list.size());\nand\nfor (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\nask for the index list.size(), which will cause an IndexOutOfBoundsException. Nevertheless, the expression:\n\nlist.add(list.size(), new Person()); \n\ndoesn\u2019t cause this exception because the .add() method allows the programmer to add a new element at the last index + 1. The AP often likes to test students on the functionality of this method. \n", "question": "Consider a Person class that has a default constructor. Suppose a list ArrayList<Person> list is initialized. Which of the following will not cause an IndexOutOfBoundsException to be thrown?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n for (int j = 0; j <= list.size(); j++)\n        list.set(j, new Person());\n\n", "\n list.add(list.size(), new Person());           \n\n", "\n Person p = list.get(list.size());\n\n", "\n Person p = list.remove(list.size());\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "method1() attempts to increment every element within arr. However, since the increment method only increments the local variable k, the contents of arr are actually never changed. Therefore, the output by invoking method1 for a Test object would be:\n\n3 4 5\n", "wrong_ans_explanation": "method1() attempts to increment every element within arr. However, since the increment method only increments the local variable k, the contents of arr are actually never changed. Therefore, the output by invoking method1 for a Test object would be:\n\n3 4 5\n", "question": "Refer to the following class.\n\n    public class Test\n    {\n        private int[] arr = {3, 4, 5};\n\n        // param k an int to be incremented by 1\n        public void increment(int k)\n        { k++; }\n\n        public void method1()\n        {\n            for (int j = 0; j < arr.length; j++)\n            {\n                increment(arr[j]);\n                System.out.print(arr[j] + \u201c \u201c);\n            }\n        }\n\n        public void method2()\n        {\n            for (int e : arr)\n            {\n                increment(e);\n                System.out.print(e + \u201c \u201c);\n            }\n        }\n    }\n\nWhat output will be produced by invoking method1 for a Test object?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3 4 5       \n\n", "\n 0 0 0\n\n", "\n 4 5 6\n\n", "\n 5 6 7\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "method2 has an identical functionality to method1. The only difference is that method1\u2019s for loop iterates the array\u2019s indices while method2\u2019s for loop iterates the array\u2019s values. Nonetheless, the output would be the same as method1\u2019s output because the increment method only increments the local variable k. Therefore, the contents of arr would never change and the output would be:\n\n3 4 5\n", "wrong_ans_explanation": "method2 has an identical functionality to method1. The only difference is that method1\u2019s for loop iterates the array\u2019s indices while method2\u2019s for loop iterates the array\u2019s values. Nonetheless, the output would be the same as method1\u2019s output because the increment method only increments the local variable k. Therefore, the contents of arr would never change and the output would be:\n\n3 4 5\n", "question": "Refer to the following class.\n\n    public class Test\n    {\n        private int[] arr = {3, 4, 5};\n\n        // param k an int to be incremented by 1\n        public void increment(int k)\n        { k++; }\n\n        public void method1()\n        {\n            for (int j = 0; j < arr.length; j++)\n            {\n                increment(arr[j]);\n                System.out.print(arr[j] + \u201c \u201c);\n            }\n        }\n\n        public void method2()\n        {\n            for (int e : arr)\n            {\n                increment(e);\n                System.out.print(e + \u201c \u201c);\n            }\n        }\n    }\t\t\n\nWhat output will be produced by invoking method2 for a Test object, assuming that arr contains 3, 4, 5?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3 4 5       \n\n", "\n 0 0 0\n\n", "\n  4 5 6\n\n", "\n 5 6 7\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: The postcondition of a method is its purpose. Since t stores the object indexed at k, we know it is a placeholder. The object indexed at j is set to the index k and t is set to the index j. This means that the objects indexed at k and j are interchanged in list. \n", "wrong_ans_explanation": "Remember: The postcondition of a method is its purpose. Since t stores the object indexed at k, we know it is a placeholder. The object indexed at j is set to the index k and t is set to the index j. This means that the objects indexed at k and j are interchanged in list. \n", "question": "Refer to the mystery method:\n\n    // postcondition\n    public static void mystery(List<SomeType> list, int k, int j)\n    {\n        SomeType t = list.get(k);\t\n        list.set(k, list.get(j));\n        list.set(j, t);\n    }\n\nWhich best describes the postcondition for mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Replaces in list the object indexed at k with the object indexed at j.\n\n", "\n Replaces in list the object indexed at j with the object indexed at k.\n\n", "\n Replaces in list the object indexed at k and j with t.\n\n", "\n Interchanges in list the objects indexed at k and j.                                        \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In this recursive method, k is divided by 10 each time k is found to be greater than 10. As a result, by the time k is less than 10, there will be nested functions within each other. To unravel the nested functions, we must complete each method by printing k % 10. Since the most-nested function must first be completed, mystery(3) will be called first. This will print 3 because 3 % 10 = 3. Then, 34 % 10 = 4 will be printed, and finally, 347 % 10 = 7 will be printed. Therefore, mystery(347) will output 347.\n", "wrong_ans_explanation": "In this recursive method, k is divided by 10 each time k is found to be greater than 10. As a result, by the time k is less than 10, there will be nested functions within each other. To unravel the nested functions, we must complete each method by printing k % 10. Since the most-nested function must first be completed, mystery(3) will be called first. This will print 3 because 3 % 10 = 3. Then, 34 % 10 = 4 will be printed, and finally, 347 % 10 = 7 will be printed. Therefore, mystery(347) will output 347.\n", "question": "Consider the following method.\n\n    public static void mystery(int k)\n    {\n        if (k > 10)\n            mystery(k / 10);\n        System.out.print(k % 10);\n    }\n\nWhat will be the output as a result of the method call mystery(347)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 47\n\n", "\n 347         \n\n", "\n 734\n\n", "\n 743\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. Since every element in the list is compared to the minimum value a constant amount of times, the number of comparisons for selection sort is independent of the initial arrangement of elements. \n", "wrong_ans_explanation": "The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. Since every element in the list is compared to the minimum value a constant amount of times, the number of comparisons for selection sort is independent of the initial arrangement of elements. \n", "question": "A large list of numbers is to be sorted into ascending order. Assuming that a \u201cdata movement\u201d is a swap or reassignment of an element, which of the following is a true statement?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The number of data movements in selection sort depends on the initial arrangement of elements.\n\n", "\n The number of comparisons for selection sort is independent of the initial arrangement of elements.        \n\n", "\n The number of data movements in insertion sort is independent of the initial arrangement of elements.\n\n", "\n The number of comparisons for insertion sort is independent of the initial arrangement of elements.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I will execute without throwing an exception because null strings and empty strings are valid when comparing strings with each other. Option II will also execute without error because this code segment compares two strings that are not null or empty. However, option III will cause an exception to occur. Remember: The substring method with one parameter takes a subsection of the string from the parameter to the end of the string. Therefore, t attempts to take a substring from the 4th index to the end of the s. Since the 4h index in s is not present, there will be an error.\n", "wrong_ans_explanation": "Option I will execute without throwing an exception because null strings and empty strings are valid when comparing strings with each other. Option II will also execute without error because this code segment compares two strings that are not null or empty. However, option III will cause an exception to occur. Remember: The substring method with one parameter takes a subsection of the string from the parameter to the end of the string. Therefore, t attempts to take a substring from the 4th index to the end of the s. Since the 4h index in s is not present, there will be an error.\n", "question": "Which of the following will execute without throwing an exception?\n\n    I. \tString s = null;\n        String t = \u201c\u201d;\n        if (s.equals(t))\n            System.out.println(\u201cempty strings?\u201d);\n\n    II. \tString s = \u201choly\u201d;\n        String t = \u201cmoly\u201d;\n        if (s.equals(t))\n            System.out.println(\u201choly moly!\u201d);\n\n    III. \tString s = \u201choly\u201d;\n        String t = s.substring(4);\n        System.out.println(s + t);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and II only       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This method is a prime example of a binary search algorithm. Binary search compares the key value to the middle element of the array. If they are not equal, the half in which the key cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the key value, and repeating this until the key value is found. If the search ends with the remaining half being empty, the target is not in the array. Following this algorithm, right before every execution of the while loop, the key must be within the search parameters — that is, between array[first] and array[last]. Otherwise, the key is not in the array.", "wrong_ans_explanation": "This method is a prime example of a binary search algorithm. Binary search compares the key value to the middle element of the array. If they are not equal, the half in which the key cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to the key value, and repeating this until the key value is found. If the search ends with the remaining half being empty, the target is not in the array. Following this algorithm, right before every execution of the while loop, the key must be within the search parameters — that is, between array[first] and array[last]. Otherwise, the key is not in the array.", "question": "Refer to the find method in the Finder class below.\n\n    public class Finder\n    {\n        private int[] array;\n\n        // Constructor: Initializes array with integers.\n        public Finder()\n        { /* implementation not shown */ }\n\n        // Precondition: array[first] \u2026 array[last] sorted in ascending order\n        // Postcondition: return index of key in array. If key is not in array, returns -1;\n        public int find(int first, int last, int key)\n        {\n            int mid;\n            while (first <= last)\n            {\n                mid = (first + last) / 2;\n                if (array[mid] == key)\n                    return mid;\n                else if (array[mid] < key)\n                    first = mid + 1;\n                else\n                    last = mid - 1;\n            }\n            return -1;\n        }\n    }\n\nWhich assertion is true just before each execution of the while loop?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n array[first] < key < array[last] \n\n", "\n array[first] <= key <= array[last] \n\n", "\n array[first] < key < array[last] or key is not in array \n\n", "\n array[first] <= key <= array[last] or key is not in array            \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The first iteration will occur where mid = (0 + 13) / 2 = 6. Since array[6] = 50 < 205, we must set first to mid + 1 = 7. The second iteration will occur where mid = (7 + 13) / 2 = 10. Because array[mid] = 220 > 205, we must set last to mid - 1 = 9. The third while loop iteration will occur where mid = (7 + 9) / 2 = 8, Since array[8] = 205, we can return mid and exit the while loop. Altogether, 3 iterations of the while loop were made to locate mid. \n", "wrong_ans_explanation": "The first iteration will occur where mid = (0 + 13) / 2 = 6. Since array[6] = 50 < 205, we must set first to mid + 1 = 7. The second iteration will occur where mid = (7 + 13) / 2 = 10. Because array[mid] = 220 > 205, we must set last to mid - 1 = 9. The third while loop iteration will occur where mid = (7 + 9) / 2 = 8, Since array[8] = 205, we can return mid and exit the while loop. Altogether, 3 iterations of the while loop were made to locate mid. \n", "question": "Refer to the find method in the Finder class below.\n\n    public class Finder\n    {\n        private int[] array;\n\n        // Constructor: Initializes array with integers.\n        public Finder()\n        { /* implementation not shown */ }\n\n        // Precondition: array[first] \u2026 array[last] sorted in ascending order\n        // Postcondition: return index of key in array. If key is not in array, returns -1;\n        public int find(int first, int last, int key)\n        {\n            int mid;\n            while (first <= last)\n            {\n                mid = (first + last) / 2;\n                if (array[mid] == key)\n                    return mid;\n                else if (array[mid] < key)\n                    first = mid + 1;\n                else\n                    last = mid - 1;\n            }\n            return -1;\n        }\n    }\n\nConsider the array b with values as shown:\n\n    4, 7, 19, 25, 36, 37, 50, 100, 205, 209, 220, 271, 306, 321\n\nwhere 4 is b[0] and 321 is b[13]. Suppose that the find method is called with first = 0 and last = 13 to locate the key 205. How many iterations of the while loop must be made in order to locate it?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 3\t\t\t\n\n", "\n 4           \n\n", "\n 10\n\n", "\n 13\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Because we are setting values in an array (not an ArrayList) with a for loop, we must begin the code with list[j] (j being the iterator). Since the (Math.random() * x) function takes a number from 0 to x - 1, we must set x to 101 to ensure we return an array with random Integers from 0 to 100 inclusive. Therefore, the correct code is:\n\nlist[j] = (int) (Math.random() * 101); \n", "wrong_ans_explanation": "Because we are setting values in an array (not an ArrayList) with a for loop, we must begin the code with list[j] (j being the iterator). Since the (Math.random() * x) function takes a number from 0 to x - 1, we must set x to 101 to ensure we return an array with random Integers from 0 to 100 inclusive. Therefore, the correct code is:\n\nlist[j] = (int) (Math.random() * 101); \n", "question": "Consider the following Random class.\n\n    public class Random\n    {\n        private int[] randomList;\n\n        public Random\n        { randomList = getList(); }\n\n        // return array with random Integers from 0 to 100 inclusive\n        public int[] getList()\n        {\n            System.out.println(\u201cHow many integers?\u201d);\n            int len = IO.readInt();\t//read user input\n            int[] list = new int[len];\n            for (int j = 0; j < len; j++)\n            {\n                /* code to add integer to list */\n            }\n            return list;\n        }\n\n        // Print all elements of this list\n        public void printList()\n        { \u2026\n    }\n\nWhich represents correct /* code to add integer to list */ ?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n list[j] = (int) (Math.random() * 101);          \n\n", "\n list[j] = (int) (Math.random() * 100);\n\n", "\n list.add((int) (Math.random() * 101));\n\n", "\n list.add(new Integer(Math.random() * 100));\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The change method searches the location(s) in the 2-D array where the the row equals the column at that location. Since the matrix has 2 rows and 3 columns, this will only occur at matrix[0][0] and matrix[1][1]. As a result, the absolute value will be taken at these points. After a call to change(matrix), matrix will look like this:\n\n1 -2 -6                \n-2  4  5\n", "wrong_ans_explanation": "The change method searches the location(s) in the 2-D array where the the row equals the column at that location. Since the matrix has 2 rows and 3 columns, this will only occur at matrix[0][0] and matrix[1][1]. As a result, the absolute value will be taken at these points. After a call to change(matrix), matrix will look like this:\n\n1 -2 -6                \n-2  4  5\n", "question": "A matrix (two-dimensional array) is declared as \n\n    int[][] matrix = new int[2][3];\n\nConsider the following method:\n\n    public static void change(int[][] matrix)\n    {\n        for (int r = 0; r < matrix.length; r++)\n            for (int c = 0; c < matrix[r].length; c++)\n                if ( r == c )\n                    matrix[r][c] = Math.abs(matrix[r][c]);\n    }\n\nIf matrix is initialized to be\n\n    -1 -2 -6\n    -2 -4  5\n\nwhich matrix will be the result of a call to change(matrix)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \t 1 -2 -6                \n    -2  4  5\n\n", "\n \t-1  2 -6\n     2 -4  5\n\n", "\n \t-1 -2 -6\n    -2 -4 -5\n\n", "\n \t 1  2 -6\n     2  4  5\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The AP loves testing students on nested for loops like this question. The inner for loop essentially looks at every value in y and checks if any of these are equal to a constant value in x. If one of these values is equal, then f is set to true. After the outer for loop iterates, every value in y is checked against another value in x. Therefore, if one value in x is not in y, then false is returned. Method returns true only if every element of array x is also in y. \n", "wrong_ans_explanation": "The AP loves testing students on nested for loops like this question. The inner for loop essentially looks at every value in y and checks if any of these are equal to a constant value in x. If one of these values is equal, then f is set to true. After the outer for loop iterates, every value in y is checked against another value in x. Therefore, if one value in x is not in y, then false is returned. Method returns true only if every element of array x is also in y. \n", "question": "Consider method find below:\n\n    // Precondition: a.length is equal to b.length.\n    public static boolean find(int[] x, int[] y)\n    {\n        for (int xVal : x)\n        {\n            boolean f = false;\n            for (int yVal : y)\n            {\n                if (xVal == yVal)\n                    f = true;\n            }\n            if (!f)\n                return false;\n        }\n        return true;\n    }\n\nWhich best describes what method find does? Method find returns true only if \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Arrays x and y contain identical elements in reverse order.\n\n", "\n Arrays x and y contain identical elements in the same order.\n\n", "\n Arrays x and y contain at least one element that is also in b.\n\n", "\n Every element of array x is also in y.                \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "A class that implements an interface must must implement every method of that interface, or be declared as abstract. Therefore, this choice is true:\n\nHumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\nA subclass can always override methods of its superclass, even methods that are implementations of an interface. Therefore, this choice is true:\n\nThe GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\nOther than functions, a subclass inherits that interface that is implemented by the parent class. Therefore, this choice is true:\n\nGoodPlayer automatically implements the Player interface.\n\nFurthermore, it is possible to declare a variable as an interface type if it can reference an object of a class that implements an interface. Therefore, this statement if false (and the correct answer):\n\nIt is not possible to declare a reference of type Player.\n", "wrong_ans_explanation": "A class that implements an interface must must implement every method of that interface, or be declared as abstract. Therefore, this choice is true:\n\nHumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\nA subclass can always override methods of its superclass, even methods that are implementations of an interface. Therefore, this choice is true:\n\nThe GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\nOther than functions, a subclass inherits that interface that is implemented by the parent class. Therefore, this choice is true:\n\nGoodPlayer automatically implements the Player interface.\n\nFurthermore, it is possible to declare a variable as an interface type if it can reference an object of a class that implements an interface. Therefore, this statement if false (and the correct answer):\n\nIt is not possible to declare a reference of type Player.\n", "question": "Refer to the Player interface shown below.\n\n    public interface Player\n    {\t\n        // Return an integer that represents a move in a game.\n        int getMove();\n\n        //Display the status of the game for this Player after implementing the next move.\n        void updateDisplay();\n    }\n\nHumanPlayer is a class that implements the Player interface. Another class, GoodPlayer, is a subclass of HumanPlayer. Which statement is false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n HumanPlayer must contain implementations of both the updateDisplay and getMove methods, or be declared as abstract.\n\n", "\n The GoodPlayer class can override the methods updateDisplay and getMove of the HumanPlayer class.\n\n", "\n It is not possible to declare a reference of type Player.              \n\n", "\n GoodPlayer automatically implements the Player interface.\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If the variable a was initialized as such:\n\nint a = (int) (Math.random() * x) + y;\n\nwhere x and y are integers, then a would store a random number from y to y + x - 1. When x is multiplied by the Math.random() function, the random integer is taken from 0 to x -1. When y is added, the entire random function is shifted, and the random integer is taken from y to y + x - 1. Therefore, to store a random integer from 1 to 50 you must multiply by 50 and add by 1.The statement will look like this:\n\nint winner = (int) (Math.random() * 50 ) + 1; \n", "wrong_ans_explanation": "If the variable a was initialized as such:\n\nint a = (int) (Math.random() * x) + y;\n\nwhere x and y are integers, then a would store a random number from y to y + x - 1. When x is multiplied by the Math.random() function, the random integer is taken from 0 to x -1. When y is added, the entire random function is shifted, and the random integer is taken from y to y + x - 1. Therefore, to store a random integer from 1 to 50 you must multiply by 50 and add by 1.The statement will look like this:\n\nint winner = (int) (Math.random() * 50 ) + 1; \n", "question": "A program simulates fifty slips of paper, numbered 1 through 50, placed in a bowl for a raffle drawing. Which of the following statements stores in winner a random integer from 1 to 50?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n int winner = (int) (Math.random() * 50 ) + 1;       \n\n", "\n int winner = (int) (Math.random() * 50 ) ;\n\n", "\n int winner = (int) (Math.random() * 51 );\n\n", "\n int winner = (int) (Math.random() * 51 ) + 1;\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I is correct because j is being set to 30 using the Integer wrapper. Option III is also correct because it is the same as Option I, but written in two lines. However, option II is not correct because j must be set to the integer value of 30, not vice versa. Therefore, only option I and III are correct.\n", "wrong_ans_explanation": "Option I is correct because j is being set to 30 using the Integer wrapper. Option III is also correct because it is the same as Option I, but written in two lines. However, option II is not correct because j must be set to the integer value of 30, not vice versa. Therefore, only option I and III are correct.\n", "question": "Consider the code segment.\n\n    Integer j = new Integer(20);\n    /* more code */\n\nWhich of the following replacements for /* more code */ correctly sets j to have an integer value of 30?\n\n    I. j = new Integer(30);\n    II. j.intValue() = 30;\n    III. Integer k = new Integer(30);\n          j = k;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The choices:\n\nif (o.compareTo(j) <0) \u2026\nand\nif (j.compareTo(d) < 0) \u2026\n\nwill cause an error because both these statements attempt to compare two variables with different data types. The choice:\n\nif ((Integer) o.compareTo(j) < 0) \u2026\n\nwill also cause an error because an object cannot be cast into an integer. The choice:\n\nif (j.compareTo((Integer) d) < 0) \u2026\n\nwill not cause an error because the double d is being downcast into an int, and then compared with the integer j.\n", "wrong_ans_explanation": "The choices:\n\nif (o.compareTo(j) <0) \u2026\nand\nif (j.compareTo(d) < 0) \u2026\n\nwill cause an error because both these statements attempt to compare two variables with different data types. The choice:\n\nif ((Integer) o.compareTo(j) < 0) \u2026\n\nwill also cause an error because an object cannot be cast into an integer. The choice:\n\nif (j.compareTo((Integer) d) < 0) \u2026\n\nwill not cause an error because the double d is being downcast into an int, and then compared with the integer j.\n", "question": "Consider these declarations.\n\n    Integer j = new Integer(3);\n    Object o = new Integer(4);\n    Double d = new Double(3.0);\n\nWhich of the following will not cause an error?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n if ((Integer) o.compareTo(j) < 0) \u2026\n\n", "\n if (o.compareTo(j) < 0) \u2026\n\n", "\n if (j.compareTo( d ) < 0\n\n", "\n if ( j.compareTo((Integer) d ) < 0) \u2026         \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: The \u201c==\u201c sign is used for comparing integers while the equals() method is used for comparing strings. Since the intValue() method returns an integer, we must use the \u201c==\u201c sign. Therefore, option I will not generate an error while option II will generate an error. Considering that the toString() method returns a string, we must use the equals() method. Consequently, option III will not generate an error because it accurately utilizes the equals() method. Only option I and III are correct. \n", "wrong_ans_explanation": "Remember: The \u201c==\u201c sign is used for comparing integers while the equals() method is used for comparing strings. Since the intValue() method returns an integer, we must use the \u201c==\u201c sign. Therefore, option I will not generate an error while option II will generate an error. Considering that the toString() method returns a string, we must use the equals() method. Consequently, option III will not generate an error because it accurately utilizes the equals() method. Only option I and III are correct. \n", "question": "Refer to these declarations:\n\n    Integer a = new Integer(10);\n    Integer b = new Integer(5);\n\nWhich test will not generate an error?\n\n    I. if (a.intValue() == b.intValue()) \u2026\n    II. if ((a.intValue()).equals(b.intValue())) \u2026\n    III. If ((a.toString()).equals(b.toString())) \u2026\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Considering the fact that objects cannot be forcibly type casted (as is done in the question), there will be no output and a ClassCastException will be thrown.\n", "wrong_ans_explanation": "Considering the fact that objects cannot be forcibly type casted (as is done in the question), there will be no output and a ClassCastException will be thrown.\n", "question": "Consider the code fragment.\n\n    Object o = new Integer(10);\n    System.out.println((String) o);\n\nWhat will be the output as a result of running the fragment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n No output. A ClassCastException will be thrown.          \n\n", "\n No output. An ArithmeticException will be thrown.\n\n", "\n \u201c9\u201d\n\n", "\n 9\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Remember: \u201c==\u201c checks if both objects point to the same memory location whereas .equals() evaluates the comparison of values in the objects. Although a, b, and c all have the same values, only c and a point to the same memory location. Option I will evaluate to false because a and b do not point to the same memory location. However, option II and III will evaluate to true because a, b, and c have the same values. \n", "wrong_ans_explanation": "Remember: \u201c==\u201c checks if both objects point to the same memory location whereas .equals() evaluates the comparison of values in the objects. Although a, b, and c all have the same values, only c and a point to the same memory location. Option I will evaluate to false because a and b do not point to the same memory location. However, option II and III will evaluate to true because a, b, and c have the same values. \n", "question": "Consider these declarations:\n\n    String a = \u201ccrab\u201d;\n    String b = new String(\u201ccrab\u201d);\n    String c = a;\n\nWhich expression involving these strings evaluates to true?\n\n    I. a == b\n    II. a.equals( b )\n    III. c.equals( b )\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n I and II only\n\n", "\n II and III only      \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since a, b, and c all have different string values, the .equals() method would never hold true. Additionally, considering the fact that the compareTo() method compares strings in alphabetical order, this would be the comparison for a, b, and c in alphabetical order: a < c < b. Therefore, the expression:\n\n!(a.equals(b)) && c.compareTo(b) < 0 \n\nwill evaluate to true because a.equals(b) is false (TOMATO != tomato) and c.compareTo(b) is also false (\u201ctom\u201d is before \u201ctomato\u201d in an alphabetical list).\n", "wrong_ans_explanation": "Since a, b, and c all have different string values, the .equals() method would never hold true. Additionally, considering the fact that the compareTo() method compares strings in alphabetical order, this would be the comparison for a, b, and c in alphabetical order: a < c < b. Therefore, the expression:\n\n!(a.equals(b)) && c.compareTo(b) < 0 \n\nwill evaluate to true because a.equals(b) is false (TOMATO != tomato) and c.compareTo(b) is also false (\u201ctom\u201d is before \u201ctomato\u201d in an alphabetical list).\n", "question": "Suppose that a = \u201cTOMATO\u201d, b = \u201ctomato\u201d, and c = \u201ctom\u201d. Given that \u201cA\u201d comes before \u201ca\u201d in dictionary order , which is true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a.compareTo( b ) < 0 && b.compareTo( c ) < 0\n\n", "\n b.compareTo( a ) < 0 || c.compareTo( a ) < 0\n\n", "\n !(a.equals( b )) && c.compareTo( a ) < 0\n\n", "\n !(a.equals( b )) && c.compareTo( b ) < 0             \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The .index(\u201cm\u201d) function finds the first index where the letter \u201cm\u201d is  found, which is 2. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 26, which is \u201cst.\u201d Therefore, the value of str would be \u201csillyst.\u201d \n", "wrong_ans_explanation": "The .index(\u201cm\u201d) function finds the first index where the letter \u201cm\u201d is  found, which is 2. The call to line.substring(10, 15) returns the substring from the first index (10) to the last index - 1 (15 - 1 = 14), which results in \u201csilly.\u201d Following the same principle, line.substring(25, 25 + x) will output the letters from index 25 to 26, which is \u201cst.\u201d Therefore, the value of str would be \u201csillyst.\u201d \n", "question": "This question refers to the following declaration:         \n\n    String a = \u201cSome more silly stuff on strings!\u201d;\n    //the words are separated by a single space\n\nWhich string will s refer to after execution of the following?\n\n    int x = a.indexOf(\u201cm\u201d);\n    String s = a.substring(10, 15) + a.substring(25, 25 + x);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201csillyst\u201d        \n\n", "\n \u201csillystr\u201d \n\n", "\n \u201csilly st\u201d\n\n", "\n silly str\u201d\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Never create assumptions in your code because many flaws and loopholes could be created. Therefore, you should first check with the writer of the specification and ensure that he/she elaborates on this vague aspect.\n", "wrong_ans_explanation": "Never create assumptions in your code because many flaws and loopholes could be created. Therefore, you should first check with the writer of the specification and ensure that he/she elaborates on this vague aspect.\n", "question": "A program that reads in a five-digit identification number is to be written. The specification does not state whether zero can be entered as a first digit. The programmer should \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n write the code to accept zero as a first digit since zero is a valid digit.\n\n", "\n write the code to reject zero as a first digit since five-digit integers do not start with zero. \n\n", "\n treat the identification number as a four-digit number if the user enters a number starting with zero.\n\n", "\n check with the writer of the specification whether zero is acceptable as a first digit.      \n\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "A ThreeDigitNumber class would be suitable for a program description that utilizes this three digit number extensively. The program description:\n\nTest whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits \n\nmost likely needs a ThreeDigitNumber class because the programmer would need to test every three digit number and use every digit in these numbers.The program description:\n\nRead in a three-digit code number and check if it is valid according to some given formula\n\nalso needs a ThreeDigitNumber class because the inputted three digit number will have to be extensively validated in this class according to some formula. The program description:\n\nPasswords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters\n\nprobably does not need a ThreeDigitNumber class because only characters are checked, not the three digit numbers. Option I and II are correct.\n", "wrong_ans_explanation": "A ThreeDigitNumber class would be suitable for a program description that utilizes this three digit number extensively. The program description:\n\nTest whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits \n\nmost likely needs a ThreeDigitNumber class because the programmer would need to test every three digit number and use every digit in these numbers.The program description:\n\nRead in a three-digit code number and check if it is valid according to some given formula\n\nalso needs a ThreeDigitNumber class because the inputted three digit number will have to be extensively validated in this class according to some formula. The program description:\n\nPasswords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters\n\nprobably does not need a ThreeDigitNumber class because only characters are checked, not the three digit numbers. Option I and II are correct.\n", "question": "Refer to the following three program descriptions:\n\n    I. Test whether there exists at least one three-digit integer whose value equals the sum of the squares of its digits.\n    II. Read in a three-digit code number and check if it is valid according to some given formula.\n    III. Passwords consist of three digits and three capital letters in any order. Read in a password, and check if there are any repeated characters.\n\nFor which of the preceding program descriptions would a ThreeDigitNumber class be suitable?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and II only             \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In short, top-down programming refers to writing the program in broad terms, and then slowly adding features and detail (vague to specific). Writing an essay does not even relate to writing a program, so that choice can be eliminated. Using driver programs for every method in the order they are called may be useful, but it does not follow any programming strategies, so this choice can also be eliminated. The choice that describes starting from the lowest level and then working our way up is an illustration of bottom-up programming. Therefore, the choice that states:\n\nWriting the program in terms of the operations to be performed and then refining these operations by adding more detail.\n\nis correct and illustrates top-down programming.\n", "wrong_ans_explanation": "In short, top-down programming refers to writing the program in broad terms, and then slowly adding features and detail (vague to specific). Writing an essay does not even relate to writing a program, so that choice can be eliminated. Using driver programs for every method in the order they are called may be useful, but it does not follow any programming strategies, so this choice can also be eliminated. The choice that describes starting from the lowest level and then working our way up is an illustration of bottom-up programming. Therefore, the choice that states:\n\nWriting the program in terms of the operations to be performed and then refining these operations by adding more detail.\n\nis correct and illustrates top-down programming.\n", "question": "Top-down programming is illustrated by which of the following?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Writing an essay describing how the program will work, without including any Java code.\n\n", "\n Using driver programs to test all methods in the order that they are called in the program.\n\n", "\n Writing and testing the lowest level methods first and then combining them to form appropriate abstract operations.\n\n\n", "\n Writing the program in terms of the operations to be performed and then refining these operations by adding more detail. \t\t\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Multiple factors should influence the programmer\u2019s choice of a particular algorithm. The best algorithm should minimize run time, minimize the memory requirements of the algorithm, have a clear and concise logic structure, and many more. Therefore, option I, II, and III are correct.\n", "wrong_ans_explanation": "Multiple factors should influence the programmer\u2019s choice of a particular algorithm. The best algorithm should minimize run time, minimize the memory requirements of the algorithm, have a clear and concise logic structure, and many more. Therefore, option I, II, and III are correct.\n", "question": " Which of the following should influence your choice of a particular algorithm?\n\n    I. The run time of the algorithm\n    II. The memory requirements of the algorithm\n    III. The ease with which the logic of the algorithm can be understood\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n I and III only\n\n", "\n I and II only\n\n", "\n I, II, and III         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If we want to find a process that inefficiently executes as a result of the requirement that the list be maintained in sorted order, we must find the process that could not be coded or performed with ease or efficiency. Option I, summing the five largest numbers in the list, will not result in inefficient execution because if the list is sorted, we could simply add the last five elements in the list. Option II, finding the maximum value in the list, will also not result in inefficient execution because the maximum value is the last element of the sorted list. Finally, option III, inserting and deleting numbers, will result in inefficient execution because in order to insert a certain number in the sorted list, you must find the number\u2019s potential corresponding index in the sorted list, which requires significantly more code than the other two options. Therefore, option III only is the correct answer. \n", "wrong_ans_explanation": "If we want to find a process that inefficiently executes as a result of the requirement that the list be maintained in sorted order, we must find the process that could not be coded or performed with ease or efficiency. Option I, summing the five largest numbers in the list, will not result in inefficient execution because if the list is sorted, we could simply add the last five elements in the list. Option II, finding the maximum value in the list, will also not result in inefficient execution because the maximum value is the last element of the sorted list. Finally, option III, inserting and deleting numbers, will result in inefficient execution because in order to insert a certain number in the sorted list, you must find the number\u2019s potential corresponding index in the sorted list, which requires significantly more code than the other two options. Therefore, option III only is the correct answer. \n", "question": "A list of numbers is stored in a sorted array. It is required that the list be maintained in sorted order. This requirement leads to inefficient execution for which of the following processes?\n\n    I. Summing the five largest numbers in the list\n    II. Finding the maximum value in the list\n    III. Inserting and deleting numbers\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n III only                \n\n", "\n II and III only\n\n", "\n I and III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "All the options except for:\n\n\u201cwill run on any computer without modification\u201d\n\npertain to the enhancement and optimization of the algorithm of the program. However, the option shown above refers to a hardware issue that does not need to be addressed in a program for it to be considered robust. \n", "wrong_ans_explanation": "All the options except for:\n\n\u201cwill run on any computer without modification\u201d\n\npertain to the enhancement and optimization of the algorithm of the program. However, the option shown above refers to a hardware issue that does not need to be addressed in a program for it to be considered robust. \n", "question": "Which of the following is not necessarily a feature of a robust program?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n does not allow execution to proceed with invalid data\n\n", "\n uses algorithms that give correct answers for extreme data values\n\n", "\n will run on any computer without modification                                    \n\n", "\n will not allow division by zero\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "In order to adequately test this method using the smallest set of input values, you must have one input value to represent each scenario. For example, you would want to test the code for the scenarios where the shipping weights are less than 10 tons, between 10 and 25 tons, and greater than 25 tons. Therefore, we will use one input value for each scenario: 5, 15, and 30, respectively (there is no significant reason for choosing these specific numbers within their respective intervals). Additionally, shipping weights of 10 tons and 25 tons must be accounted for since they are different boundary scenarios of the scale given in the problem. However, the shipping weight of 0 tons does not need to be included in the smallest set of input values because one value under 10 tons has already been included and the resulting charge for 0 tons would simply be 0 dollars. Therefore, the smallest set of input values for shipping weights are:\n\n5, 10, 15, 25, 30\n", "wrong_ans_explanation": "In order to adequately test this method using the smallest set of input values, you must have one input value to represent each scenario. For example, you would want to test the code for the scenarios where the shipping weights are less than 10 tons, between 10 and 25 tons, and greater than 25 tons. Therefore, we will use one input value for each scenario: 5, 15, and 30, respectively (there is no significant reason for choosing these specific numbers within their respective intervals). Additionally, shipping weights of 10 tons and 25 tons must be accounted for since they are different boundary scenarios of the scale given in the problem. However, the shipping weight of 0 tons does not need to be included in the smallest set of input values because one value under 10 tons has already been included and the resulting charge for 0 tons would simply be 0 dollars. Therefore, the smallest set of input values for shipping weights are:\n\n5, 10, 15, 25, 30\n", "question": "A certain freight company charges its customers for shipping overseas according to this scale:\n\n    $80 per ton for a weight of 10 tons or less\n    $40 per ton for each additional ton over 10 tons but not exceeding 25 tons\n    $30 per ton for each additional ton over 25 tons\n\nFor example, to ship a weight of 12 tons will cost 10(80) + 2(40) = $880. To ship 26 tons will cost 10(80) + 15(40) + 1(30) = $1430.\nA method takes as parameter an integer that represents a valid shipping weight and outputs the charge for the shipment. Which of the following is the smallest set of input values for shipping weights that will adequately test this method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5, 15, 30\n\n", "\n 0, 5, 10, 15, 25, 30\n\n", "\n 5, 10, 15, 25, 30              \n\n", "\n 5, 10, 15, 20, 25, 30\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the number 4 is being cast to a double and the variables a, b, c, and d are all integers, an error would obviously be caused when the sum of these variables are divided by the double. This type casting error is known as a logic error because the computer cannot logically compute this equation with differing data types.\n", "wrong_ans_explanation": "Since the number 4 is being cast to a double and the variables a, b, c, and d are all integers, an error would obviously be caused when the sum of these variables are divided by the double. This type casting error is known as a logic error because the computer cannot logically compute this equation with differing data types.\n", "question": "A code segment calculates the mean of values in integers a, b, c, and d and stores the result in average, which is of type double. What kind of error is caused with this statement?\n\n    double average = a + b + c + d / (double) 4;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Logic        \n\n", "\n Run-time\n\n", "\n Overflow\n\n", "\n Syntax\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since this problem of division by zero cannot be detected by the code, this oversight will not be detected at compile time or while editing the program. However, when the program begins to calculate the result of the expression, this problem will be detected and an error will occur. Therefore, during evaluation of the expressions, this oversight will be detected in the computer. \n", "wrong_ans_explanation": "Since this problem of division by zero cannot be detected by the code, this oversight will not be detected at compile time or while editing the program. However, when the program begins to calculate the result of the expression, this problem will be detected and an error will occur. Therefore, during evaluation of the expressions, this oversight will be detected in the computer. \n", "question": "A program evaluates binary arithmetic expressions that are read from an input file. All the operands are integers, and the only operators are +, -, *, and /. In writing the program, the programmer forgot to include a test that checks whether the right-hand operand in a division expression equals zero. When will this oversight be detected in the computer?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n At compile time\n\n", "\n While editing the program\n\n", "\n During evaluation of the expressions                   \n\n", "\n As soon as the data from the input file is read\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The answer to this question is quite literally a textbook definition. The precondition a method describes what must be true when the method is called.\n", "wrong_ans_explanation": "The answer to this question is quite literally a textbook definition. The precondition a method describes what must be true when the method is called.\n", "question": "Which best describes the precondition of a method? It is an assertion that\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n initializes the parameters of the method.\n\n", "\n describes the effect of the method on its postcondition.\n\n", "\n states what the initial values of the local variables in the method must be.\n\n", "\n describes precisely the conditions that must be true at the time the method is called.           \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The answer to this problem can be solved with simple logic. In order to have the least amount of computer operations, the last if statement will not have to be executed. Hence, a or b must be the largest value to result in the least number of computer operations. On the other hand, c would have to be the largest value in order to have the greatest amount of computer operations because procedurally, if c was the largest value, every if statement will be executed in the code fragment.\n", "wrong_ans_explanation": "The answer to this problem can be solved with simple logic. In order to have the least amount of computer operations, the last if statement will not have to be executed. Hence, a or b must be the largest value to result in the least number of computer operations. On the other hand, c would have to be the largest value in order to have the greatest amount of computer operations because procedurally, if c was the largest value, every if statement will be executed in the code fragment.\n", "question": "Consider the following code fragment:\n\n    // Precondition: a, b, and c contain 3 distinct integers.\n    // Postcondition: max contains the largest of a, b, c.\n    //first set max equal to larger of a and b\n    if ( a > b )\n        max = a;\n    else \n        max = b;\n    // set max equal to larger of max and c\n    if ( max < c )\n        max = c;\n\nFor this algorithm, which of the following initial setups for a, b, and c will cause\n\n    (1) the least number of computer operations (best case) and\n    (2) the greatest number of computer operations (worst case)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n (1) largest value in a or b\t\t(2) largest value in c           \n\n", "\n (1) smallest value in a or b\t\t(2) largest value in c\n\n", "\n (1) smallest value in a \t\t(2) largest value in b\n\n", "\n (1) largest value in b or c \t\t(2) largest value in a\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question requires you to understand what a precondition means concerning a specific code fragment or loop. In this case, the precondition for the while loop is the values of the variables needed for the while loop at the time when the loop is executed. Therefore, N >= 1 (as seen in the comments), j = 1 (as seen in the variable initialization), and sum = 1.0 (also seen in variable initialization). \n", "wrong_ans_explanation": "This question requires you to understand what a precondition means concerning a specific code fragment or loop. In this case, the precondition for the while loop is the values of the variables needed for the while loop at the time when the loop is executed. Therefore, N >= 1 (as seen in the comments), j = 1 (as seen in the variable initialization), and sum = 1.0 (also seen in variable initialization). \n", "question": "Refer to the following code segment.\n\n    //Compute the mean of integers 1 .. N.\n    // N is an integer >= 1 and has been initialized.\n    int j = 1;\n    double avg, sum = 1.0;\n    while (j < N)\n    {\n        /* loop body */\n    }\n    avg = sum / N;\n\nWhat is the precondition for the while loop?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n j < N, sum = 1.0\n\n", "\n j >= N, sum = 1.0\n\n", "\n avg = sum / N \n\n", "\n N >= 1, j = 1, sum = 1.0         \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "All that\u2019s needed to answer this question is your understanding of a for loop initialization in Java. In this method, j is initialized to be 3, iterates by 1 every loop,, and ends when j is equal to k. Therefore, 3 <= j <= k.\n", "wrong_ans_explanation": "All that\u2019s needed to answer this question is your understanding of a for loop initialization in Java. In this method, j is initialized to be 3, iterates by 1 every loop,, and ends when j is equal to k. Therefore, 3 <= j <= k.\n", "question": "The sequence of Fibonacci numbers is 1, 1, 2, 3, 5, 8, 13, 21, \u2026. The first two Fibonacci numbers are each 1. Each subsequent number is obtained by adding the previous two. Consider this method:  \n\n    // Precondition: n >= 1.\n    // Postcondition: The nth Fibonacci number has been returned.\n    public static int fibonacci(int k)\n    {\n        int prev = 1, next = 1, sum = 1;\n        for (int j = 3; j <= k; j++)\n        {\n            /* assertion */\n            sum = next + prev;\n            prev = next;\n            next = sum;\n        }\n        return sum;\n    }\n\nWhich of the following is a correct /* assertion */ about the loop variable j?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 <= j <= k\n\n", "\n 1 <= j <= k\n\n", "\n 3 <= j <= k                  \n\n", "\n 3 < j <= k\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Once you see the pattern, this question is fairly easy. The while loop in the mystery method iterates a number of b - c + 1 times (you can find this by testing different examples of b and c with real values). Every time the while loop runs, a is added to the total. Therefore, after the execution of mystery, total is equal to a * (b - c + 1). Since c = 1, total = a * b.\n", "wrong_ans_explanation": "Once you see the pattern, this question is fairly easy. The while loop in the mystery method iterates a number of b - c + 1 times (you can find this by testing different examples of b and c with real values). Every time the while loop runs, a is added to the total. Therefore, after the execution of mystery, total is equal to a * (b - c + 1). Since c = 1, total = a * b.\n", "question": "Refer to the following method.\n\n    //Precondition: a and b are initialized integers.\n    public static int mystery( int a, int b ) \n    {\n        int total = 0, c = 1;\n        while ( c <= b )\n        {\n            total += a;\n            c++;\n        }\n        return total;\n    }\n\nWhat is the postcondition for method mystery?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n total = a^b\n\n", "\n total = b^a\n\n", "\n total = a / b;\n\n", "\n total = a * b;          \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "In order for the class to be a reasonable choice to be responsible for the amountDue method, that class must have the proper information required for running this method. This information includes the quantity, unit price, and the total price for each item. Since the Item class is only limited to each item at a time, it is not suited for calculating the total amount of all the items. On the other hand, the ItemList and Invoice class are much more general than the Item class and contain the proper preconditions for executing the amountDue method. Therefore, only II and III are correct.\n", "wrong_ans_explanation": "In order for the class to be a reasonable choice to be responsible for the amountDue method, that class must have the proper information required for running this method. This information includes the quantity, unit price, and the total price for each item. Since the Item class is only limited to each item at a time, it is not suited for calculating the total amount of all the items. On the other hand, the ItemList and Invoice class are much more general than the Item class and contain the proper preconditions for executing the amountDue method. Therefore, only II and III are correct.\n", "question": "A program is to be written that prints an invoice for a small store. A copy of the invoice will be given to the customer and will display \n\n    A list of items purchased.\n    The quantity, unit price, and the total price for each item.\n    The amount due.\n\nThree candidate classes for this program are Invoice, Item, and ItemList, where an Item is a single item purchased. Which class \tis a reasonable choice to be responsible for the amountDue method, which returns the amount the customer must pay?\n\n    I \tItem\n    II \tItemList\n    III \tInvoice\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n III only\n\n", "\n I and II only\n\n", "\n II and III only       \n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember that the is-a relationship in Java is indicative of inheritance, and the has-a relationship is indicative of composition. Suppose A is a Car Class and b is a Vehicle class. This means that A is-a B because the Car class should inherit from the Vehicle class (Car is a type of vehicle). However, in this case, B has-a A is false. Simply thinking logically, a Vehicle does not HAVE a Car. Rather, the Vehicle class is a parent class to the Car class. Therefore, the choice concerning is-a and has-a relationships is false. \n", "wrong_ans_explanation": "Remember that the is-a relationship in Java is indicative of inheritance, and the has-a relationship is indicative of composition. Suppose A is a Car Class and b is a Vehicle class. This means that A is-a B because the Car class should inherit from the Vehicle class (Car is a type of vehicle). However, in this case, B has-a A is false. Simply thinking logically, a Vehicle does not HAVE a Car. Rather, the Vehicle class is a parent class to the Car class. Therefore, the choice concerning is-a and has-a relationships is false. \n", "question": "Which is a false statement about classes in object-oriented program design?                                      \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n If class A is independent, then none of its methods will have parameters that are objects of other classes.\n\n", "\n If class A has an instance variable whose type is another class, B, then A has-a B.\n\n", "\n If classes A and B are related such that A is-a B, then B has-a A.           \n\n", "\n If a class A is associated with another class, B, then A depends on B for its implementation.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In order for one class to properly inherit from another class, that class must be a type of the class its inheriting from. In other words, they must have an is-a relationship. The choice where Tire extends Circle does not follow this logic because although the Tire class will most likely use the Circle class as a property, a Tire is not a type of Circle, and therefore there is no need to inherit from it.\n", "wrong_ans_explanation": "In order for one class to properly inherit from another class, that class must be a type of the class its inheriting from. In other words, they must have an is-a relationship. The choice where Tire extends Circle does not follow this logic because although the Tire class will most likely use the Circle class as a property, a Tire is not a type of Circle, and therefore there is no need to inherit from it.\n", "question": "A Java program maintains a large database of vehicles and parts for a car dealership. Some of the classes in the program are Vehicle, Car, Truck, Tire, Circle, Steering Wheel, and AirBag. The declarations below show the relationships between classes. Which is a poor choice?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \tpublic class Vehicle\n    {\t\u2026\n        private Tire[] tires;\n        private SteeringWheel sw;\n        \u2026\n    }\n\n", "\n \tpublic class Tire extends Circle          \n    {\t\u2026\n        // inherits methods that compute circumference and center point\n    }\n\n", "\n \tpublic class Car extends Vehicle\n    {\t\u2026\n        // inherits private Tire[] tires from Vehicle class\n        // inherits private SteeringWheel sw from Vehicle class\n        \u2026\n    }\n\n", "\n \tpublic class Tire\n    {\t\u2026\n        private String rating;          // speed rating of tire\n        private Circle boundary;\n    }\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question is a bit obscure and most likely will not show up on the AP. However, this concept is useful when creating your own large programs and projects as a programmer. When starting a coding project, it is hard to know where to start first and how to connect differing aspects of your code to each other. Firstly, you must take care of independent classes because they do not need references from other classes. Then, classes that will be used to implement other classes should be made. Afterwards, superclasses and then subclasses must be made because they have the most references to other classes. \n", "wrong_ans_explanation": "This question is a bit obscure and most likely will not show up on the AP. However, this concept is useful when creating your own large programs and projects as a programmer. When starting a coding project, it is hard to know where to start first and how to connect differing aspects of your code to each other. Firstly, you must take care of independent classes because they do not need references from other classes. Then, classes that will be used to implement other classes should be made. Afterwards, superclasses and then subclasses must be made because they have the most references to other classes. \n", "question": "A Java programmer has completed a preliminary design for a large program. The programmer has developed a list of classes, determined the methods for each class, established the relationships between classes, and written an outline for each class. Which class(es) should be implemented first?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Any superclasses\n\n", "\n Any subclasses\n\n", "\n All collaborator classes (classes that will be used to implement other classes)\n\n", "\n All independent classes (classes that have no references to other classes)       \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Option I would obviously contain 4 elements each with value 0 because it is already explicitly initialized as so. Option II would also contain 4 elements each with value 0 because when arrays are initialized with a set length, all elements within the array are set to 0 by default. Finally, option III would also contain 4 elements with value 0 because it iterates over the array and sets each value to 0.\n", "wrong_ans_explanation": "Option I would obviously contain 4 elements each with value 0 because it is already explicitly initialized as so. Option II would also contain 4 elements each with value 0 because when arrays are initialized with a set length, all elements within the array are set to 0 by default. Finally, option III would also contain 4 elements with value 0 because it iterates over the array and sets each value to 0.\n", "question": "Which of the following correctly initializes an array a to contain four elements each with value 0?                            \n\n    I. int[] a = {0, 0, 0, 0};\n    II. int[] a = new int[4];\n    III. int[] a = new int[4];\n         for (int k = 0; k < a.length; k++)\n                a[k] = 0;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n III only\n\n", "\n I and III only\n\n", "\n II and III only\n\n", "\n I, II, and III        \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "You may think that the program segment will always work as intended. However, if a does not contain any negative integers, j will keep increasing until an IndexOutOfBounds Exception arises due to the while loop. Therefore, in order for the segment to work as intended, a must contain at least one negative integer.\n", "wrong_ans_explanation": "You may think that the program segment will always work as intended. However, if a does not contain any negative integers, j will keep increasing until an IndexOutOfBounds Exception arises due to the while loop. Therefore, in order for the segment to work as intended, a must contain at least one negative integer.\n", "question": "The following program segment is intended to find the index of the first negative integer in a[0] \u2026 a[N - 1], where a is an array of integers.\t\n\n    int j = 0;\n    while (a[j] >= 0)\n    {\n        j++;\n    }\n    loc = j;\n\nThis segment will work as intended\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n always\n\n", "\n never\n\n", "\n whenever a contains at least one negative integer.                \n\n", "\n whenever a contains at least one nonnegative integer.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "For this problem, it would be easy to take an example and then see what happens. Suppose a.length = 1. This means that the while loop will only execute once. In this one loop, k will equal one and a[1] will be added to the sum. However, since a only contains one element, a[1] would not exist, causing a run-time error to occur.\n", "wrong_ans_explanation": "For this problem, it would be easy to take an example and then see what happens. Suppose a.length = 1. This means that the while loop will only execute once. In this one loop, k will equal one and a[1] will be added to the sum. However, since a only contains one element, a[1] would not exist, causing a run-time error to occur.\n", "question": "Refer to the following code segment. You may assume that a is an array of int values.\n\n    int sum = a[0], k = 0;\n    while (k < a.length)\n    {\n        k++;\n        sum += a[k] ;\n    }\n\nWhich of the following will be the result of executing the segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n sum of a[0], a[1], \u2026, a[a.length - 1] will be stored in sum.\n\n", "\n sum of a[0], a[1], \u2026, a[a.length] will be stored in sum.\n\n", "\n An infinite loop will occur.\t\n\n", "\n A run-time error will occur.            \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "There are two ways to reach the solution for this problem. One way would be to take the example and manually run through each iteration of the for loop until it stops executing. However, since you are under a heavy time constraint on the AP, it would not be the wisest choice. The more time-efficient solution would be to understand the function of the code, and then apply it to the example. As we can see, a[c] is only being set to a[j] whenever a[j] is not equal to 0. Whenever a[j] != 0, a[c] is set to a[j] and then c increases. Since c begins from 0, we know that values are being changed from the beginning of the array. We also know that these values are being set to corresponding values in the array that are not equal to 0. Therefore, after the code executes, b = [6, 4, 2].\n", "wrong_ans_explanation": "There are two ways to reach the solution for this problem. One way would be to take the example and manually run through each iteration of the for loop until it stops executing. However, since you are under a heavy time constraint on the AP, it would not be the wisest choice. The more time-efficient solution would be to understand the function of the code, and then apply it to the example. As we can see, a[c] is only being set to a[j] whenever a[j] is not equal to 0. Whenever a[j] != 0, a[c] is set to a[j] and then c increases. Since c begins from 0, we know that values are being changed from the beginning of the array. We also know that these values are being set to corresponding values in the array that are not equal to 0. Therefore, after the code executes, b = [6, 4, 2].\n", "question": "Refer to the following code segment. You may assume that array a contains elements a[0], a[1], \u2026, a[N - 1], where N = a.length.\n\n    int c = 0;\n    for (int j = 0; j < N; j++)\n        if (a[j] != 0)\n        {\n            a[c] = a[j];\n            c++;\n        }\n    int[] b = new int[c];\n    for (int j = 0; j < c; j++)\n        b[j] = a[j];\n\nIf array a initially contains the elements 0, 6, 0, 4, 0, 0, 2 in this order, what will b contain after execution of the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6, 4, 2\t\t\t\t\n\n", "\n 0, 0, 0, 0, 6, 4, 2\t\n\n", "\n 6, 4, 2, 4, 0, 0, 2\n\n", "\n 0, 6, 0, 4, 0, 0, 2\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Suppose k = 3. The maximum amount of times that SMALL will be printed would be 2, considering that the if statement is true at all times. Furthermore, if k = 4, the maximum amount of times that SMALL would be printed is 3. Considering this pattern, we can express the maximum number of times that SMALL will be printed as k - 1.\n", "wrong_ans_explanation": "Suppose k = 3. The maximum amount of times that SMALL will be printed would be 2, considering that the if statement is true at all times. Furthermore, if k = 4, the maximum amount of times that SMALL would be printed is 3. Considering this pattern, we can express the maximum number of times that SMALL will be printed as k - 1.\n", "question": "Consider this program segment:\n\n    for (int j = 2; j <= k; j++)\n        if (a[j] < someVal)\n            System.out.print(\u201cSMALL\u201d);\n\nWhat is the maximum number of times that SMALL be printed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1\n\n", "\n k - 2\n\n", "\n k - 1              \n\n", "\n k\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "One very important functionality that ArrayLists have, but arrays don\u2019t, is their ability to automatically increase capacity or resize. Unlike arrays, when elements are added to an ArrayList, its capacity grows automatically. This is important for the example of text files because it would be time consuming to figure out the amount of lines in each text file and then change the size of the array accordingly. With ArrayLists, this problem will vanish because of their ability to resize.\n", "wrong_ans_explanation": "One very important functionality that ArrayLists have, but arrays don\u2019t, is their ability to automatically increase capacity or resize. Unlike arrays, when elements are added to an ArrayList, its capacity grows automatically. This is important for the example of text files because it would be time consuming to figure out the amount of lines in each text file and then change the size of the array accordingly. With ArrayLists, this problem will vanish because of their ability to resize.\n", "question": "Consider writing a program that reads the lines any text file into a sequential list of lines. Which of the following is a good reason to implement the list with an ArrayList of String objects rather than an array of String objects?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The get and set methods of ArrayList are more convenient than the [] notation for arrays.\n\n", "\n The size method of ArrayList provides instant access to the length of the list.\n\n", "\n If any particular text file is unexpectedly long, the ArrayList will automatically be resized. The array, by contrast, may go out of bounds.                \n\n", "\n None of choices\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Insertion, removal, and accessing of elements is most likely easier to perform in ArrayLists than arrays (or at least they require the same amount of effort). However, the main problem in this case is the massive amount of wrapper objects that would need to be unwrapped if you were to use ArrayLists. This would require much more computing power and would take more time. Therefore, it would be better to implement each list with an array of ints or doubles (primitive data types). \n", "wrong_ans_explanation": "Insertion, removal, and accessing of elements is most likely easier to perform in ArrayLists than arrays (or at least they require the same amount of effort). However, the main problem in this case is the massive amount of wrapper objects that would need to be unwrapped if you were to use ArrayLists. This would require much more computing power and would take more time. Therefore, it would be better to implement each list with an array of ints or doubles (primitive data types). \n", "question": "Consider writing a program that produces statistics for long lists of numerical data. Which of the following is the best reason to implement each list with an array of int (or double), rather than an ArrayList of Integer (or Double) objects? \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n An array of primitive number types is more efficient to manipulate than an ArrayList of wrapper objects that contain numbers.         \n\n\n", "\n Insertion of new elements into a list is easier to code for an array than for an ArrayList.\n\n", "\n Removal of elements from a list is easier to code for an array than for an ArrayList.\n\n", "\n Accessing individual elements in the middle of a list is easier for an array than for an ArrayList.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Option I will not cause an error because the declaration properly instantiates a List Object of Strings. Option III will also not cause an error because ArrayLists are a subtype of the List interface, and therefore can be instantiated the same way as Lists. However, option II will cause an error because when instantiating a List or ArrayList of primitive types, a wrapper object must be used. In this case, the wrapper object Integer must be used or else an error would occur.\n", "wrong_ans_explanation": "Option I will not cause an error because the declaration properly instantiates a List Object of Strings. Option III will also not cause an error because ArrayLists are a subtype of the List interface, and therefore can be instantiated the same way as Lists. However, option II will cause an error because when instantiating a List or ArrayList of primitive types, a wrapper object must be used. In this case, the wrapper object Integer must be used or else an error would occur.\n", "question": "Which declaration will cause an error?\n\n    I. List<String> strList = new ArrayList<String>();\n    II. List<int> intList = new ArrayList<int>();\n    III. ArrayList<String> compList = new ArrayList<String>();\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only       \n\n", "\n III only\n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "strList.add(c) will not cause an error because strList is defined as a list of String objects, and c is a String. strList.add(o.toString()) will also not cause an error because the toString() method converts o into a String. strList.add(c + 8) will not cause an error because string concatenation will occur and the 8 will automatically be converted to a string. However, strList.add(o + 8) will cause an error because an Integer cannot be added to a List of Strings.\n", "wrong_ans_explanation": "strList.add(c) will not cause an error because strList is defined as a list of String objects, and c is a String. strList.add(o.toString()) will also not cause an error because the toString() method converts o into a String. strList.add(c + 8) will not cause an error because string concatenation will occur and the 8 will automatically be converted to a string. However, strList.add(o + 8) will cause an error because an Integer cannot be added to a List of Strings.\n", "question": "Consider these declarations:\n\n    List<String> strList = new ArrayList<String>();\n    String c = \u201c \u201c;\n    Integer o = new Integer(5);\n\nWhich statement will cause an error?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n strList.add( c );\n\n", "\n strList.add(o.toString());\n\n", "\n strList.add(c + 8);\n\n", "\n strList.add(o + 8);              \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "For most of the choices, an object is attempting to be instantiated while altering or accessing some part of the ArrayList. This will definitely cause an error because an object cannot be instantiated while simultaneously setting it to a functionality. The only option that would not cause an error is list.add(6, 9) because it is only adding the element 9 to the index 6.\n", "wrong_ans_explanation": "For most of the choices, an object is attempting to be instantiated while altering or accessing some part of the ArrayList. This will definitely cause an error because an object cannot be instantiated while simultaneously setting it to a functionality. The only option that would not cause an error is list.add(6, 9) because it is only adding the element 9 to the index 6.\n", "question": "Let list be an ArrayList<Integer> containing these elements:\n\n    2 5 7 6 0 1\n\nWhich of the following statements would not cause an error to occur? Assume that each statement applies to the given list, independent of the other statements.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Object o = list.get(6);\n\n", "\n Object x = list.remove(6);\n\n", "\n list.add(6, 9);                         \n\n", "\n Object y = list.set(6, 8);\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the list contains 3 elements, there will be 3 iterations of the for loop. In the first iteration, j = 0 and 0 is being added to the first index. Additionally, the 0th index is being set to 2. Therefore, after the first iteration, list would be:\n\n2 0 1 8\n\nIn the second iteration, 1 is added to the 2nd index and 3 is being set to the 1st index. After the second iteration, list would be:\n\n2 3 1 1 8\n\nIn the third iteration, 2 is being added to the 3rd index and 4 is being set to the 2nd index. Therefore, after executing the code segment, list would be:\n\n2 3 4 2 1 8\n", "wrong_ans_explanation": "Since the list contains 3 elements, there will be 3 iterations of the for loop. In the first iteration, j = 0 and 0 is being added to the first index. Additionally, the 0th index is being set to 2. Therefore, after the first iteration, list would be:\n\n2 0 1 8\n\nIn the second iteration, 1 is added to the 2nd index and 3 is being set to the 1st index. After the second iteration, list would be:\n\n2 3 1 1 8\n\nIn the third iteration, 2 is being added to the 3rd index and 4 is being set to the 2nd index. Therefore, after executing the code segment, list would be:\n\n2 3 4 2 1 8\n", "question": "Consider the following code segment, applied to list, an ArrayList of Integer of values.\n\n    int len = list.size();\n    for (int j = 0; j < len; j++)\n    {\n        list.add(j + 1, new Integer(j));\n        Object x = list.set(j, new Integer(j + 2));\n    }\n\nIf list is initially 6 1 8 , what will be following execution of the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2 3 4 2 1 8       \n\n", "\n 2 3 4 0 1 2\n\n", "\n 2 3 4 6 1 8\n\n", "\n 2 3 4 6 2 2 0 1 8\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Recursive algorithm is an algorthim which calls itself with smaller or simpler input values. Therefore, I and III are the basic definition of recursive algorithm. Moreover, \u201cdivide-and conquer\u201d algorithm is based on recursively breaking down the problem into smaller/simpler problems. Hence, II is also true.  \n", "wrong_ans_explanation": "Recursive algorithm is an algorthim which calls itself with smaller or simpler input values. Therefore, I and III are the basic definition of recursive algorithm. Moreover, \u201cdivide-and conquer\u201d algorithm is based on recursively breaking down the problem into smaller/simpler problems. Hence, II is also true.  \n", "question": "Which of the following statements about recursion are true?                                                       \n\n    I. Every recursive algorithm can be written iteratively.\n    II. Tail recursion is always used in \u201cdivide-and-conquer\u201d algorithms.\n    III. In a recursive definition, a process is defined in terms of a simpler case of itself.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only       \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Option I would not perform its desired task because the method would keep adding n - 1 to n infinitely, causing an infinite loop to occur. Option III would also not work because although the if-else statement is the right way to begin, sum(n) in the else statement would cause an infinite recursion (n is never decreasing). Finally, option II would work because n is recursively being added to n - 1 until n = 1, at which point 1 is returned and the sum is calculated.\n", "wrong_ans_explanation": "Option I would not perform its desired task because the method would keep adding n - 1 to n infinitely, causing an infinite loop to occur. Option III would also not work because although the if-else statement is the right way to begin, sum(n) in the else statement would cause an infinite recursion (n is never decreasing). Finally, option II would work because n is recursively being added to n - 1 until n = 1, at which point 1 is returned and the sum is calculated.\n", "question": "Which of the following, when used as the /* body */ of method add, will enable that method to compute 1 + 2 + \u2026 + n correctly for any n > 0?\n\n    // param n a positive integer\n    // return 1 + 2 + \u2026 + n\n    public int add(int n)\n    {\n        /* body */\n    }\n\n    I. \treturn n + add(n - 1);\n    II. \tif (n == 1)\n            return 1;\n        else\n            return n + sum(n - 1);\n    III. \tif (n == 1)\n            return 1;\n        else\n            return sum(n) + sum(n - 1);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only          \n\n", "\n III only\n\n", "\n I and II only \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This method will never terminate without error because although s is printed when s.length() < 15, the method never returns anything, and therefore, the method continues to recur until there is an infinite loop.\n", "wrong_ans_explanation": "This method will never terminate without error because although s is printed when s.length() < 15, the method never returns anything, and therefore, the method continues to recur until there is an infinite loop.\n", "question": "Refer to the method recur:\n\n    public void recur(String s)\n    {\n        if (s.length() < 15)\n            System.out.println(s);\n        recur(s + \u201c*\u201d);\n    }\n\nWhen will method recur terminate without error?\t\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Only when an empty string is input\n\n", "\n Only when the length of the string is less than 15\n\n", "\n For all string inputs\n\n", "\n For no string inputs             \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This method will always terminate without error because the length of s only increases and recursion only occurs when s.length() < 15. If s.length() is initially over 15, no error would occur because recursion will not occur. If s.length() is initially under 15, then s.length() will keep increasing until s.length() = 15, at which point the method will terminate without error. \n", "wrong_ans_explanation": "This method will always terminate without error because the length of s only increases and recursion only occurs when s.length() < 15. If s.length() is initially over 15, no error would occur because recursion will not occur. If s.length() is initially under 15, then s.length() will keep increasing until s.length() = 15, at which point the method will terminate without error. \n", "question": "Refer to the method recur:\n\n    public void recur(String s)\n    {\n        if (s.length() < 15)\n        {\n            System.out.println(s);\n            recur(s + \u201c*\u201d);\n        }\n    }\n\nWhen will method recur terminate without error?\t\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Only when an empty string is input\n\n", "\n Only when the length of the string is less than 15\n\n", "\n For all string inputs\t\t\n\n", "\n For no string inputs            \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The pattern for this recursive method is pretty simple. Every time k is decreased by 1, 2 is multiplied by it until k == 1. Following this pattern, it can be seen that the method returns 2^k. In other words, 2 is multiplied by itself k times. Therefore, when k is 5, mystery returns 2^5 = 32.\n", "wrong_ans_explanation": "The pattern for this recursive method is pretty simple. Every time k is decreased by 1, 2 is multiplied by it until k == 1. Following this pattern, it can be seen that the method returns 2^k. In other words, 2 is multiplied by itself k times. Therefore, when k is 5, mystery returns 2^5 = 32.\n", "question": "Refer to the method mystery:\n\n    public int mystery(int k)\n    {\n        if (k == 1)\n            return 2;\n        else\n            return 2 * result(k - 1);\n    }\n\nWhat value does result(5) return?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 64\n\n", "\n 32           \n\n", "\n 16\n\n", "\n 8\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us take k as 2. Since k != 1, the else statement will be called, and 2 * mystery(1) will be returned. Since mystery(1) = 1, 2 will be returned. Including the initial call, mystery was called twice. Therefore, mystery is called k times.\n", "wrong_ans_explanation": "Let us take k as 2. Since k != 1, the else statement will be called, and 2 * mystery(1) will be returned. Since mystery(1) = 1, 2 will be returned. Including the initial call, mystery was called twice. Therefore, mystery is called k times.\n", "question": "Refer to the method mystery:\n\n    public int mystery(int k)\n    {\n        if (k == 1)\n            return 2;\n        else\n            return 2 * result(k - 1);\n    }\n\nIf k > 0, how many times will mystery be called to evaluate mystery(k) (including the initial call)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2k\n\n", "\n 2\n\n", "\n k          \n\n", "\n 2^n\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "In this recursive method, a is the variable that is decreasing after every recursion. Since a is 3, the else statement will be called twice and the if statement will be called once. Keeping this in mind, mystery will return c + c + b = 14.\n\nRationale: The mystery method must be called to everything in order form least to greatest. Additionally, in order to procure the highest value number from the group\n", "wrong_ans_explanation": "In this recursive method, a is the variable that is decreasing after every recursion. Since a is 3, the else statement will be called twice and the if statement will be called once. Keeping this in mind, mystery will return c + c + b = 14.\n\nRationale: The mystery method must be called to everything in order form least to greatest. Additionally, in order to procure the highest value number from the group\n", "question": "Refer to the method mystery:\n\n    public int mystery( int a, int b, int c )\n    {\n        if (a == 1)\n            return b;\n        else\n            return c + mystery( a - 1, b, c );\n    }\n\nWhat value is returned by the call mystery(3, 2, 6)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 20\n\n", "\n 14             \n\n", "\n 10\n\n", "\n 8\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "As can be seen, the method terminates when b = a. Essentially, the larger of b and a is subtracted by the other recursively until b and a are equal. Firstly, since b > a, something(6, 8) results in something(6, 2). This, in turn, results in something(4, 2) and finally something(2, 2). Therefore, 2 is returned.\n", "wrong_ans_explanation": "As can be seen, the method terminates when b = a. Essentially, the larger of b and a is subtracted by the other recursively until b and a are equal. Firstly, since b > a, something(6, 8) results in something(6, 2). This, in turn, results in something(4, 2) and finally something(2, 2). Therefore, 2 is returned.\n", "question": "Refer to the method something:\n\n    public int something(int e, int f)\n    {\n        if (f == e)\n            return e;\n        else\n            if (f > e)\n                return something(e, f - e);\n            else\n                return something(e - f, f);\n    }\n\nWhat value is returned by the call something(6, 8)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8\n\n", "\n 4\n\n", "\n 3\n\n", "\n 2          \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "As can be seen, every time print is called, the parameter becomes one shorter, omitting its first character. This eventually results in many calls of the print method, all bundled within each other. The most bundled print call\u2019s parameter is the last character of the original string s. Since s.substring(0, 1) is printed after every call of print(s), when the print methods start unwrapping, the string will be printed starting from the last character, resulting in the reverse order of the string s.\n", "wrong_ans_explanation": "As can be seen, every time print is called, the parameter becomes one shorter, omitting its first character. This eventually results in many calls of the print method, all bundled within each other. The most bundled print call\u2019s parameter is the last character of the original string s. Since s.substring(0, 1) is printed after every call of print(s), when the print methods start unwrapping, the string will be printed starting from the last character, resulting in the reverse order of the string s.\n", "question": "Which best describes what the print method below does?\n\n    public void print(String s)\n    {\n        if (s.length() > 0)\n        {\n            print(s.substring(1));\n            Sytem.out.print(s.substring(0, 1));\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n It prints string s.\n\n", "\n It prints string s in reverse order.         \n\n", "\n It prints only the first character of the string s.\n\n", "\n It prints only the last character of the string s.\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question requires lots of thought, so lets break it down. If something(1) was called, what would happen? Well, recursion will not occur because k would be 0 at that point. However, 1 would still be printed. When something(2) is called, something(1) is called, which prints 1, then 2 is printed, and finally 1 is printed again because of the call to something(1). Finally, when something(3) is called, something(2) is called first, which prints 121, then 3 is printed, and finally something(2) is called again. Therefore, the call something(3) prints:\n\n1213121\n", "wrong_ans_explanation": "This question requires lots of thought, so lets break it down. If something(1) was called, what would happen? Well, recursion will not occur because k would be 0 at that point. However, 1 would still be printed. When something(2) is called, something(1) is called, which prints 1, then 2 is printed, and finally 1 is printed again because of the call to something(1). Finally, when something(3) is called, something(2) is called first, which prints 121, then 3 is printed, and finally something(2) is called again. Therefore, the call something(3) prints:\n\n1213121\n", "question": "Consider the following method.\n\n    public void something(int k)\n    {\n        if (k > 0)\n        {\n            something(k - 1);\n            System.out.print(k);\n            something(k - 1);\n        }\n    }\n\nWhat would be the output following the call something(3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1121213\n\n", "\n 1123211\n\n", "\n 1213121        \n\n", "\n 1211213\n\n"]},  {"points": "1", "Answer": "0", "correct_ans_explanation": "To simplify the problem, we can count the amount of times the parameter of the mystery method becomes less than 0 because 2 is added every time this occurs. When mystery(3) is called, mystery is called twice more, with k being 2 and 0. Let\u2019s focus on k = 0. When this happens, k now becomes -1 and -3, which means k has gone below 0 twice. When k is 2, we can see that k will branch off into k = 1 and k = -1. k = 1 will branch off into k = 0 and k = -2. k = 0 will then branch off into k = -1 and k = -3. This results in a total of 6 times k goes below 0. Therefore, 2 is added 6 times, which results in 12 being returned by mystery(3).\n", "wrong_ans_explanation": "To simplify the problem, we can count the amount of times the parameter of the mystery method becomes less than 0 because 2 is added every time this occurs. When mystery(3) is called, mystery is called twice more, with k being 2 and 0. Let\u2019s focus on k = 0. When this happens, k now becomes -1 and -3, which means k has gone below 0 twice. When k is 2, we can see that k will branch off into k = 1 and k = -1. k = 1 will branch off into k = 0 and k = -2. k = 0 will then branch off into k = -1 and k = -3. This results in a total of 6 times k goes below 0. Therefore, 2 is added 6 times, which results in 12 being returned by mystery(3).\n", "question": "Refer to the following recursive method.\n\n    public int mystery(int k)\n    {\n        if (k < 0)\n            return 2;\n        else\n            return mystery(k - 1) + mystery(k - 3);\n    }\n\nWhat value is returned by the call mystery(3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 12        \n\n", "\n 10\n\n", "\n 8\n\n", "\n 6\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "For these types of problems, we just have to keep track of the multiple branches of method calls. k = 5 branches off into k = 4 and k = 3. k = 3 branches off into k = 2 and k = 1. Therefore, something(3) = (2 * 2) - (2 * 1) = 2. We can now come back to k = 4, which branches off into k = 3 and k = 2. Since we know that something(3) = 2 and something(2) = 4, something(4) = 2 - 4 = -2. Finally, something(5) = something(4) - something(3) = -2 - 2 = -4. \n", "wrong_ans_explanation": "For these types of problems, we just have to keep track of the multiple branches of method calls. k = 5 branches off into k = 4 and k = 3. k = 3 branches off into k = 2 and k = 1. Therefore, something(3) = (2 * 2) - (2 * 1) = 2. We can now come back to k = 4, which branches off into k = 3 and k = 2. Since we know that something(3) = 2 and something(2) = 4, something(4) = 2 - 4 = -2. Finally, something(5) = something(4) - something(3) = -2 - 2 = -4. \n", "question": "Refer to the method something:\n\n    // param k a positive integer\n    public int something(int k)\n    {\n        if (k == 1 || k == 2)\n            return 2 * k;\n        else\n            return something(k - 1) - something(k - 2);\n    }\n\nWhat will be returned by something(5)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 4\n\n", "\n 2\n\n", "\n -2\n\n", "\n -4            \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Let us first consider all the calls to something from something(3). Including something(3), something is called 3 times because something(1) and something(2) is called. something(4) results in 5 calls because something(2) and something(3) is called. something(5) is called 9 times because something(4) and something(3) is called. Therefore, including the call to itself, something(6) will be called 15 times because something(4) and something(5) is called. \n", "wrong_ans_explanation": "Let us first consider all the calls to something from something(3). Including something(3), something is called 3 times because something(1) and something(2) is called. something(4) results in 5 calls because something(2) and something(3) is called. something(5) is called 9 times because something(4) and something(3) is called. Therefore, including the call to itself, something(6) will be called 15 times because something(4) and something(5) is called. \n", "question": "Refer to the method something:\n\n    // param k a positive integer\n    public int something(int k)\n    {\n        if (k == 1 || k == 2)\n            return 2 * k;\n        else\n            return something(k - 1) - something(k - 2);\n    }\n\nFor the method call something(6), how many calls to something will be made, including the original call?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 7\n\n", "\n 11\n\n", "\n 15        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question requires you to follow the path of the different calls that are being made. This can all be summed up into one large expression\n\na(5, 3) = 5 + b(4, 3) = 5 + 4 + a(2, 3) = 9 + 2 + b(1, 3) = 11 + 1 + 3 = 15.\n", "wrong_ans_explanation": "This question requires you to follow the path of the different calls that are being made. This can all be summed up into one large expression\n\na(5, 3) = 5 + b(4, 3) = 5 + 4 + a(2, 3) = 9 + 2 + b(1, 3) = 11 + 1 + 3 = 15.\n", "question": "This question refers to methods a and b that are in the same class:\n\n    public int a(int x, int y)\n    {\n        if (x == y)\n            return y;\n        else\n            return x + b(x - 1, y);\n    }\n\n    public int b( int c, int d )\n    {\n        if ( c < d )\n            return c + d;\n        else\n            return c + a( c - 2, d );\n    }\n\nWhat value will be returned by a call to a(5, 3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 7\n\n", "\n 12\n\n", "\n 15         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "For these recursion questions, it is most likely best to write out the full expression unless there is a pretty obvious pattern. Here is the expression:\n\nint z = f(f(3) + f(4)) = f(3 + 4 * f(3)) = f(3 + 4 * 3) = f(15) = 15 * f(14)\u2026\n\nAs can be seen once f(15) is called, there is a pattern. Every time a decreases by 1, the result is multiplied by a until a = 3. Therefore, f(15) will return 15 * 14 * 13 * \u2026 * 4 * 3. This is equivalent to (15!) / (2!).\n", "wrong_ans_explanation": "For these recursion questions, it is most likely best to write out the full expression unless there is a pretty obvious pattern. Here is the expression:\n\nint z = f(f(3) + f(4)) = f(3 + 4 * f(3)) = f(3 + 4 * 3) = f(15) = 15 * f(14)\u2026\n\nAs can be seen once f(15) is called, there is a pattern. Every time a decreases by 1, the result is multiplied by a until a = 3. Therefore, f(15) will return 15 * 14 * 13 * \u2026 * 4 * 3. This is equivalent to (15!) / (2!).\n", "question": "Consider method f:\n\n    public int f( int a ) \n     {\n        if (a == 1 || a == 3)\n            return a;\n        else\n            return a * f(a - 1);\n    }\n\nAssuming no possibility of integer overflow, what will be the value of z after execution of the following statement?\n\n    int z = f(f(3) + f(4));\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n (15!)/(2!)         \n\n", "\n 3! + 4!\n\n", "\n (7!)!\n\n", "\n (3! + 4!)!\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Algorithm design is generally a trade-off between time and space. Algorithms with a low space complexity may require more time, and algorithms with a low time complexity may require more space. Moreover, for some algorithms like merge sort, space required is linearly dependent of array size. Therefore, you have to think of all three factors before deciding a sorting algorithm. \n", "wrong_ans_explanation": "Algorithm design is generally a trade-off between time and space. Algorithms with a low space complexity may require more time, and algorithms with a low time complexity may require more space. Moreover, for some algorithms like merge sort, space required is linearly dependent of array size. Therefore, you have to think of all three factors before deciding a sorting algorithm. \n", "question": "The decision to choose a particular sorting algorithm should be made based on     \n\n    I. Run-time efficiency of the sort\n    II. Size of the array\n    III. Space efficiency of the algorithm\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In this code fragment, the while loop serves to check if value is in the array. 2 things must be checked if the while loop is to keep running. Firstly, j must be less than n so as to avoid an IndexOutOfBounds Exception. Secondly, value must not be equal to a[j] because when value is equal to a[j], the program should be able to break out of the while loop and return j in the final else statement. Additionally, there must be an and operand connecting these two conditions because both of these conditions must be true before increasing j.\n", "wrong_ans_explanation": "In this code fragment, the while loop serves to check if value is in the array. 2 things must be checked if the while loop is to keep running. Firstly, j must be less than n so as to avoid an IndexOutOfBounds Exception. Secondly, value must not be equal to a[j] because when value is equal to a[j], the program should be able to break out of the while loop and return j in the final else statement. Additionally, there must be an and operand connecting these two conditions because both of these conditions must be true before increasing j.\n", "question": "The following code fragment does a sequential search to determine whether a given integer, value, is stored in an array a[0] \u2026 a[n - 1].\n\n    int j = 0;\n    while ( /* boolean expression */ )\n    {\n        j++;\n    }\n    if (j == n)\n        return -1;        // value not found\n    else\n        return j;\t\t// value found at location j\n\nWhich of the following should replace /* boolean expression */ so that the algorithm works as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n value != a[j]\n\n", "\n j < n && value == a[j]\n\n", "\n j < n || value != a[j]\n\n", "\n j < n && value != a[j]          \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: Sequential search does not need an ordered set of data. Binary searches, on the other hand, require the data to be ordered in some form or the other.\n", "wrong_ans_explanation": "Remember: Sequential search does not need an ordered set of data. Binary searches, on the other hand, require the data to be ordered in some form or the other.\n", "question": "A feature of data that is used for a binary search but not necessarily used for a sequential search is\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n length of list\n\n", "\n type of data\n\n", "\n order of data        \n\n", "\n smallest value in the list\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Inserting a new element is equally efficient using sorted or unsorted arrays. Computing the mean of elements is also equally efficient for sorted and unsortedArray because all the elements need to added up and then divided by the number of elements. Having a sorted array does not provide any advantages in this case. However, searching for a given element is much more efficient for sortedArray because a binary search can be used rather than a sequential search. Therefore, only option II is correct.\n", "wrong_ans_explanation": "Inserting a new element is equally efficient using sorted or unsorted arrays. Computing the mean of elements is also equally efficient for sorted and unsortedArray because all the elements need to added up and then divided by the number of elements. Having a sorted array does not provide any advantages in this case. However, searching for a given element is much more efficient for sortedArray because a binary search can be used rather than a sequential search. Therefore, only option II is correct.\n", "question": "Array unsortedArray contains an unsorted list of integers. Array sortedArray contains a sorted list of integers. Which of the following operations is more efficient for sortedArray than unsortedArray? Assume the most efficient algorithms are used.\n\n    I. Inserting a new element\n    II. Searching for a given element\n    III. Computing the mean of the elements.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only         \n\n", "\n III only\n\n", "\n I and II only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "A binary search starts from the middle position of the array and then compares it to the target value. If x was in the middle position, a binary search would use fewer comparisons. If x was close to the end of the array, the binary search would use fewer comparisons again because this algorithm starts from the beginning to the end while binary search starts fro the middle. If x was close to the beginning of the array, the algorithm would use fewer comparisons because the algorithm starts from the beginning of the array. \n", "wrong_ans_explanation": "A binary search starts from the middle position of the array and then compares it to the target value. If x was in the middle position, a binary search would use fewer comparisons. If x was close to the end of the array, the binary search would use fewer comparisons again because this algorithm starts from the beginning to the end while binary search starts from the middle. If x was close to the beginning of the array, the algorithm would use fewer comparisons because the algorithm starts from the beginning of the array. \n", "question": "An algorithm for searching a large sorted array for a specific value x compares every third item in the array to x until it finds one that is greater than or equal to x. When a larger value is found, the algorithm compares x to the previous two items. If the array is sorted in increasing order, which of the following describes all cases when this algorithm uses fewer comparisons to find x than would a binary search?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n When x is in the middle position of the array\n\n", "\n When x is very close to the end of the array\n\n", "\n When x is very close to the beginning of the array         \n\n", "\n When x is not in the array\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since a[0] is greater than every other value in the array, a[0] must be the largest value in the array. \n", "wrong_ans_explanation": "Since a[0] is greater than every other value in the array, a[0] must be the largest value in the array. \n", "question": "Assume that a[0] \u2026 a[N - 1] is an array of N positive integers and that the following assertion is true:\n\n    a[0] > a[k] for all k such that 0 < k < N\n\nWhich of the following must be true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The array sorted in ascending order.\n\n", "\n The array is sorted in descending order.\n\n", "\n a[0] holds the smallest value in the array.\n\n", "\n a[0] holds the largest value in the array.            \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "If k does not exist in the array, the while loop will keep iterating and index will keep increasing, resulting in an infinite loop.\n", "wrong_ans_explanation": "If k does not exist in the array, the while loop will keep iterating and index will keep increasing, resulting in an infinite loop.\n", "question": "The following code is designed to set index to the location of the first occurrence of k in array a and set index to -1 if key is not in a.\n\n    index = 0;\n    while (a[index] != k)\n        index++;\n    if (a[index] != k)\n        index = -1;\n\nIn which case will this program definitely fail to perform the task described?\t\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n When k is the first element of the array\n\n", "\n When k is the last element of the array\n\n", "\n When k is not in the array              \n\n", "\n When k equals 0\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since a.length = 8, high = 7, which means that mid = (7 + 0) / 2 = 3 (round down because it is an integer). Because[3] < 27, low = 4. This means that the search interval after the first pass through the while loop is a[4] \u2026 a[7]. \n", "wrong_ans_explanation": "Since a.length = 8, high = 7, which means that mid = (7 + 0) / 2 = 3 (round down because it is an integer). Because[3] < 27, low = 4. This means that the search interval after the first pass through the while loop is a[4] \u2026 a[7]. \n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nTo find the k value 27, the search interval after the first pass through the while loop will be\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a[0] \u2026 a[7]\n\n", "\n a[2] \u2026 a[6]\n\n", "\n a[4] \u2026 a[7]           \n\n", "\n a[6] \u2026 a[7]\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since a.length = 8, the first iteration will have mid = (0 + 7) / 2 = 3. Because a[3] < 27, low = 4. In the second iteration, mid = (4 + 7) / 2 = 5. Since a[5] < 27, low = 6. In the third iteration, mid = (6 + 7) / 2 = 6. Since a[6] > 27, high = 5. Due to the fact that low is now greater than high, the while loop will end and -1 will be returned. Therefore, 3 iterations will be required to determine that 27 is not in the list.\n", "wrong_ans_explanation": "Since a.length = 8, the first iteration will have mid = (0 + 7) / 2 = 3. Because a[3] < 27, low = 4. In the second iteration, mid = (4 + 7) / 2 = 5. Since a[5] < 27, low = 6. In the third iteration, mid = (6 + 7) / 2 = 6. Since a[6] > 27, high = 5. Due to the fact that low is now greater than high, the while loop will end and -1 will be returned. Therefore, 3 iterations will be required to determine that 27 is not in the list.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nHow many iterations will be required to determine that 27 is not in the list?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1\n\n", "\n 3         \n\n", "\n 8\n\n", "\n 27\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "As can be seen, the binarySearch is searching for 4, which is stored in a[0]. Since the program returns the index of k, the value of z will be 0.\n", "wrong_ans_explanation": "As can be seen, the binarySearch is searching for 4, which is stored in a[0]. Since the program returns the index of k, the value of z will be 0.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nWhat will be stored in z after executing the following?\n\n    int z = binarySearch(4);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 20\n\n", "\n 7\n\n", "\n 4\n\n", "\n 0           \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the elements at the beginning and end of the array, i.e. a[0] and a[7], do not have elements before and after it, the only way to perform a binary search on these elements without error would be to have low and high equal that index. However, if low cannot be equal to high, then values such as a[0] = 4 cannot be found.\n", "wrong_ans_explanation": "Since the elements at the beginning and end of the array, i.e. a[0] and a[7], do not have elements before and after it, the only way to perform a binary search on these elements without error would be to have low and high equal that index. However, if low cannot be equal to high, then values such as a[0] = 4 cannot be found.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n    a[0]\t\ta[1] \t\ta[2]\t\ta[3]\t\ta[4]\t\ta[5]\t\ta[6]\t\ta[7]\n      4\t\t    7               9              11            20          24              30            41\n\nIf the test for the while loop is changed to \n\n    while (low < high)\n\nthe binarySearch method does not work as intended. Which value in the given list will not be found?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 4          \n\n", "\n 7\n\n", "\n 11\n\n", "\n 24\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The answer that would usually first come to mind is:\n\na[low] <= k <= a[high]\n\nHowever, considering that we are looking at the values following every iteration of the while loop, k could also not be part of the array, which would make the previous statement false. Additionally, the target value, k, could be equal to a[mid]. Therefore, this assertion will be true following every iteration of the while loop:\n\nk = a[mid], or a[low] <= k <= a[high], or k is not in array a\n", "wrong_ans_explanation": "The answer that would usually first come to mind is:\n\na[low] <= k <= a[high]\n\nHowever, considering that we are looking at the values following every iteration of the while loop, k could also not be part of the array, which would make the previous statement false. Additionally, the target value, k, could be equal to a[mid]. Therefore, this assertion will be true following every iteration of the while loop:\n\nk = a[mid], or a[low] <= k <= a[high], or k is not in array a\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nFor binarySearch, which of the following assertions will be true following every iteration of the while loop?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n low <= mid <= high\n\n", "\n a[low] <= k <= a[high]\n\n", "\n k = a[mid], or a[low] <= k <= a[high]\n\n", "\n k = a[mid], or a[low] <= k <= a[high], or k is not in array a.             \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Although 600 elements may seem like a lot, we can calculate the maximum number of iterations pretty easily. Here is a step-by-step process:\n\n(0 + 600) / 2 = 300\n(300 + 600) / 2 = 450\n(450 + 600) / 2 = 525\n(525 + 600) / 2 = 562\n(562 + 600) / 2 = 581\n(581 + 600) / 2 = 590\n(590 + 600) / 2 = 595\n(595 + 600) / 2 = 597\n(597 + 600) / 2 = 598\n(598 + 600) / 2 = 599\n\nTherefore, the maximum number of iterations of the algorithm would be 10.\n", "wrong_ans_explanation": "Although 600 elements may seem like a lot, we can calculate the maximum number of iterations pretty easily. Here is a step-by-step process:\n\n(0 + 600) / 2 = 300\n(300 + 600) / 2 = 450\n(450 + 600) / 2 = 525\n(525 + 600) / 2 = 562\n(562 + 600) / 2 = 581\n(581 + 600) / 2 = 590\n(590 + 600) / 2 = 595\n(595 + 600) / 2 = 597\n(597 + 600) / 2 = 598\n(598 + 600) / 2 = 599\n\nTherefore, the maximum number of iterations of the algorithm would be 10.\n", "question": "A binary search is to be performed on an array with 600 elements. In the worst case, which of the following best approximates the number of iterations of the algorithm?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 10           \n\n", "\n 100\n\n", "\n 300\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The worst case scenario for insertion sort would be a list sorted in reverse order because it would take the most iterations, and therefore the most computing power, to swap the elements in reverse order back into their sorted order by manually inserting each element back into their correct place. \n", "wrong_ans_explanation": "The worst case scenario for insertion sort would be a list sorted in reverse order because it would take the most iterations, and therefore the most computing power, to swap the elements in reverse order back into their sorted order by manually inserting each element back into their correct place. \n", "question": "A worst case scenario for insertion sort would be \n\n    I. A list in correct sorted order.\n    II. A list sorted in reverse order.\n    III. A list in random order.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only            \n\n", "\n III only\n\n", "\n I and II only\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "U do not need to manually figure out the maximum number of times that a binary search algorithm will execute its main comparison loop. Instead, you can just calculate a few iterations:\n\n(0 + 1000000) = 500000\n(500000 + 1000000) = 750000\n(750000 + 1000000) = 875000\n\u2026\n\nSince we are already at 875,000 / 1,000,000, it is quite obvious that it will take more than 6 iterations but less than 100 iterations. Therefore, we can safely say that it will take a maximum of about 20 iterations. \n", "wrong_ans_explanation": "U do not need to manually figure out the maximum number of times that a binary search algorithm will execute its main comparison loop. Instead, you can just calculate a few iterations:\n\n(0 + 1000000) = 500000\n(500000 + 1000000) = 750000\n(750000 + 1000000) = 875000\n\u2026\n\nSince we are already at 875,000 / 1,000,000, it is quite obvious that it will take more than 6 iterations but less than 100 iterations. Therefore, we can safely say that it will take a maximum of about 20 iterations. \n", "question": "Consider a binary search algorithm to search an ordered list of numbers. Which of the following choices is closest to the maximum number of times that such an algorithm will execute its main comparison loop when searching a list of 1 million numbers?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 20        \n\n", "\n 100\n\n", "\n 120\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "A binary search takes much less average run time than a sequential search when the data set is sorted. Additionally, search tasks usually take a shorter amount of time than sorting tasks. Therefore, we can conclude that the binary search has the least time, then sequential search, and the insertion sort will require the greatest time. The correct order is II, I, III.\n", "wrong_ans_explanation": "A binary search takes much less average run time than a sequential search when the data set is sorted. Additionally, search tasks usually take a shorter amount of time than sorting tasks. Therefore, we can conclude that the binary search has the least time, then sequential search, and the insertion sort will require the greatest time. The correct order is II, I, III.\n", "question": "Consider these three tasks:\n\n    I. A sequential search of an array of n names\n    II. A binary search of an array of n names in alphabetical order\n    III. An insertion sort into alphabetical order of an array of n names that are initially in random order\n\nFor large n, which of the following lists these tasks in order (from least to greatest) of their average case run times?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II, I, III          \n\n", "\n II, III, I\n\n", "\n III, I, II\n\n", "\n I, II, III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The primary reason mergesort is considered a better sorting algorithm is because it runs faster than insertion sort and other sorting methods. However, it requires much more code and more storage space than insertion sort. Therefore, III only is the correct answer.\n", "wrong_ans_explanation": "The primary reason mergesort is considered a better sorting algorithm is because it runs faster than insertion sort and other sorting methods. However, it requires much more code and more storage space than insertion sort. Therefore, III only is the correct answer.\n", "question": "Which of the following is a valid reason why merge sort is a better sorting algorithm than insertion sort for sorting long, randomly ordered lists?\n\n        I. Mergesort requires less code than insertion sort.\n        II. Mergesort requires less storage space than insertion sort.\n        III. Mergesort runs faster than insertion sort.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only             \n\n", "\n I and II only \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Merge sort divides the input array in two halves, sort the two halves recursively, and then merge the results. The merge method is used for merging two sorted halves. \n", "wrong_ans_explanation": "Merge sort divides the input array in two halves, sort the two halves recursively, and then merge the results. The merge method is used for merging two sorted halves. \n", "question": "Assume that mergesort will be used to sort an array a of n integers into increasing order. What is the purpose of the merge method in the merge sort algorithm?          \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Use a recursive algorithm to sort a into increasing order.\n\n", "\n Divide a into n subarrays, each with one element.\n\n", "\n Merge two sorted arrays into a temporary array that is sorted.\n\n", "\n Merge two sorted parts of a into a single sorted array.          \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Here is the step-by-step process that the computer will do for a binary search:\n\n(1 + 100) / 2 = 50\n(50 + 100) / 2 = 75\n(75 + 100) / 2 = 87\n(87 + 100) / 2 = 93\n(93 + 100) / 2 = 97\n(97 + 100) / 2 = 98\n(98 + 100) / 2 = 99\n\nTherefore, the maximum number of guesses the computer should make before guessing the user\u2019s number is 7.\n", "wrong_ans_explanation": "Here is the step-by-step process that the computer will do for a binary search:\n\n(1 + 100) / 2 = 50\n(50 + 100) / 2 = 75\n(75 + 100) / 2 = 87\n(87 + 100) / 2 = 93\n(93 + 100) / 2 = 97\n(97 + 100) / 2 = 98\n(98 + 100) / 2 = 99\n\nTherefore, the maximum number of guesses the computer should make before guessing the user\u2019s number is 7.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n    \u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n    \u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n    \u201cyou got it in <however many> tries!\u201d\n\nSuppose the game is programmed so that the computer uses a binary search strategy for making its guesses. What is the maximum number of guesses the computer should make before guessing the user\u2019s number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 50\n\n", "\n 25\n\n", "\n 10\n\n", "\n 7        \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If the integer was 100, the computer would make 100 guesses before guessing the user\u2019s number because a sequential search starts from 1 and then goes all the way to 100 one by one.\n", "wrong_ans_explanation": "If the integer was 100, the computer would make 100 guesses before guessing the user\u2019s number because a sequential search starts from 1 and then goes all the way to 100 one by one.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n\u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n\u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n\u201cyou got it in <however many> tries!\u201d\n\nSuppose the computer used a sequential search strategy for guessing the user\u2019s number. What is the maximum number of guesses the computer could make before guessing the user\u2019s number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 100        \n\n", "\n 99\n\n", "\n 50\n\n", "\n 25\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Considering that the maximum number of guesses the computer could make before guessing the user\u2019s number is 100 and the minimum number of guesses is 1 (when the integer is 1), the average number go guesses would be 50.\n", "wrong_ans_explanation": "Considering that the maximum number of guesses the computer could make before guessing the user\u2019s number is 100 and the minimum number of guesses is 1 (when the integer is 1), the average number go guesses would be 50.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n    \u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n    \u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n    \u201cyou got it in <however many> tries!\u201d\n\nUsing a sequential search strategy, how many guesses on average would the computer need to guess the number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 100\n\n", "\n 51\n\n", "\n 50         \n\n", "\n 25\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the algorithm is searching for a pattern of four distinct characters, it would be most efficient to search for the letters a through d every 4 characters. Therefore, if a pattern \u2018abcd\u2019 does exist, the algorithm will find at least one character of the pattern, and then the entire pattern can be found.\n", "wrong_ans_explanation": "Since the algorithm is searching for a pattern of four distinct characters, it would be most efficient to search for the letters a through d every 4 characters. Therefore, if a pattern \u2018abcd\u2019 does exist, the algorithm will find at least one character of the pattern, and then the entire pattern can be found.\n", "question": "A large array of lowercase characters is to be searched for the pattern \u201cabcd.\u201d The first step in a very efficient searching algorithm is to look at characters with index \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0, 1, 2, \u2026 until a \u201ca\u201d is encountered\n\n", "\n 0, 1, 2, \u2026 until any letter in \u201ca \u2026 d\u201d is encountered.\n\n", "\n 3, 7, 11, \u2026 until an \u201ca\u201d is encountered.\n\n", "\n 3, 7, 11, \u2026 until any letter in \u201ca \u2026 d\u201d is encountered.           \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: A binary search always requires a sorted data set, which in this case is a list in alphabetical order.\n", "wrong_ans_explanation": "Remember: A binary search always requires a sorted data set, which in this case is a list in alphabetical order.\n", "question": "The array name[0], name[1], \u2026, name[9999] is a list of 10, 000 name strings. The list is to be searched to determine the location of some name X in the list. Which of the following preconditions is necessary for a binary search?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Name X is definitely in the list.\n\n", "\n Name X occurs near the middle of the list.\n\n", "\n The list is in alphabetical order.                   \n\n", "\n There are no duplicate names in the list.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This method is an example of a sequential search because if val is not found at a[n-1], the method recurs, but with n - 1 as its new parameter. This continues as a search until val is found or n = 0.\n", "wrong_ans_explanation": "This method is an example of a sequential search because if val is not found at a[n-1], the method recurs, but with n - 1 as its new parameter. This continues as a search until val is found or n = 0.\n", "question": "Consider the following method:\n\n    // Precondition: a[0], a[1] \u2026 a[n - 1] contain integers.\n    public static int something(int[] a, int n, int val)\n    {\n        if (n == 0)\n            return -1;\n        else\n        {\n            if (a[n - 1] == val)\n                return n - 1;\n            else\n                return something(a, n - 1, val);\n        }\n    }\n\n    The method shown is an example of\t\n\n    ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n insertion sort\n\n", "\n selection sort\n\n", "\n binary search\n\n", "\n sequential search          \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "In the first iteration of the while loop, 1 is printed because this is the first index at which \u201co\u201d is seen. Then, s is set to \u201cw do you do?\u201d. Now that the first \u201co\u201d has been removed, j is set to 3 (because the original string has changed). This is repeated 3 times, and ends with the result:\n\n1 3 2 3\n", "wrong_ans_explanation": "In the first iteration of the while loop, 1 is printed because this is the first index at which \u201co\u201d is seen. Then, s is set to \u201cw do you do?\u201d. Now that the first \u201co\u201d has been removed, j is set to 3 (because the original string has changed). This is repeated 3 times, and ends with the result:\n\n1 3 2 3\n", "question": "What is the output of the following code segment?\n\n    String s = \u201cHow do you do?\u201d;\n    int j = s.indexOf(\u201co\u201d);\n    while (j >= 0)\n    {\n        System.out.print(j + \u201c \u201c);\n        s = s.substring(j + 1);\n        j = s.indexOf(\u201co\u201d);\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1 3 2 3         \n\n", "\n 2 4 3 4 \n\n", "\n 1 5 8 11 \n\n", "\n 1 5 8 12\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Firstly, since j must be an integer value (because j is an index), it must be type cast into an int. Furthermore, the Math.random() function takes a random number from 0 to 1 (excluding 1). Therefore, if you multiply Math.random() by response.length, you will receive a random integer from 0 to response.length excluding response.length, which is exactly what u want for the index range. hence, the correct answer is:\n\nint j = (int) (Math.random() * response.length);       \nreturn response[j];\n", "wrong_ans_explanation": "Firstly, since j must be an integer value (because j is an index), it must be type cast into an int. Furthermore, the Math.random() function takes a random number from 0 to 1 (excluding 1). Therefore, if you multiply Math.random() by response.length, you will receive a random integer from 0 to response.length excluding response.length, which is exactly what u want for the index range. hence, the correct answer is:\n\nint j = (int) (Math.random() * response.length);       \nreturn response[j];\n", "question": "A program that simulates a conversation between a computer and a human user generates a random response to a user\u2019s comment. All possible responses that the computer can generate are stored in an array of String called response. The method given below, getResponse, returns a random response string from the array.\n\n    // Precondition: array response is initialized with strings.\n    // Postcondition: returns  a random response from response.\n    public String getResponse();\n    { /* implementation */ }\n\n    Which is a correct /* implementation */?\n\n    ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n int j = (int) (Math.random() * response.length);           \n        return response[j];\n\n", "\n int j = Math.random() * response.length;\t\n        return response[j];\n\n", "\n int j = (int) (Math.random() * (response.length - 1));          \n        return response[j];\n\n", "\n return (int) (Math.random() * response.length);\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In Java, two dimensional array is an array of arrays. Each element of the array is a row. Therefore, mat[0] is the first row and mat[2] is the third array.  The code calls the third array and swaps first element, a[0] with last element a[3] and second element a[1] with the third a[2]. The last row of the matrix, therefore changes from 6 5 0 9 to 9 0 5 6. ", "wrong_ans_explanation": "In Java, two dimensional array is an array of arrays. Each element of the array is a row. Therefore, mat[0] is the first row and mat[2] is the third array.  The code calls the third array and swaps first element, a[0] with last element a[3] and second element a[1] with the third a[2]. The last row of the matrix, therefore changes from 6 5 0 9 to 9 0 5 6. ", "question": "Consider the following method:\n\n    public static void changeArray( int[] a ) \n     {\n        int mid = a.length / 2;\n        for (int j = 0; j < mid; j++)\n        {\n            int k = a[j];\n            a[j] = a[a.length - j - 1];\n            a[a.length - j - 1] = k;\n        }\n    }\nIf the current state of a matrix mat is \n    2 7 9 5\n    8 1 4 3\n    6 5 0 9\nwhich matrix will result from the method call changeArray(mat[2])?\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n\t2 7 9 5\n\t3 4 1 8\n\t6 5 0 9\n\n", "\n\t2 7 0 5\n\t8 1 4 3\n\t6 5 9 9\n\n", "\n\t5 9 7 2\n\t3 4 1 8\n\t9 0 5 6\n\n", "\n\t2 7 9 5\n\t8 1 4 3\n\t9 0 5 6             \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the recursive call is made at the end of the method, the System.out.print... statements are executed at the beginning of each method call, causing the letters of the string to be printed out in order. If the two statements in the method were interchanged, so that the recursive call is made at the beginning of the method, then the pending print... methods would be stacked up, causing the string to be printed in reverse order.\n", "wrong_ans_explanation": "Since the recursive call is made at the end of the method, the System.out.print... statements are executed at the beginning of each method call, causing the letters of the string to be printed out in order. If the two statements in the method were interchanged, so that the recursive call is made at the beginning of the method, then the pending print... methods would be stacked up, causing the string to be printed in reverse order.\n", "question": "Which best describes what the printSomething method below does?\n\n    public void printSomething(String s)\n    {\n        if (s.length() > 0)\n        {\n            System.out.print(s.substring(0, 1));\n            printSomething(s.substring(1));\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n It prints string s.\n\n", "\n It prints string s in reverse order.\n\n", "\n It prints only the first character of string s.\n\n", "\n It prints only the first two characters of string s.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the values in arr cannot be less than Integer.MIN_VALUE, the test in the while loop will be true at least once and will lead to the largest element being stored in max. (If all the elements of the array are Integer.MIN_VALUE, the code still works.) Similarly, initializing max to arr[0], the first element in the array, ensures that all elements in arr will be examined and the largest will be found. Choice II, Integer.MAX_VALUE, fails because the test in the loop will always be false! There is no array element that will be greater than the largest possible integer. The method will (incorrectly) return Integer.MAX_VALUE.\n", "wrong_ans_explanation": "Since the values in arr cannot be less than Integer.MIN_VALUE, the test in the while loop will be true at least once and will lead to the largest element being stored in max. (If all the elements of the array are Integer.MIN_VALUE, the code still works.) Similarly, initializing max to arr[0], the first element in the array, ensures that all elements in arr will be examined and the largest will be found. Choice II, Integer.MAX_VALUE, fails because the test in the loop will always be false! There is no array element that will be greater than the largest possible integer. The method will (incorrectly) return Integer.MAX_VALUE.\n", "question": "Refer to the following method that finds the largest value in an array:\n\n    /** Precondition:  arr is initialized with int values.\n     *  Postcondition: Returns the largest value in arr.\n     */\n    public static int findMax(int[] arr)\n    {\n        int max = /* some value */;\n        int index = 0;\n        while (index < arr.length)\n        {\n            if (arr[index] > max)\n                max = arr[index];\n            index++;\n        }\n        return max;\n    }\n\nWhich replacement(s) for /* some value */ will always result in correct execution of the findMax method?\n\n       I. Integer.MIN_VALUE\n      II. Integer.MAX_VALUE\n     III. arr[0]\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the records are not sorted by amount, each record must be examined to find the one with the largest amount. It therefore doesn't make sense to sort the elements, which involves both examination and movement of elements. Thus, you can eliminate choices \u201cInsertion sort of the records\u201d, \u201cSelection sort of the records\u201d and \u201cMergesort of the records.\u201d  \n", "wrong_ans_explanation": "Since the records are not sorted by amount, each record must be examined to find the one with the largest amount. It therefore doesn't make sense to sort the elements, which involves both examination and movement of elements. Thus, you can eliminate choices \u201cInsertion sort of the records\u201d, \u201cSelection sort of the records\u201d and \u201cMergesort of the records.\u201d  \n", "question": "An opera company has a large list of donor records, sorted alphabetically by name. Each record contains the amount of money donated in the current year. Which of the following represents the most efficient way to find the name of the top donor in the current year?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Insertion sort of the records\n\n", "\n Selection sort of the records\n\n", "\n Mergesort of the records\n\n", "\n Sequential search of the records\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "If you consider a small even number like 4, the loop will be executed when i is 4 and 2 -- two times. This eliminates the choices: \n\n    n if n is even and n + 1 if n is odd \nand\n    2n if n is even and 2n-1 if n is odd.\n\nIf n is 8, the loop is executed when i is 8, 6, 4, and 2, four times. Since log(base 2)8 is 3, this eliminates the choice: \n    \n    2^n if n is even and 2^n -1 if n is odd\n\nNotice that the choice: \n\n    n/2 if n is even and 1 + n/2 if n is odd\n\nalso works for any odd integer, say 7. The loop will execute when i is 7, 5, 3, and 1, four times or 7/2 + 1.\n", "wrong_ans_explanation": "If you consider a small even number like 4, the loop will be executed when i is 4 and 2 -- two times. This eliminates the choices: \n\n    n if n is even and n + 1 if n is odd \nand\n    2n if n is even and 2n-1 if n is odd.\n\nIf n is 8, the loop is executed when i is 8, 6, 4, and 2, four times. Since log(base 2)8 is 3, this eliminates the choice: \n    \n    2^n if n is even and 2^n -1 if n is odd\n\nNotice that the choice: \n\n    n/2 if n is even and 1 + n/2 if n is odd\n\nalso works for any odd integer, say 7. The loop will execute when i is 7, 5, 3, and 1, four times or 7/2 + 1.\n", "question": "Refer to the following code segment: \n\n    int n = < some positive integer >;\n    for (int i = n; i > 0; i -= 2)\n    {\n        process(i);\n    }\n\nIn terms of n, how many times will process(i) be executed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n if n is even and n + 1 if n is odd\n\n", "\n 2n if n is even and 2n-1 if n is odd\n\n", "\n n/2 if n is even and 1 + n/2 if n is odd\n\n", "\n 2^n if n is even and 2^n -1 if n is odd\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Declaration I works because there is a default constructor in the PosInt class. The reason declaration II works is that, because the superclass PosInt has a default constructor, the following code will automatically be placed in the subclass EvenPosInt:\n\n    public EvenPosInt()\n    { super(); }    //calls default constructor from superclass\n\nThis only works for a default constructor. So declaration III fails because superclass constructors are not inherited. You need to add the following constructor code to EvenPosInt to make declaration III work:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n", "wrong_ans_explanation": "Declaration I works because there is a default constructor in the PosInt class. The reason declaration II works is that, because the superclass PosInt has a default constructor, the following code will automatically be placed in the subclass EvenPosInt:\n\n    public EvenPosInt()\n    { super(); }    //calls default constructor from superclass\n\nThis only works for a default constructor. So declaration III fails because superclass constructors are not inherited. You need to add the following constructor code to EvenPosInt to make declaration III work:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n", "question": "Refer to the following classes:\n\n    public class PosInt\n    {\n        private int value;\n\n        /** Constructs a PosInt with value 0. */\n        public PosInt()\n        { value = 0; }\n\n        /** Constructs a PosInt with the given value.\n         *  Precondition:  aValue > 0.\n         */\n        public PosInt(int aValue)\n        { value = aValue; }\n\n        public int getValue()\n        { return value; }\n    }\n\n    public class EvenPosInt extends PosInt\n    {\n        /** Returns the next consecutive even int value that is greater\n         *  than the value of the current EvenPosInt.\n         */\n        public int getNextEven()\n        { /* implementation */ }\n    }\n\nWhich of the following declarations in a client class would cause an error?\n\n      I. PosInt p = new PosInt();\n     II. PosInt even = new EvenPosInt();\n    III. PosInt pe = new EvenPosInt(8);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Implementation I is incorrect because a subclass cannot directly access the private data of its superclass. The accessor method getValue must be used, as shown in implementations II and III. The identifier this represents is the current EvenPosInt object.\n", "wrong_ans_explanation": "Implementation I is incorrect because a subclass cannot directly access the private data of its superclass. The accessor method getValue must be used, as shown in implementations II and III. The identifier this represents is the current EvenPosInt object.\n", "question": "Refer to the following classes:\n\n    public class PosInt\n    {\n        private int value;\n\n        /** Constructs a PosInt with value 0. */\n        public PosInt()\n        { value = 0; }\n\n        /** Constructs a PosInt with the given value.\n         *  Precondition:  aValue > 0.\n         */\n        public PosInt(int aValue)\n        { value = aValue; }\n\n        public int getValue()\n        { return value; }\n    }\n\n    public class EvenPosInt extends PosInt\n    {\n        /** Returns the next consecutive even int value that is greater\n         *  than the value of the current EvenPosInt.\n         */\n        public int getNextEven()\n        { /* implementation */ }\n    }\n\nSuppose that the following constructor is added to the EvenPosInt class:\n\n    public EvenPosInt(int aValue)\n    { super(aValue); }\n\nWhich of the following is a correct /* implementation */ for the getNextEven method?\n\n       I. return value + 2;\n      II. return getValue() + 2;\n     III. return this.getValue() + 2;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In order to use the compareTo method without a compiler error, the class should have a compareTo method defined, which has not been done here. \n\nThe other statement: \n\n    The test if (d1.equals(d2)) will cause a compile-time error \n\nis false because every class inherits the equals method from the universal superclass Object. \n\nFor the statement:\n\n    The test if (d1.equals(d2)) will return true,\n\nthe test will return true only if the equals method is overridden in class Date in such a way that two Date objects are equal if their month, day, and year data fields are equal. Since we don't know whether equals has been overridden, you can't state that this choice is true. \n\nFor the statement,\n\n    The test if (d1.compareTo(d2) == 0) will be true,\n\nthe test can't be true if it doesn't compile.\n", "wrong_ans_explanation": "In order to use the compareTo method without a compiler error, the class should have a compareTo method defined, which has not been done here. \n\nThe other statement: \n\n    The test if (d1.equals(d2)) will cause a compile-time error \n\nis false because every class inherits the equals method from the universal superclass Object. \n\nFor the statement:\n\n    The test if (d1.equals(d2)) will return true,\n\nthe test will return true only if the equals method is overridden in class Date in such a way that two Date objects are equal if their month, day, and year data fields are equal. Since we don't know whether equals has been overridden, you can't state that this choice is true. \n\nFor the statement,\n\n    The test if (d1.compareTo(d2) == 0) will be true,\n\nthe test can't be true if it doesn't compile.\n", "question": "Consider a Date class whose partial representation is shown below:  \n\n    public class Date\n    {\n        private int month, day, year;\n\n        //Constructor\n        public Date(int aMonth, int aDay, int aYear)\n        {\n            month = aMonth;\n            day = aDay;\n            year = aYear;\n        }\n\n        //Other methods and constructors not shown.\n        //There is no compareTo method in the class.\n    }\n\nConsider the following declarations:\n\n    Date d1 = new Date(2, 17, 1948);\n    Date d2 = new Date(2, 17, 1948);\n\nBased on the given information, which of the following statements must be true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The test if (d1.equals(d2)) will cause a compile-time error\n\n", "\n The test If (d1.equals(d2)) will return true\n\n", "\n The test if (d1.compareTo(d2) == 0) will be true\n\n", "\n The test if (d1.compareTo(d2) == 0) will cause a compile-time error\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Here are the elements that are added to total:\n\nr = 0:  mat[0][0]        2\nr = 1:  mat[1][0] + mat[1][1]        4 + 5\nr = 2:  mat[2][0] + mat[2][1]  + mat[2][2]        7 + 1 + 2\nValue returned = 2 + 4 + 5 + 7 + 1 + 2 = 21\n", "wrong_ans_explanation": "Here are the elements that are added to total:\n\nr = 0:  mat[0][0]        2\nr = 1:  mat[1][0] + mat[1][1]        4 + 5\nr = 2:  mat[2][0] + mat[2][1]  + mat[2][2]        7 + 1 + 2\nValue returned = 2 + 4 + 5 + 7 + 1 + 2 = 21\n", "question": "A square matrix is declared as\n\n    int[][] mat = new int[SIZE][SIZE];\n\nwhere SIZE is an appropriate integer constant. Consider the following method:\n\n    public static void sum(int[][] mat)\n    {\n        int total = 0;\n        for (int r = 0; r < mat.length; r++)\n            for (int c = 0; c <= r; c++)\n                total += mat[r][c];\n        return total;\n    }\n\nIf mat is initialized to be\n\n    2  6  3\n    4  5  1\n    7  1  2\n\nwhat value will be returned by a call to sum(mat)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 9\n\n", "\n 15\n\n", "\n 19\n\n", "\n 21\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The superclass, Dancer, does not have a default constructor; therefore, segment I is incorrect. Segment II works because the constructor for Dancer has one String parameter. Segment III fails because a subclass cannot directly access the private data of its superclasses.\n", "wrong_ans_explanation": "The superclass, Dancer, does not have a default constructor; therefore, segment I is incorrect. Segment II works because the constructor for Dancer has one String parameter. Segment III fails because a subclass cannot directly access the private data of its superclasses.\n", "question": "Refer to the following classes:\n\n    public abstract class Performer\n    {\n        private String specialty;\n        \n        //constructor.\n        public Performer(String aSpecialty)\n        { specialty = aSpecialty; }\n\n        public abstract void doRoutine();\n\n        //...other methods not shown\n    }\n\n    public class Dancer extends Performer\n    {\n        //constructor.\n        public Dancer(String aSpecialty)\n        { /* implementation */ }\n\n        public void doRoutine()\n        { System.out.println(\"backflip and spin\"); }\n\n        //...other methods not shown\n    }\n\n    public class BalletDancer extends Performer\n    {\n        //constructor.\n        public BalletDancer(String aSpecialty)\n        { /* implementation */ }\n\n        public void doRoutine()\n        { System.out.println(\"pirouette\"); }\n\n        //...other methods not shown\n    }\n\nWhich is correct /* implementation */ code for the constructor of the BalletDancer class?\n\n      I. super();\n     II. super(aSpecialty);\n    III. specialty = aSpecialty;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The code will work as intended; namely, at run time, the appropriate doRoutine method will be called, depending on the current instance of Performer p. This is an example of polymorphism or dynamic binding. Polymorphism occurs when a superclass method has been overridden in a subclass.\n", "wrong_ans_explanation": "The code will work as intended; namely, at run time, the appropriate doRoutine method will be called, depending on the current instance of Performer p. This is an example of polymorphism or dynamic binding. Polymorphism occurs when a superclass method has been overridden in a subclass.\n", "question": "Refer to the following classes:\n\n    public abstract class Performer\n    {\n        private String specialty;\n        \n        //constructor.\n        public Performer(String aSpecialty)\n        { specialty = aSpecialty; }\n\n        public abstract void doRoutine();\n\n        //...other methods not shown\n    }\n\n    public class Dancer extends Performer\n    {\n        //constructor.\n        public Dancer(String aSpecialty)\n        { /* implementation */ }\n\n        public void doRoutine()\n        { System.out.println(\"backflip and spin\"); }\n\n        //...other methods not shown\n    }\n\n    public class BalletDancer extends Performer\n    {\n        //constructor.\n        public BalletDancer(String aSpecialty)\n        { /* implementation */ }\n\n        public void doRoutine()\n        { System.out.println(\"pirouette\"); }\n\n        //...other methods not shown\n    }\n\nA client class has a List<Performer> performers that is initialized with many different objects that are subclasses of Performer. Each subclass has an overridden doRoutine method, similar to those shown in the Dancer and BalletDancer classes. What is the effect of executing the following code segment?\n\n    for (Performer p : performers)\n        p.doRoutine();\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The unique routine for each particular Performer will be output.\n\n", "\n There will be a compile-time error with a message to the effect that doRoutine is abstract in class Performer.\n\n", "\n There will be a compile-time error with a message to the effect that Performer p needs to be cast to its actual type.\n\n", "\n A ClassCastException will be thrown.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "All are correct, depending on whether SIZE is 4, 3, or 2. The method fills the two-dimensional square array strMat with single-character strings obtained with str.substring(i, i + 1) in row-major order -- the first row is filled from left to right, then the second row, and so on. When the test if (i < str.length()) fails, the remaining matrix slots are filled with zeroes, as in matrix I. Notice that if the number of slots in the matrix is less than the number of characters in str, the method will quit without error before the entire string is processed, which is what happened for matrix III.\n", "wrong_ans_explanation": "All are correct, depending on whether SIZE is 4, 3, or 2. The method fills the two-dimensional square array strMat with single-character strings obtained with str.substring(i, i + 1) in row-major order -- the first row is filled from left to right, then the second row, and so on. When the test if (i < str.length()) fails, the remaining matrix slots are filled with zeroes, as in matrix I. Notice that if the number of slots in the matrix is less than the number of characters in str, the method will quit without error before the entire string is processed, which is what happened for matrix III.\n", "question": "A class has a two-dimensional square array:\n\n    private String[][] strMat;\n\nThe array is initialized to have SIZE rows and columns. Consider the following method in the class.\n\n    private void fillArray(String str)\n    {\n        int i = 0;\n        for (int r = 0; r < SIZE; r++)\n        {\n            for (int c = 0; c < SIZE; c++)\n            {\n                if (i < str.length())\n                    strMat[r][c] = str.substring(i, i + 1);\n                else\n                    strMatrix[r][c] = \"0\";\n                i++;\n            }\n        }\n    }\n\nWhich of the following could be the resulting matrix after a call to fillArray(\"obtaining\"), assuming that the method runs without error?\n\n         I. o b t a\n            i n i n\n            g 0 0 0\n            0 0 0 0\n\n        II. o b t\n            a i n\n            i n g\n\n       III. o b\n            t a\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This statement will cause an IndexOutOfBoundsException because there is no slot with index 5. Note that this choice \n\n    Object ob = list.add(5, 7) \n\nis correct because the size of the list will be adjusted to 6, and the Integer 7 will be added to the last slot, i.e., the slot with index 5.\n", "wrong_ans_explanation": "This statement will cause an IndexOutOfBoundsException because there is no slot with index 5. Note that this choice \n\n    Object ob = list.add(5, 7) \n\nis correct because the size of the list will be adjusted to 6, and the Integer 7 will be added to the last slot, i.e., the slot with index 5.\n", "question": "Let list be an ArrayList<Integer> containing these elements:\n\n    4 5 6 2 1\n\nWhich of the following statements will cause an error?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n list.add(5);\n\n", "\n list.add(2, 4);\n\n", "\n Integer intOb = list.get(5);\n\n", "\n Object ob = list.add(5, 7);\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Note that the method will fail whenever element is less than the last item in the list, because index will be incremented to a value that is out of bounds. This will happen in lists I and III. Since \u22128 is greater than \u22129 (option II), the test in the method will be false, preventing an out-of-range error.\n", "wrong_ans_explanation": "Note that the method will fail whenever element is less than the last item in the list, because index will be incremented to a value that is out of bounds. This will happen in lists I and III. Since \u22128 is greater than \u22129 (option II), the test in the method will be false, preventing an out-of-range error.\n", "question": "Refer to method insert below:\n\n    /** Precondition:  List list is an ArrayList that contains\n         *             Integer values sorted in decreasing order.\n     *  Postcondition: Element inserted in its correct position in list.\n     */\n    public void insert(List<Integer> list, Integer element)\n    {\n        int index = 0;\n        while (element.compareTo(list.get(index)) < 0)\n            index++;\n        list.add(index, element);\n    }\n\nSuppose that the element to be inserted has value \u22128. For which list will the method work as intended?\n\n         I. 8 4 0 \u22124\n        II. \u22122 \u22124 \u22126 \u22129\n       III. \u22121 \u22122 \u22124 \u22126\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The declaration of the birds array makes the following assignments: birds[0] = \"robin\", birds[1] = \"parrot\", and birds[2] = \"bluejay\". The loop in segment I adds these values to birdList in the same order. Segment II fails because birds is an array and therefore can't use the get method. The code also confuses the lists. Segment III, in its first pass through the loop, attempts to add birds[2] to index position 2 of the birdList. This will cause an IndexOutOfBoundsException to be thrown, since index positions 0 and 1 do not yet exist.\n", "wrong_ans_explanation": "The declaration of the birds array makes the following assignments: birds[0] = \"robin\", birds[1] = \"parrot\", and birds[2] = \"bluejay\". The loop in segment I adds these values to birdList in the same order. Segment II fails because birds is an array and therefore can't use the get method. The code also confuses the lists. Segment III, in its first pass through the loop, attempts to add birds[2] to index position 2 of the birdList. This will cause an IndexOutOfBoundsException to be thrown, since index positions 0 and 1 do not yet exist.\n", "question": "Refer to the following declarations:\n\n    String[] birds = {\"robin\", \"parrot\", \"bluejay\"};\n    List<String> birdList = new ArrayList<String>();\n\nWhich of the following correctly assigns the elements of the birds array to birdList? The final ordering need not be the same as in the birds array.\n\n     I. for (String b: birds)\n             birdList.add( b );\n\n    II. for (String b: birdList)\n             birds.add( b );\n\n   III. for (int i = birds.length - 1; i >= 0; i--)\n             birdList.add(i, birds[i]);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "For each i, itemList[i] is a new Item object that must be constructed using the Item constructor. Therefore, the options that use the ItemList(...) are  incorrect. Since getDescription() and getPrice() are accessors for values that already exist for some Item object, the correct line of code must be: \n\n    itemList[i] = new Item(itemDescription, itemPrice);\n", "wrong_ans_explanation": "For each i, itemList[i] is a new Item object that must be constructed using the Item constructor. Therefore, the options that use the ItemList(...) are  incorrect. Since getDescription() and getPrice() are accessors for values that already exist for some Item object, the correct line of code must be: \n\n    itemList[i] = new Item(itemDescription, itemPrice);\n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nWhich of the following correctly replaces /* more code */ in the Sale constructor to initialize the itemList array?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n itemList[i] = new Item(getDescription(), getPrice());\n\n", "\n itemList[i] = new Item(itemDescription, itemPrice);\n\n", "\n itemList[i] = new ItemList(getDescription(), getPrice());\n\n", "\n itemList[i] = new ItemList(itemDescription, itemPrice);\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To access the price for each Item in the itemList array, the getPrice() accessor in the Item class must be used, since price is private to that class. \n\nThis eliminates choice: \n\n    for (Item it : itemList)\n        total += it.price; \n\nThis choice:\n\n    for (Item it : itemList)\n        total += itemList.getPrice();\n\nuses itemList incorrectly. There's no getPrice method for an array object. \n\nThis choice:\n\n    Sale thisSale;\n        for (Item it : itemList)\n            total += it.getPrice();\n\nincorrectly declares a Sale object. (The method applies to an existing Sale object.)\n", "wrong_ans_explanation": "To access the price for each Item in the itemList array, the getPrice() accessor in the Item class must be used, since price is private to that class. \n\nThis eliminates choice: \n\n    for (Item it : itemList)\n        total += it.price; \n\nThis choice:\n\n    for (Item it : itemList)\n        total += itemList.getPrice();\n\nuses itemList incorrectly. There's no getPrice method for an array object. \n\nThis choice:\n\n    Sale thisSale;\n        for (Item it : itemList)\n            total += it.getPrice();\n\nincorrectly declares a Sale object. (The method applies to an existing Sale object.)\n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nWhich represents correct /* code to calculate amount */ in the totalPaid method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n for (Item it : itemList)\n       total += it.price;\n\n", "\n for (Item it : itemList)\n       total += itemList.getPrice();\n\n", "\n for (Item it : itemList)\n       total += it.getPrice();\n\n", "\n Sale thisSale;\n       for (Item it : itemList)\n           total += it.getPrice();\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "An array of type Sale is required. \n\nThis eliminates choice:\n\n    Item[] listOfSales = new Sale[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES]; \n\nChoices:\n\n    Sale[] listOfSales = new Item[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES];\n\nincorrectly use type Item on the right-hand side. \n", "wrong_ans_explanation": "An array of type Sale is required. \n\nThis eliminates choice:\n\n    Item[] listOfSales = new Sale[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES]; \n\nChoices:\n\n    Sale[] listOfSales = new Item[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES];\n\nincorrectly use type Item on the right-hand side. \n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nSuppose it is necessary to keep a list of all item sales. A suitable declaration would be\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Sale[] listOfSales = new Sale[NUMSALES];\n\n", "\n Sale[] listOfSales = new Item[NUMSALES];\n\n", "\n Item[] listOfSales = new Sale[NUMSALES];\n\n", "\n Item[] listOfSales = new Item[NUMSALES];\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Here's a recursive description of how mergesort works:\n\nIf there is more than one element in the array:\n        Break the array into roughly two equal halves.\n        Mergesort the left half.\n        Mergesort the right half.\n        Merge the two subarrays into a sorted array.\n     ", "wrong_ans_explanation": "Here's a recursive description of how mergesort works:\n\nIf there is more than one element in the array:\n        Break the array into roughly two equal halves.\n        Mergesort the left half.\n        Mergesort the right half.\n        Merge the two subarrays into a sorted array.\n     ", "question": "The elements of array arr are to be sorted in increasing order. Which represents the first step of a mergesort algorithm?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Find the smallest element in arr and swap it into arr[0];\n\n", "\n Compare arr[0] with arr[1] and, if necessary, shift and replace elements such that arr[0] is less than arr[1].\n\n", "\n Compare the first and last elements, and if the first is less than the last, swap these elements.\n\n", "\n Break the array into roughly two equal halves.\n\n"]}, {"points": "14", "Answer": "0", "correct_ans_explanation": "import java.util.*;\n\npublic class APLine {\n    private int a;\n    private int b;\n    private int c;\n    \n    public APLine(int x, int y, int z)\n    {\n        if (x == 0 || y == 0)\n        {\n            throw new IllegalArgumentException(\"a and b must be nonzero integers\");\n        }\n        \n        a = x;\n        b = y;\n        c = z;\n    }\n    \n    public double getSlope()\n    { \n        double slope = - (double)a / (double)b;\n        return slope;\n    }\n    \n    public boolean isOnLine(int i, int j)\n    {\n        return ((a * i) + (b * j) + c == 0);\n    }\n}\n\n\n\n", "wrong_ans_explanation": "import java.util.*;\n\npublic class APLine {\n    private int a;\n    private int b;\n    private int c;\n    \n    public APLine(int x, int y, int z)\n    {\n        if (x == 0 || y == 0)\n        {\n            throw new IllegalArgumentException(\"a and b must be nonzero integers\");\n        }\n        \n        a = x;\n        b = y;\n        c = z;\n    }\n    \n    public double getSlope()\n    { \n        double slope = - (double)a / (double)b;\n        return slope;\n    }\n    \n    public boolean isOnLine(int i, int j)\n    {\n        return ((a * i) + (b * j) + c == 0);\n    }\n}\n\n\n\n",        "question": "An APLine is a line defined by the equation ax + by + c = 0, where a is not equal to zero, b is not equal to zero, and a, b, and c are all integers. The slope of an APLine is defined to be the double value -a/b. A point (represented by integers x and y) is on an APLine if the equation of the APLine is satisfied when those x and y values are substituted into the equation. That is, a point represented by x and y is on the line if ax + by + c = 0. \n\nExamples of two APLine equations are shown in the following.\n\nEquation1: 5x + 4y - 17 = 0; \nSlope (-a/b):  -5/4 = -1.25; \nIs point (5,-2) on the line? Yes, because (5(5) + 4(-2) + (-17)) equal to 0\n\nEquation2: -25x + 40y + 30 = 0; \nSlope (-a/b): 25/40 = 0.625; \nIs point (5,-2) on the line? No, because (-25(5) + 40(-2) + 30) not equal to 0\n\n\nAssume that the following code segment appears in a class other than APLine. The code segment shows an example of using the APLine class to represent the two equations shown above.\n\nAPLine line1 = new APLine(5, 4, -17); \ndouble slope 1 = line1.getSlope(); // slope1 is assigned -1.25 \nboolean onLine1 = line1.isOnLine(5, -2); // true because 5(5) + 4(-2) + (-17) equal to 0\n\nAPLine line2 = new APLine (-25, 40, 30); \ndouble slope2 = line2.getSlope(); // slope2 is assigned 0.625 \nboolean onLine2 = line2. isOnLine(5,-2); // false because -25(5) + 40(-2) + 30 not equal to 0\n\nWrite the APLine class. Your implementation must include a constructor that has three integer  parameters that represent a, b, and c, in that order. You may assume that the values of the parameters representing a and b are not zero. It must also include a method getslope that calculates and returns the slope line, and a method isOnLine that returns true if the point represented by its two parameters (x and y in that order) is on the APLine and returns false otherwise. Your class must produce the indicated results when invoked by the code segment given above. You may ignore any issues related to integer overflow.\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "public static int[] triangular (int n)\n{\n    int[] a = new int[n];\n    a[0] = 1;\n    int count = 1;\n    int triangular = 2;\n    while (n > count)\n    {\n        a[count] = triangular + a[count - 1];\n        count++;\t\n        triangular++;\n    }\n    return a;\n}\n\n\n", "wrong_ans_explanation": "public static int[] triangular (int n)\n{\n    int[] a = new int[n];\n    a[0] = 1;\n    int count = 1;\n    int triangular = 2;\n    while (n > count)\n    {\n        a[count] = triangular + a[count - 1];\n        count++;\t\n        triangular++;\n    }\n    return a;\n}\n\n\n",        "question": "The n-th triangular number is the sum of the first n positive integers. For example, the first four triangular numbers are 1, 1+2 = 3, 1+2+3 = 6, and 1+2+3+4 = 10. Write the complete code for the method public static int[] triangular (int n), which constructs and returns an array containing the first n triangular numbers. For example, triangular(4) returns an array (1,3,6,10). Use int[] a = new int[n]; to construct the array.\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a) \npublic static Fraction add(Fraction x, Fraction y)\n{\n    int j = (x.top * y. bot) + (x.bot * y.top);\n    int i= x.bot * y.bot;\n    Fraction z = new Fraction (j, i); \n    return z;\n}\n\n(b) \npublic static Fraction multiply(Fraction x, Fraction y)\n{\n    int i = x.top * y.top; \n    int j = x.bot * y. bot;\n    Fraction z = new Fraction (i, j)\n    return z;\n}\n\n", "wrong_ans_explanation": "(a) \npublic static Fraction add(Fraction x, Fraction y)\n{\n    int j = (x.top * y. bot) + (x.bot * y.top);\n    int i= x.bot * y.bot;\n    Fraction z = new Fraction (j, i); \n    return z;\n}\n\n(b) \npublic static Fraction multiply(Fraction x, Fraction y)\n{\n    int i = x.top * y.top; \n    int j = x.bot * y. bot;\n    Fraction z = new Fraction (i, j)\n    return z;\n}\n\n",        "question": "Consider the following partial implementation of a Fraction class.\n\npublic class Fraction implements Comparable<Fraction>\n{\n    private long top = 0; \n    private long bot = 1;\n\n    public Fraction(long a, long b)\n    {\n        // Code which install top and bot, \n        //making sure that bot > 0 \n        //and gcd(top, bot) = 1\n\t}\n    public int compareTo (Fraction that)\n\t{\n        return compare(this, that);\n    }\n}\n\n(a) Write the body of this method:\n\n    public static Fraction add(Fraction x, Fraction y)\n\n(b) Write the body of this method:\n\n    public static Fraction multiply(Fraction x, Fraction y)",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a) \npublic int max (int[] a)\n{\n    int j = 0; \n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] > j)\n            j = a[i];\n    }\n    return j;\n}\n\n(b) \npublic int find(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return 0;\n}\n\n\n(c)\npublic int[] reverse (int[] a)\n{\n    int[] b = new int[a.length];\n    for (int i = 0; i < b.length, i++)\n    {\n        b[i] = a[a.length - i - 1];  \t\t\n    }\n    return b;\n}\n\n", "wrong_ans_explanation": "(a) \npublic int max (int[] a)\n{\n    int j = 0; \n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] > j)\n            j = a[i];\n    }\n    return j;\n}\n\n(b) \npublic int find(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return 0;\n}\n\n\n(c)\npublic int[] reverse (int[] a)\n{\n    int[] b = new int[a.length];\n    for (int i = 0; i < b.length, i++)\n    {\n        b[i] = a[a.length - i - 1];  \t\t\n    }\n    return b;\n}\n\n",        "question": "Write a complete version of the following methods which work on an array of positive integers. Your code may assume that the array contains at least one value, and that all values are positive. \n\n(a) max(int[] a) return the largest value in the array.\n\n(b) find(int[] a, int v) returns the index of the first position which contains the value v. If v is not in the array, return 0.\n\n(c) reverse(int[] a) returns a new array, with the values in reverse order.\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npos1 <= array.length -1 &&  pos2 <= array.length - 1\n\n(b)\n{\n    int j= array[pos1]; \n    array[pos1] = array[pos2];\n    array[pos2] = j;\n    success = true;\n}\n\n\n(c)\nexp2 = a.length - i\nexp3 = i", "wrong_ans_explanation": "(a)\npos1 <= array.length -1 &&  pos2 <= array.length - 1\n\n(b)\n{\n    int j= array[pos1]; \n    array[pos1] = array[pos2];\n    array[pos2] = j;\n    success = true;\n}\n\n\n(c)\nexp2 = a.length - i\nexp3 = i",        "question": "Consider the following code, designed to shuffle an array of integers.\n\npublic static boolean swap(int[] array, int pos1, int pos2)\n{\n    boolean success = false; \n    if (<exp1>)\n        <block1> \n    return success;\n}\n\npublic static void shuffle(int[] a)\n{\n    Random random = new Random(); \n    for (int i = 0; i < a.length - 1; i++)\n    {\n        int j = random.nextInt(<exp2>) + <exp3>; \n        swap(a, i - 1, j);\n    }\n}\n\nRecall that random.nextInt(x) returns a random nonnegative integer which is less than x.\n\n(a) The expression exp1 is true if both pos1 and pos2 are valid indices for the array.\nWrite the code for exp1.\n\n(b) The block block1 swaps the values in the array in positions pos1 and pos2.\nWrite the code for block1.\n\n(c) The expressions exp2 and exp3 cause j to be a random valid index which is greater than or equal to i. Find exp2 and exp3.\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a) \npublic static int remainder(int n, int m)\n{\n    int r = 0 ;\n    while (n > m)\n    {\n        n = n - m ;\n    }\n    r = n ;\n    return r;\n}\n\n(b) \npublic static int quotient (int n, int m)\n{\n    int q = 0;\n    for (q = 0; n > m; q++)\n    {\n        n = n - m;\n    }\n    return q;\n}\n", "wrong_ans_explanation": "(a) \npublic static int remainder(int n, int m)\n{\n    int r = 0 ;\n    while (n > m)\n    {\n        n = n - m ;\n    }\n    r = n ;\n    return r;\n}\n\n(b) \npublic static int quotient (int n, int m)\n{\n    int q = 0;\n    for (q = 0; n > m; q++)\n    {\n        n = n - m;\n    }\n    return q;\n}\n",        "question": "Suppose that your version of Java does not have the division or modulo operator!\n\n(a) Complete the following method which returns the remainder when n is divided by m. Use repeated subtraction instead of the modulo operator.\n\npublic static int remainder(int n, int m)\n{\n    int r = 0;\n    \n    \n    \n    return r;\n}\n\n\n(b) Complete the following method which returns the quotient when n is divided by m. Use repeated subtraction instead of the division operator.\n\npublic static int quotient (int n, int m)\n{\n    int q = 0;\n\n\n\n    return q;\n}",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "public int sequentialSearch(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return -1;\n}\n", "wrong_ans_explanation": "public int sequentialSearch(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return -1;\n}\n",        "question": "A sequential search simply starts at the beginning of a list and iterates through it until the desired object is found, or until the end of the list is reached. \n    The method public int sequentialSearch(int a, int v) which performs a sequential search on the array a for value v. If v exists in the list, the method returns the index of the first position where it resides; otherwise it returns -1.\n\tWrite the complete code for the method sequentialSearch.\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "public static int[] grow(int[] a, int k) \n{\n    if (k < 0) k = 0;\n    int[] y = new int (a.length + k); \n    for (int i = 0; i < a.length; i++)\n    {\n        y[i] = a[i];\n    }\n    return y;\n}\n", "wrong_ans_explanation": "public static int[] grow(int[] a, int k) \n{\n    if (k < 0) k = 0;\n    int[] y = new int (a.length + k); \n    for (int i = 0; i < a.length; i++)\n    {\n        y[i] = a[i];\n    }\n    return y;\n}\n",        "question": "The method public static int[] grow(int [] a, int k) creates a new array whose length is k plus the length of a, copies the elements from a into the new array, returns the new array. The order of the elements is maintained. If k < 0, an exact copy of a is returned.\n\tWrite the complete code for the method grow.\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic int limitAmplitude (int limit)\n{\n    int i = 0; \n    for (int k = 0; k < samples.length; k++)\n    { \n        if (samples [k] > limit)\n        {\n            samples [k] = limit;\n            i++;\n        }\n        else if (samples [k] < -limit) \n        {\n            samples[k] = -limit;\n            i++;\n        }\n        k++;\n    }\n\treturn i;\n}\n\n(b)\npublic void trimSilenceFromBeginning()\n{\n   int i = 0;\n   while (samples[i] == 0)\n   {\n       i++;\n   }\n   newSound = new int[samples.length - i];\n   int k = 0;\n   for (int j = i; j < samples.length; j++)\n   {\n       newSound[k] = samples[j];\n       k++;\n   }\n}\n\n\n", "wrong_ans_explanation": "(a)\npublic int limitAmplitude (int limit)\n{\n    int i = 0; \n    for (int k = 0; k < samples.length; k++)\n    { \n        if (samples [k] > limit)\n        {\n            samples [k] = limit;\n            i++;\n        }\n        else if (samples [k] < -limit) \n        {\n            samples[k] = -limit;\n            i++;\n        }\n        k++;\n    }\n\treturn i;\n}\n\n(b)\npublic void trimSilenceFromBeginning()\n{\n   int i = 0;\n   while (samples[i] == 0)\n   {\n       i++;\n   }\n   newSound = new int[samples.length - i];\n   int k = 0;\n   for (int j = i; j < samples.length; j++)\n   {\n       newSound[k] = samples[j];\n       k++;\n   }\n}\n\n\n",        "question": "Digital sounds can be represented as an array of integer values. For this question, you will write two unrelated methods of the Sound class. A partial declaration of the Sound class is shown below. \n\npublic class Sound\n{ \n/** the array of values in this sound; guaranteed not to be null */       \nprivate int[] samples;\n\n/** Changes those values in this sound that have an amplitude greater than limit.\n * Values greater than limit are changed to limit. \n * Values less than -limit are changed to -limit. \n * @param limit the amplitude limit \n * Precondition: limit 0 \n * @return the number of values in this sound that \n * this method changed\n */\n\npublic int limitAmplitude (int limit) \n{ /* to be implemented in part (a) */ }\n/** Removes all silence from the beginning of this sound. \n* Silence is represented by a value of 0. \n* Precondition: samples contains at least one nonzero value \n* Postcondition: the length of samples reflects the \n* removal of starting silence\n*/\npublic void trimSilenceFromBeginning() \n{ /* to be implemented in part (b) */ }\n\n// There may be instance variables, constructors, and methods \n// that are not shown.\n\n}\n\n(a) The volume of a sound depends on the amplitude of each value in the sound. The amplitude of a value is its absolute value: For example, the amplitude of -2300 is 2300 and the amplitude of 4000 is 4000. Write the method limitAmplitude that will change any value that has an amplitude greater than the given limit. Values that are greater than limit are replaced with limit, and values that are less than -limit are replaced with -limit. The method returns the total number of values that were changed in the array. \nFor example, assume that the array samples has been initialized with the following values.\n\n40 2532 17 -2300 -17 -4000 2000 1048 -420 33 15 -32 2030 3223\n\nWhen the statement\n\nint numChanges = limitAmplitude (2000);\n\nis executed, the value of numChanges will be 5, and the array samples will contain the following values.\n\n40 2000 17 -2000 -17 -2000 2000 1048 -420 33 15 -32 2000 2000 \n\nComplete method limitAmplitude below.\n\n/** Changes those values in this sound that have an amplitude greater than limit. \n* Values greater than limit are changed to limit. \n* Values less than -limit are changed to -limit. \n* @param limit the amplitude limit \n* Precondition: limit >= 0 \n* @return the number of values in this sound that this method changed\n*/\npublic int limitAmplitude (int limit)\n\n(b) Recorded sound often begins with silence. Silence in a sound is represented by a value of 0. Write the method trimSilenceFromBeginning that removes the silence from the beginning of a sound. To remove starting silence, a new array of values is created that contains the same values as the original samples array in the same order but without the leading zeros. The instance variable samples is updated to refer to the new array. For example, suppose the instance variable samples refers to the following array.\n\nIndex 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nValue 0 0 0 0 -14 0 -35 -39 0 -7 16 32 37 29 0 0\n\nAfter trimSilenceFromBeginning has been called, the instance variable samples will refer to the following array.\n\nIndex 0 1 2 3 4 5 6 7 8 9 10 11 \nValue -14 0 -35 -39 0 -7 16 32 37 29 0 0\n\nComplete method trimSilenceFromBeginning below.\n/** Removes all silence from the beginning of this sound. \n * Silence is represented by a value of 0. \n * Precondition: samples contains at least one nonzero value \n * Postcondition: the length of samples reflects the \n * removal of starting silence\n */\npublic void trimSilenceFromBeginning()\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic int numWordsOfLength(int len)\n{\n    int k = 0;\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n           ++k;\n    }\n    return k;\n}\n\n(b)\npublic void removeWordsOfLength(int len)\n{\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n        {\n            myList.remove(i--);\n \t\t}    \n    }\n}\n", "wrong_ans_explanation": "(a)\npublic int numWordsOfLength(int len)\n{\n    int k = 0;\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n           ++k;\n    }\n    return k;\n}\n\n(b)\npublic void removeWordsOfLength(int len)\n{\n    for (int i = 0; i < myList.size(); i++)\n    {\n        if (myList.get(i).length() == len)\n        {\n            myList.remove(i--);\n \t\t}    \n    }\n}\n",        "question": "The following class WordList is designed to store and manipulate a list of words. The complete class declaration is shown below. You will be asked to implement two methods.\n\npublic class WordList\n{\n    private ArrayList myList; \n    // contains Strings made up of letters\n    // postcondition: returns the number of words \n    // in this WordList that\n    // are exactly len letters long \n    public int numWordsOfLength(int len) \n    { /* to be implemented in part (a) */ }\n\n    // postcondition: all words that are exactly len letters long \n    // have been removed from this WordList, with the \n    // order of the remaining words unchanged\n    public void removeWordsOfLength(int len) \n    { /* to be implemented in part (b) */ } \n    // ... constructor and other methods not shown\n}\n\n(a) Write the WordList method numWordsOfLength. Method numbWordsOfLength returns the number of words in the WordList that are exactly len letters long. For example, assume that the instance variable myList of the WordList animals contains the following.\n\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nThe table below shows several sample calls to numWordsOfLength.\n\nCall   Result returned by call\nanimals.numWordsOfLength(4)\t1\nanimals.numWordsOfLength(3)\t3\nanimals.numWordsOfLength(2)\t0\n\nComplete method numWordsOfLength below.\n\n// postcondition: returns the number of words \n// in this WordList that \n// are exactly len letters long \npublic int numWordsOfLength(int len)\n\n(b) Write the WordList method removeWordsOfLength. Method removeWordsOfLength removes all words from the WordList that are exactly len letters long, leaving the order of the remaining words un-changed. For example, assume that the instance variable myList of the WordList animals contains the following\n\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nThe table below shows a sequence of calls to the removeWordsOfLength method.\n\nCall\nmyList after the call\n\nanimals.removeWordsOfLength(4) \n[\"cat\", \"mouse\", \"dog\", \"dog\"]\n\nanimals.removeWordsOfLength(3)\n[\"mouse\", \"frog\"]\n\nanimals.removeWordsOfLength(2)\n[\"cat\", \"mouse\", \"frog\", \"dog\", \"dog\"]\n\nComplete method remove WordsOfLength below.\n\n// postcondition: all words that are exactly len letters long \n// have been removed from this WordList, with the \n// order of the remaining words unchanged \npublic void removeWordsOfLength(int len)\n\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic static boolean isSelfDivisor(int number)\n{\n    int k = 0;\n    int n = number;\n    while (n > 0)\n    {\n        k = n % 10;\n        if (k == 0 || number % k != 0)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\n\n(b)\npublic static int[] firstNumSelfDivisors(int start, int num)\n{\n    int[] a = new int[num];\n    int j = start;\n    int k = 0;\n    while (k < num)\n    {\n        if (isSelfDivisor(j))\n            a[k++] = j;\n        j++;\n    }\n    return a;\n}\n", "wrong_ans_explanation": "(a)\npublic static boolean isSelfDivisor(int number)\n{\n    int k = 0;\n    int n = number;\n    while (n > 0)\n    {\n        k = n % 10;\n        if (k == 0 || number % k != 0)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\n\n(b)\npublic static int[] firstNumSelfDivisors(int start, int num)\n{\n    int[] a = new int[num];\n    int j = start;\n    int k = 0;\n    while (k < num)\n    {\n        if (isSelfDivisor(j))\n            a[k++] = j;\n        j++;\n    }\n    return a;\n}\n",        "question": "A positive integer is called a \"self-divisor\u201d if every decimal digit of the number is a divisor of the number, that is, the number is evenly divisible by each and every one of its digits. For example, the number 128 is a self-divisor because it is evenly divisible by 1, 2, and 8. However 26 is not a self-divisor because it is not evenly divisible by the digit 6. Note that 0 is not considered to be a divisor of any number, so any number containing a 0 digit is NOT a self-divisor. There are infinitely many self-divisors.\n\npublic class SelfDivisor\n{\n    /** @param number the number to be tested \n     * Precondition: number > 0 \n     * @return true if every decimal digit of number \n     * is a divisor of number; \n     * false otherwise\n     */\n    public static boolean isSelfDivisor(int number) \n    { /* to be implemented in part (a) */ }\n    /** @param start starting point for values to be checked \n     * Precondition: start > 0 \n     * @param num the size of the array to be returned \n     * Precondition: num > 0 \n     * @return an array containing the first \n     * num integers >= start that are self-divisors\n     */\n    public static int[] firstNumSelfDivisors(int start, int num) \n    { /* to be implemented in part (b) */ }\n    // There may be fields, constructors, \n    // and methods that are not shown.\n}\n\n(a) Write method isSelfDivisor, which takes a positive integer as its parameter. This method returns true if the number is a self-divisor; otherwise, it returns false. \n\nComplete method isSelfDivisor below.\n\n/** @param number the number to be tested \n* Precondition: number > 0\n* @return true if every decimal digit of number \n* is a divisor of number, false otherwise\n*/\npublic static boolean isSelfDivisor(int number)\n\n(b) Write method firstNumSelfDivisors which takes two positive integers as parameters, representing a start value and a number of values. Method firstNumSelfDivisors returns an array of size num that contains the first num self-divisors that are greater than or equal to start.\nFor example, the call firstNumSelfDivisors(10, 3) should return an array containing the values 11, 12, and 15, because the first three self-divisors that are greater than or equal to 10 are 11, 12, and 15. In writing firstNumSelfDivisors, assume that isSelfDivisor works as specified, regardless of what you wrote in part (a). \n\nComplete method firstNumSelfDivisors below.\n\n/** @param start starting point for values to be checked \n * Precondition: start > 0 \n * @param num the size of the array to be returned \n * Precondition: num > 0 \n * @return an array containing the first \n * num integers start that are self-divisors\n*/\npublic static int[] firstNumSelfDivisors(int start, int num)\n\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic Reservation requestRoom (String guestName)\n{\n    for (int i = 0; i < rooms.length; i++)\n    {\n        if (rooms [i] == null)\n        {\n            Reservation res = new Reservation (questName, i);\n            return res;\n        }\n    } \n    waitList.add(guestName); \n    return null;\n}\n\n(b)\npublic Reservation cancelAndReassign(Reservation res)\n{\n    Reservation newRes = null; \n    int i = res.getRoomNumber();\n    if (!wait List.isEmpty());\n    {\n        newRes = new Reservation ((String)waitList.get(0), i); \n        waitList.remove(0);\n    }\n    rooms[i] = newRes; \n    return newRes;\n}\n", "wrong_ans_explanation": "(a)\npublic Reservation requestRoom (String guestName)\n{\n    for (int i = 0; i < rooms.length; i++)\n    {\n        if (rooms [i] == null)\n        {\n            Reservation res = new Reservation (questName, i);\n            return res;\n        }\n    } \n    waitList.add(guestName); \n    return null;\n}\n\n(b)\npublic Reservation cancelAndReassign(Reservation res)\n{\n    Reservation newRes = null; \n    int i = res.getRoomNumber();\n    if (!wait List.isEmpty());\n    {\n        newRes = new Reservation ((String)waitList.get(0), i); \n        waitList.remove(0);\n    }\n    rooms[i] = newRes; \n    return newRes;\n}\n",        "question": "In this question, you will implement two methods for a class Hotel that is part of a hotel reservation system. The Hotel class uses the reservation class shown below. A Reservation is for the person and room number specified when the Reservation is constructed.\n\npublic class Reservation\n{\n    public Reservation(String guestName, int roomNumber)\n    {/* implementation not shown */ }\n\n    public int getRoomNumber() \n    {/* implementation not shown */ }\n    // private data and other methods not shown\n}\n\nAn incomplete declaration for the Hotel class is shown below. Each hotel in the hotel reservation system has rooms numbered 0, 1, 2, ..., up to the last room number in the hotel. For example, a hotel with 100 rooms would have rooms numbered 0, 1, 2, ..., 99.\n\npublic class Hotel\n{\n    private Reservation[] rooms;\n        // each element corresponds to a room in the hotel; \n        // if rooms[index] is null, the room is empty; \n        // otherwise, it contains a reference to the \n        // Reservation for that room, such that \n        // rooms[index].getRoomNumber() returns index\n\n    private ArrayList waitList;\n        // contains names of guests who have not yet been \n        // assigned a room because all rooms are full\n\n    // if there are any empty \n    // rooms (rooms with no reservation), \n    // then create a reservation for an empty room for the \n    // specified guest and return the new Reservation; \n    // otherwise, add the guest to the end \n    // of waitList and return null \n\n    public Reservation requestRoom(String guestName) \n    { /* to be implemented in part (a) */ }\n\n    // release the room associated with parameter res, \n    // effectively canceling the reservation; \n    // if any names are stored in waitList, \n    // remove the first name and create a Reservation \n    // for this person in the room \n    // reserved by res; return that new Reservation; \n    // if waitList is empty, mark the room \n    // specified by res as empty and return null \n    // precondition: res is a valid Reservation \n    // for some room in this hotel \n    public Reservation cancelAndReassign(Reservation res) \n    { /* to be implemented in part (b) */ }\n\n    // constructors and other methods not shown\n}\n\n\n(a) write the hotel method request Room. Method requestRoom attempts to reserve a room for a given guest. If there are any empty rooms in the hotel, one of them will be assigned to the named guest and the newly created reservation is returned. If there are no empty rooms, the guest is added to the end of the waiting list and null is returned. \n\nComplete method request Room below.\n\n// there are any empty rooms (rooms with no reservation) \n// then create a reservation for an empty room for the \n// specified guest and return the new Reservation; \n// otherwise, add the guest to the end of waitList \n// and return null \npublic Reservation requestRoom(String guestName)\n\n(b) Write the Hotel method cancelAndReassign. Method cancelAndReassign releases a previous reservation. If the waiting list for the hotel contains any names, the vacated room is reassigned to the first person at the beginning of the list. That person is then removed from the waiting list and the newly created reservation is returned. If no one is waiting, the room is marked as empty and null is returned. \nIn writing cancelAndReassign you may call any accessible methods in the Reservation and Hotel classes. Assume that these methods work as specified. \n\nComplete method cancelAndReassign below.\n\n// release the room associated with parameter res, effectively \n// canceling the reservation; \n// any names are stored in waitList, remove the first name\n// and create a Reservation for this person in the room \n// reserved by res; return that new Reservation; \n// if waitList is empty, mark the room \n// specified by res as empty and \n// return null \n// precondition: res is a valid Reservation for some \n//room in this hotel \npublic Reservation cancelAndReassign(Reservation res)\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\nprivate String recombine (String word1, String word2)\n{\n    String s = word1.substring(0, word1.length()/2); \n    String t = word2.substring(word2.length()/2, word2.length()); \n    return s + t;\n}\n\n(b) \nprivate String[] mixedWords(String[] words)\n{\n    String q = \"\";\n    String p = \"\";\n    String[] s = new String[words.length];\n    for (int i = 0; i < words.length - 1; i += 2)\n    {\n        s[i] = recombine(words[i], words[i + 1]);\n        s[i + 1] = recombine(words[i + 1], words[i]); \n    }\n    return s;\n}\n", "wrong_ans_explanation": "(a)\nprivate String recombine (String word1, String word2)\n{\n    String s = word1.substring(0, word1.length()/2); \n    String t = word2.substring(word2.length()/2, word2.length()); \n    return s + t;\n}\n\n(b) \nprivate String[] mixedWords(String[] words)\n{\n    String q = \"\";\n    String p = \"\";\n    String[] s = new String[words.length];\n    for (int i = 0; i < words.length - 1; i += 2)\n    {\n        s[i] = recombine(words[i], words[i + 1]);\n        s[i + 1] = recombine(words[i + 1], words[i]); \n    }\n    return s;\n}\n",        "question": "Consider the following partial declaration for a WordScrambler class. The constructor for the WordScrambler class takes an even-length array of String objects and initializes the instance variable scrambledWords.\n\npublic class WordScrambler\n{\nprivate String[] scrambledWords;\n\n    /** @param wordArr an array of String objects\n      * Precondition: wordArr.length is even\n      */\n    public WordScrambler (String[] wordArr)\n    {\n        scrambledWords = mixedWords(wordArr);\n    }\n\n    /** @param word1 a String of characters\n      * @param word2 a String of characters \n      * @return a String that contains the first \n      * half of word1 and the second half of word2\n      */\n    private String recombine (String word1, String word2) \n    { /* to be implemented in part (a) */ }\n\n    /** @param words an array of String objects\n     * Precondition: words.length is even \n     * @return an array of String objects created \n     * by recombining pairs of strings in array words \n     * Postcondition: the length of the returned \n     * array is words.length\n    */\n    private String[] mixedWords(String[] words) \n    { /* to be implemented in part (b) */ }\n\n    // There may be instance variables, constructors, \n    // and methods that are not shown.\n}\n\n(a) Write the WordScrambler method recombine. This method returns a String created from its two String parameters as follows.\n    - take the first half of word1 \n    - take the second half of word2 \n    - concatenate the two halves and return the new string.\nFor example, the following table shows some results of calling recombine. Note that if a word has an odd number of letters, the second half of the word contains the extra letter.\n\n    Word1\t\t  word2\t\trecombine (word1, word2)\n    \"Apple\"\t\t\"pear\"\t\t      \"apar\"\n    \"Pear\"\t\t\"apple\"\t\t      \"peple\"\n\nComplete method recombine below.\n\n/** @param word1 a String of characters\n  * @param word2 a String of characters \n  * @return a String that contains the first half \n  * of word1 and the second half of word2\n  */ \nprivate String recombine(String word1, String word2)\n\n(b) Write the WordScrambler method mixedWords. This method creates and returns a new array of String objects as follows. It takes the first pair of strings in words and combines them to produce a pair of strings to be included in the array returned by the method. If this pair of strings consists of w1 and w2, the method should include the result of calling recombine with w2 and w1 as arguments. The next two strings, if they exist, would form the next pair to be processed by this method. The method should continue until all the strings in words have been processed in this way and the new array has been filled. For example, if the array words contains the following elements:\n\n{ \"apple\", \"pear\", \"this\", \"cat\" }\n\nthen the call mixedWords(words) should return the following array.\n\n{\"apar\", \"peple\", \"that\", \"cis\"}\n\nIn writing mixedWords, you may call recombine. Assume that recombine works as specified, regardless of what you wrote in part (a). Complete method mixedWords below.\n\n/** @param words an array of String objects\n  * Precondition: words.length is even \n  * @return an array of String objects created by \n  * recombining pairs of strings in array words \n  * Postcondition: the length of the returned \n  * array is words.length\n  */ \nprivate String[] mixedWords(String[] words)\n\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic static int getPeakIndex(int[] array)\n{\n    for (int k = 1; k < array.length - 1; k++)\n    {\n        if ((array[k - 1] < array[k]) && (array[k] > array[k + 1]))\n            return k;\n    }\n    return -1;\n}\n\n(b)\npublic static boolean isMountain(int[] array) \n{\n    if (getPeakIndex(array) == -1)\n        return false; \n    if (!is Increasing(array, getPeakIndex(array))\n        return false; \n    if (!isDecreasing(array, getPeakIndex(array))\n        return false; \n    return true;\n}\n", "wrong_ans_explanation": "(a)\npublic static int getPeakIndex(int[] array)\n{\n    for (int k = 1; k < array.length - 1; k++)\n    {\n        if ((array[k - 1] < array[k]) && (array[k] > array[k + 1]))\n            return k;\n    }\n    return -1;\n}\n\n(b)\npublic static boolean isMountain(int[] array) \n{\n    if (getPeakIndex(array) == -1)\n        return false; \n    if (!is Increasing(array, getPeakIndex(array))\n        return false; \n    if (!isDecreasing(array, getPeakIndex(array))\n        return false; \n    return true;\n}\n",        "question": "An array of positive integer values has the mountain property if the elements are ordered such that successive values increase until a maximum value (the peak of the mountain) is reached and then the successive values decrease. The Mountain class declaration shown below contains methods that can be used to determine if an array has the mountain property. You will implement two methods in the Mountain class.\n\npublic class Mountain\n{\n    /** @param array an array of positive integer values\n      * @param stop the last index to check \n      * Precondition: 0 \u2264 stop \u2264 array.length \n      * @return true if for each j such that 0 \u2264 j < stop, \n      * array[j] < array[j + 1] ; \n      * false otherwise\n      */ \n    public static boolean isIncreasing(int[] array, int stop) \n    { /* implementation not shown */ }\n\n    /** @param array an array of positive integer values\n      * @param start the first index to check \n      * Precondition: 0 \u2264 start < array.length - 1 \n      * @return true if for each j such that \n      * start \u2264 j < array.length - 1, \n      * array[j] > array(j + 1]; \n      * false otherwise\n      */\n    public static boolean isDecreasing(int[] array, int start) \n    { /* implementation not shown */ }\n\n    /** @param array an array of positive integer values\n      * Precondition: array.length > 0 \n      * @return the index of the first peak (local maximum) \n      * in the array, if it exists, -1 otherwise\n      */ \n    public static int getPeakIndex(int[] array) \n    { /* to be implemented in part (a) */ }\n\n    /** @param array an array of positive integer values\n      * Precondition: array.length > 0 \n      * @return true if array contains values ordered \n      * as a mountain, false otherwise\n      */\n    public static boolean isMountain(int[] array) \n    { /* to be implemented in part (b) */ }\n\n    // There may be instance variables, constructors, \n    // and methods that are not shown.\n}\n\n(a) Write the Mountain method getPeakIndex. Method getPeakIndex returns the index of the first peak found in the parameter array, if one exists. A peak is defined as an element whose value is greater than the value of the element immediately before it and is also greater than the value immediately after it. Method getPeakIndex starts at the beginning of the array and returns the index of the first peak that is found or -1 if no peak is found. \n\nFor example, the following table illustrates the results of several calls to getPeakIndex.\n\n    arr\t\t\t\t\tgetPeakIndex(arr)\n\n[ 11, 22, 33, 22, 11 ]\t\t\t2\n[ 11, 22, 11, 22, 11 ]\t\t\t1\n[ 11, 22, 33, 55, 77 ]\t\t\t-1\n[99, 33, 55, 77, 120 ]\t\t\t-1\n[ 99, 33, 55, 77, 55 ]\t\t\t3\n[ 33, 22, 11 ]\t\t\t\t\t-1\n\nComplete method getPeakIndex below.\n\n/** @param array an array of positive integer values\n  * Precondition: array.length > 0 \n  * @return the index of the first peak (local maximum) \n  * in the array, if it exists, -1 otherwise\n  */ \npublic static int getPeakIndex(int[] array)\n\n(b) Write the Mountain method isMountain. Method isMountain returns true if the values in the parameter array are ordered as a mountain; otherwise, it returns false. The values in the array are ordered as a mountain if all three of the following conditions hold.\n\n    - There must be a peak. \n    - The array elements with an index smaller than the peaks index must appear in increasing order.\n    - The array elements with an Index larger than the peaks index must appear in decreasing order.\n \nFor example, the following table illustrates the results of several calls to isMountain.\n\narr \t\t\t\tisMountain (arr)\n\n[ 1, 2, 3, 2, 1 ] \t\ttrue (2)\n[ 1, 2, 1, 2, 1 ] \t\ttrue (1)\n[ 1, 2, 3, 1, 5 ]\t\tfalse (-1) \n[ 1, 4, 2, 1, 0 ] \t\tfalse (-1)\n[ 9, 3, 5, 7, 5 ]\t\ttrue (3)\n    [ 3, 2, 1 ]\t\t\tfalse (-1)\n\npublic static boolean isMountain(int[] array)\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "(a)\npublic int getTotalBoxes()\n{\n    int j = 0;\n    for (int i = 0; i < orders.size(); i++)\n    {\n        j + = orders.get(i).getNumBoxes();\n    }\n    return j;\n}\n\n(b)\npublic int removeVariety(String cookieVar)\n{\n    int j = 0;\n    for (int i = 0; i < orders.size(); i++)\n    {\n        if (orders.get(i).getVariety().equals(cookieVar))\n        {\n            j += orders.get(i).getNumBoxes();\n            orders.remove(i--);\n        }\n    }\n    return j;\n}\n", "wrong_ans_explanation": "(a)\npublic int getTotalBoxes()\n{\n    int j = 0;\n    for (int i = 0; i < orders.size(); i++)\n    {\n        j + = orders.get(i).getNumBoxes();\n    }\n    return j;\n}\n\n(b)\npublic int removeVariety(String cookieVar)\n{\n    int j = 0;\n    for (int i = 0; i < orders.size(); i++)\n    {\n        if (orders.get(i).getVariety().equals(cookieVar))\n        {\n            j += orders.get(i).getNumBoxes();\n            orders.remove(i--);\n        }\n    }\n    return j;\n}\n",        "question": "An organization raises money by selling boxes of cookies. A cookie order specifies the variety of cookie and the number of boxes ordered. \n\nThe declaration of the CookieOrder class is shown below. \n\npublic class CookieOrder\n{\n    /** Constructs a new CookieOrder object. */ \n    public CookieOrder(String variety, int numBoxes) \n    { /* implementation not shown */ }\n\n    /** @return the variety of cookie being ordered */ \n    public String getVariety() \n    { /* implementation not shown */ }\n\n    /** @return the number of boxes being ordered */ \n    public int getNumBoxes() \n    { /* implementation not shown */ }\n\n    // There may be instance variables, constructors, \n    // and methods that are not shown.\n}\n\nThe MasterOrder class maintains a list of the cookies to be purchased. The declaration of the MasterOrder class is shown below.\n\npublic class MasterOrder\n{\n    /** The list of all cookie orders */ \n    private List<CookieOrder> orders;\n\n    /** Constructs a new MasterOrder object. */ \n    public MasterOrder() \n    { orders = new ArrayList<CookieOrder>(); }\n\n    /** Adds theOrder to the master order. \n     * @param the order the cookie order to add to the \n     * master order \n    */ \n    public void addOrder (CookieOrder theOrder) \n    { orders.add(theOrder); }\n\n    /** @return the sum of the number of boxes of all \n     * of the cookie orders\n    */\n\n    public int getTotalBoxes() \n    { /* to be implemented in part (a) */ }\n\n    /** Removes all cookie orders from the master order \n      * that have the same variety of \n      * cookie as cookieVar and returns the total \n      * number of boxes that were removed. \n      * @param cookieVar the variety of cookies to \n      * remove from the master order \n      * @return the total number of boxes of cookieVar \n      * in the cookie orders removed \n      */\n    public int removeVariety(String cookieVar) \n    { /* to be implemented in part (b) */ }\n\n    // There may be instance variables, constructors, \n    // and methods that are not shown.\n}\n\n(a) The getTotalBoxes method computes and returns the sum of the number of boxes of all cookie orders. If there are no cookie orders in the master order, the method returns 0. Complete method getTotalBoxes below.\n\n/** @return the sum of the number of boxes of all \n  * of the cookie orders\n */\npublic int getTotalBoxes()\n\n(b) The removeVariety method updates the master order by removing all of the cookie orders in which the variety of cookie matches the parameter cookieVar. The master order may contain zero or more cookie orders with the same variety as cookieVar. The method returns the total number of boxes removed from the master order. For example, consider the following code segment.\n\nMasterOrder goodies = new MasterOrder(); \ngoodies.addOrder(new CookieOrder(\"Chocolate Chip\", 1)); \ngoodies.addOrder(new CookieOrder(\"Shortbread\", 5)); \ngoodies.addOrder(new CookieOrder(\"Macaroon\", 2));\ngoodies.addOrder(new CookieOrder(\"Chocolate Chip\", 3));\n\nAlter the code segment has executed, the contents of the master order are as shown in the following table.\n\n\"Chocolate Chip\"\t: 1\n\"Shortbread\": 5 \n\"Macaroon\": 2\n\"Chocolate \nChip\": 3\n    \t\t        \nThe method call goodies.removeVariety(\"Chocolate Chip\") returns 4 because there were two Chocolate Chip cookie orders totaling 4 boxes. The master order is modified as shown below.\n\n\"Shortbread\": 5\t\t\n\"Macaroon\": 2\n\nThe method call goodies.removeVariety (\"Brownie\") returns 0 and does not change the master order.\n\n\nComplete method remove Variety below.\n/** Removes all cookie orders from the master order \n  * that have the same variety of \n  * cookie as cookieVar and returns the total number \n  * of boxes that were removed.\n  * @param cookieVar the variety of cookies to remove\n  * from the master order \n  * @return the total number of boxes of cookieVar \n  * in the cookie orders removed\n */\npublic int removeVariety (String cookieVar)\n",            "negative_points": "0", "duration_in_seconds": "1350",        "question_type": "5",    "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "\na)  private boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n    { \n       if (blackSquares[r][c] == false) {\n            if (r == 0 || c == 0) {\n                return true;\n            }\n            else if (blackSquares[r - 1][c] == true || blackSquares[r][c - 1] == true) {\n                return true;\n            }\n        }\n        return false;\n    }\n\nb)  public Crossword(boolean[][] blackSquares)\n    {\n        int k = 0;\n        boolean isBlack = true;\n        puzzle = new Square[blackSquares.length][blackSquares[0].length];\n        for (int r = 0;r < blackSquares.length;r++)\n        {\n            for (int c = 0;c < blackSquares[0].length;c++)\n            {\n                if(blackSquares[r][c] == true) \n                {\n                    puzzle[r][c] = new Square(isBlack,0); \n                }\n                else\n                {\n                    if(toBeLabeled(r, c, blackSquares) == true)\n                    {\n                        k++;\n                        puzzle[r][c]= new Square(!isBlack,k);\n                    }\n                    else\n                        puzzle[r][c]= new Square(!isBlack, 0);\n                }\n            }\n        }\n    }\n\n", "wrong_ans_explanation": "\na)  private boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n    { \n       if (blackSquares[r][c] == false) {\n            if (r == 0 || c == 0) {\n                return true;\n            }\n            else if (blackSquares[r - 1][c] == true || blackSquares[r][c - 1] == true) {\n                return true;\n            }\n        }\n        return false;\n    }\n\nb)  public Crossword(boolean[][] blackSquares)\n    {\n        int k = 0;\n        boolean isBlack = true;\n        puzzle = new Square[blackSquares.length][blackSquares[0].length];\n        for (int r = 0;r < blackSquares.length;r++)\n        {\n            for (int c = 0;c < blackSquares[0].length;c++)\n            {\n                if(blackSquares[r][c] == true) \n                {\n                    puzzle[r][c] = new Square(isBlack,0); \n                }\n                else\n                {\n                    if(toBeLabeled(r, c, blackSquares) == true)\n                    {\n                        k++;\n                        puzzle[r][c]= new Square(!isBlack,k);\n                    }\n                    else\n                        puzzle[r][c]= new Square(!isBlack, 0);\n                }\n            }\n        }\n    }\n\n", "question": " A crossword puzzle (picture below) grid is a two-dimensional rectangular array of black and white squares. Some of the white squares are labeled with a positive number according to the crossword labeling rule. The crossword labeling rule identifies squares to be labeled with a positive number as follows. A square is labeled with a positive number if and only if the square is white and\nthe square does not have a white square immediately above it, or it does not have a white square immediately to its left, or both. The squares identified by these criteria are labeled with consecutive numbers in row-major order, starting at 1.\nThe following diagram shows a crossword puzzle grid and the labeling of the squares according to the crossword labeling rule.\n\n(See figure crossword_puzzle)\n\nThis question uses two classes, a Square class that represents an individual square in the puzzle and Crossword class that represents a crossword puzzle grid. A partial declaration of the Square class is shown below.\n\npublic class Square\n{\n/** Constructs one square of a crossword puzzle grid. \n * Postcondition: \n * - The square is black if and only if isBlack is true. \n * - The square has number num.\n */\npublic Square (boolean isBlack, int num) \n{ /* implementation not shown */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\nA partial declaration of the Crossword class is shown below. You will implement one method and the constructor in the Crossword class.\n\npublic class Crossword\n{\n/** Each element is a Square object with a color (black or white) and a number. \n* puzzle[r][c] represents the square in row r, column c. \n* There is at least one row in the puzzle.\n*/\nprivate Square [][] puzzle;\n\n/** Constructs a crossword puzzle grid. \n * Precondition: There is at least one row in blackSquares. \n * Postcondition: \n * - The crossword puzzle grid has the same dimensions as blackSquares. \n * - The Square object at row r, column c in the crossword puzzle grid is black \n * if and only if blackSquares [r][c] is true. \n * - The squares in the puzzle are labeled according to the crossword labeling rule.\n */\npublic Crossword (boolean [][] blackSquares) \n{ /* to be implemented in part (b) */ }\n\n/** Returns true if the square at row r, column c should be labeled with a positive number: \n* false otherwise. \n* The square at row r, column c is black if and only if blackSquares [r] [c] is true. \n* Precondition: r and care valid indexes in blackSquares\n*/\nprivate boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n{ /* to be implemented in part (a) */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\na) Write the Crossword method toBeLabeled. The method returns true if the square indexed by row r, column c in a crossword puzzle grid should be labeled with a positive number according to the crossword labeling rule; otherwise it returns false. The parameter blackSquares indicates which squares in the crossword puzzle grid are black. \n\nComplete method toBeLabeled below.\n\n/** Returns true if the square at row r, column c should be labeled with a positive number;\n * false otherwise.\n * The square at row r, column c is black if and only if blackSquares [r][c] is true.\n * Precondition: r and c are valid indexes in blackSquares.\n */\nprivate boolean toBeLabeled(int r, int c, boolean[][] black Squares)\n\n(b) Write the Crossword constructor. The constructor should initialize the crossword puzzle grid should be the same dimensions as the parameter blackSquares. Each element of the puzzle grid should be initialized with a reference to a Square object with the appropriate color and number. The number is positive if the square is labeled and 0 if the square is not labeled.\n\nAssume that toBeLabeled works as specified, regardless of what you wrote in part (a). You must use toBeLabeled appropriately to receive full credit. \n\nComplete the Crossword constructor below.\n\n/** Constructs a crossword puzzle grid.\n * Precondition: There is at least one row in blackSquares.\n * Postcondition:\n * - The crossword puzzle grid has the same dimensions as blackSquares.\n * - The Square object at row r, column c in the crossword puzzle grid is black\n * if and only if blackSquares[r][c] is true.\n * - The squares in the puzzle are labeled according to the crossword labeling rule.\n */\npublic Crossword(boolean[][] blackSquares)\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": "crossword_puzzle.jpg"}, {"points": "14", "Answer": "0", "correct_ans_explanation": "\na)  public class Cat extends Pet\n    {\n\n        public Cat(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            return \"meow\u201d;\n        }\n\n    }\n\nb)  public class Loud Dog extends Dog\n    {\n        public Loud Dog(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            string s= super.speak(); \n            return s + s;\n        }\n    }\n\nc)  public void allSpeak()\n    {\n        for (int i = 0; i < petList.size();i++)\n        {\n            Pet pet = (Pet) petList.get(i); \n            System.out.println(pet.getName() + \u201c\u201d + pet.speak());\n        }\n    }\n\n\n", "wrong_ans_explanation": "\na)  public class Cat extends Pet\n    {\n\n        public Cat(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            return \"meow\u201d;\n        }\n\n    }\n\nb)  public class Loud Dog extends Dog\n    {\n        public Loud Dog(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            string s= super.speak(); \n            return s + s;\n        }\n    }\n\nc)  public void allSpeak()\n    {\n        for (int i = 0; i < petList.size();i++)\n        {\n            Pet pet = (Pet) petList.get(i); \n            System.out.println(pet.getName() + \u201c\u201d + pet.speak());\n        }\n    }\n\n\n", "question": "Consider the hierarchy of classes shown in the following diagram.\n                                    Pet\n                                   \u2191   \u2191\n                                 Cat   Dog\n                                         \u2191\n                                      Loud Dog\nNote that a Cat is-a Pet, a Dog is-a Pet, and a LoudDog is-a Dog. The class Pet is specified as an abstract class as shown in the following declaration. Each Pet has a name that is specified when it is constructed.\npublic abstract class Pet\n{\n\n   private String myName; \n   public Pet(String name) \n   { myName = name; }\n\n   public String getName() \n   { return myName; }\n     \n   public abstract String speak();\n}\n\n  The subclass Dog has the partial class declaration shown below.\npublic class Dog extends Pet\n{\n      public Dog (String name) \n      { /* implementation not shown */ }\n\n\n      public String speak () \n      { /* implementation not shown */ }\n\n(a) Given the class hierarchy shown above, write a complete class declaration for the class Cat, including implementations of its constructor and method(s). The Cat method speak-returns \"meow\" when it is invoked.\n\n(b) Assume that class Dog has been declared as shown at the beginning of the question. If the String dog-sound is returned by the Dog method speak, then the LoudDog method speak returns a String containing dog-sound repeated two times. Given the class hierarchy shown previously, write a complete class declaration for the class LoudDog, including implementations of its constructor and method(s).\n\n(c) Consider the following partial declaration of class Kennel.\n\n      public class Kennel\n      {\n         private ArrayList petList;  // all elements are references\n                                     // to Pet objects\n  \n         // post condition: for each Pet in the kennel, its name followed \n         // by the result of a call to its speak method \n         // has been printed, one line per Pet \n         public void allSpeak() \n         { /* to be implemented in this part */ }\n\n         // ... constructor and other methods not shown\n}\n\n\nWrite the Kennel method allSpeak. For each Pet in the kennel, allSpeak prints a line with the name of the Pet followed by the result of a call to its speak method. In writing allSpeak, you may use any of the methods defined for any of the classes specified for this problem. Assume that these methods work as specified, regardless of what you wrote in parts (a) and (b). Solutions that reimplement functionality provided by these methods, rather than invoking these methods, will not receive full credit. \n\nComplete method allSpeak below.\n\n      // postcondition: for each Pet in the kennel, its name followed \n      // by the result of a call to its speak method \n      // has been printed, one line per Pet \n      public void allSpeak ()\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "14", "Answer": "0", "correct_ans_explanation": "\na)  private void fillBlock(String str)\n    {\n        int i = 0; \n        for (int r = 0; r < numRows; r++)\n        {\n            for (int c = o; c < numCols; c++) \n            { \n                if (i < str.length())\n                   letterBlock[r][c]= str.substring(i,i+1); \n                else\n                   letterBlock[r][c] = \"A\";\n                    i++;\n            }\n        }\n    }\n\nb)  private String encryptBlock()\n    {\n        String s = \"\"; \n        for (int c = 0; c < numCols; c++)\n        {\n            for (int r = 0; r < numRows, r++)\n            {\n                s += letterBlock[r][c]; \n            }\n        }\n        return s;\n    }\n\nc)  public String encrypt Message (String message)\n    {\n        String c = \"\"; \n        while (message.length() > 0)\n        {\n            int n = numRows * numcols; \n            if (n > message.length())\n                n = message.length();\n            fillBlock(message.substring(0,n)); \n            c += encryptBlock(); \n            message = message.substring(n);\n        }\n        return c;\n    }\n", "wrong_ans_explanation": "\na)  private void fillBlock(String str)\n    {\n        int i = 0; \n        for (int r = 0; r < numRows; r++)\n        {\n            for (int c = o; c < numCols; c++) \n            { \n                if (i < str.length())\n                   letterBlock[r][c]= str.substring(i,i+1); \n                else\n                   letterBlock[r][c] = \"A\";\n                    i++;\n            }\n        }\n    }\n\nb)  private String encryptBlock()\n    {\n        String s = \"\"; \n        for (int c = 0; c < numCols; c++)\n        {\n            for (int r = 0; r < numRows, r++)\n            {\n                s += letterBlock[r][c]; \n            }\n        }\n        return s;\n    }\n\nc)  public String encrypt Message (String message)\n    {\n        String c = \"\"; \n        while (message.length() > 0)\n        {\n            int n = numRows * numcols; \n            if (n > message.length())\n                n = message.length();\n            fillBlock(message.substring(0,n)); \n            c += encryptBlock(); \n            message = message.substring(n);\n        }\n        return c;\n    }\n", "question": "In this question you will write two methods for a class RouteCipher that encrypts (puts into a coded form) a message by changing the order of the characters in the message. The route cipher fills a two dimensional array with single-character substrings of the original message in row-major order, encrypting the message by retrieving the single-character substrings in column-major order.\nFor example, the word \"Surprise\" can be encrypted using a 2-row, 4-column array as follows\n\nOriginal Message\n\"Surprise\"\n\nContents of Array\n\u201cs\u201d \u201cu\u201d \u201cr\u201d \u201cp\u201d\n\u201cr\u201d \u201ci\u201d \u201cs\u201d \u201ce\u201d\n\nEncrypted\n\u201cSruirspe\u201d\n                       \n\nAn incomplete implementation of the RouteCipher class is shown below.\n\npublic class RouteCipher\n{\n/** A two-dimensional array of single-character strings, instantiated in the constructor */ private String[][] letterBlock;\n\n/** The number of rows of letterBlock, set by the constructor */ private int numRows;\n\n/** The number of columns of letterBlock, set by the constructor */ \nprivate int numCols;\n\n/** Places a string into letterBlock in row-major order.\n * @param str the string to be processed\n * Postcondition:\n * if str.length() < numRows * numCols, \"A\" is placed in each    unfilled cell \n * if str.length() > numRows * numCols, trailing characters are ignored\n */\nprivate void fillBlock(String str) \n{ /* to be implemented in part (a) */ }\n\n/** Extracts encrypted string from letterBlock in column-major order. \n* Precondition: letterBlock has been filled\n* @return the encrypted string from letterBlock\n*/\n\nprivate String encryptBlock() \n{ /* implementation not shown */ }\n\n/** Encrypts a message. \n* @param message the string to be encrypted \n* @return the encrypted message; \n* if message is the empty string, returns the empty string\n*/\n\npublic String encryptMessage(String message) \n{ /* to be implemented in part (b) */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\n(a) Write the method fillBlock that fills the two-dimensional array letterBlock with one-character strings from the string passed as parameter str. \n\nThe array must be filled in row-major order - the first row is filled from left to right, then the second row is filled from left to right, and so on, until all rows are filled. \n\nIf the length of the parameter str is smaller than the number of elements of the array, the string \"A\" is placed in each of the unfilled cells. If the length of str is larger than the number of elements in the array, the trailing characters are ignored. \n\nFor example, if letterBlock has 3 rows and 5 columns and str is the string \"Meet at noon\", the resulting contents of letterBlock would be as shown in the following table.\n\t\t\t\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cn\u201d \u201co\u201d\n\t\t\t\u201co\u201d \u201cn\u201d \u201cA\u201d \u201cA\u201d \u201cA\u201d\n\nIf letterBlock has 3 rows and 5 columns and str is the string \"Meet at midnight\", the resulting contents of letterBlock would be as shown in the following table.\n\t\t\t\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cm\u201d \u201ci\u201d\n\t\t\t\u201cd\u201d \u201cn\u201d \u201ci\u201d \u201cg\u201d \u201ch\u201d\n\nThe following expression may be used to obtain a single-character string at position k of the string str.\n\nstr.substring(k, k + 1)\n\n\nComplete method fillBlock below.\n\n/** Place a string into letterBlock in row-major order. \n * @param str the string to be processed\n * Postcondition: \n * if str.length() < numRows * numCols, \"A\" is placed in each   unfilled cell\n * If str.length() > numRows * numCols, trailing characters are ignored\n */\n     private void fillBlock(String str)\n\n(b) Write the method encryptBlock that accesses the letterBlock, which has previously been filled by the fillBlock method, and returns its contents in column major order. For example, if the filled block\nis\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cm\u201d \u201ci\u201d\n\t\t\t\u201cd\u201d \u201cn\u201d \u201ci\u201d \u201cg\u201d \u201ch\u201d\t\n\nthe method will return the string \"Madetne itmg ih\". Complete the method encryptBlock below.\n\n/** Extracts encrypted string from letterBlock in column-major order.\n * Precondition: letterBlock has been filled\n * @return the encrypted string from letterBlock\n */\nprivate String encryptBlock()\n\nc) Write the method encrypt Message that encrypts its string parameter message. The method builds an encrypted version of message by repeatedly calling fillBlock with consecutive, non overlapping substrings of message and concatenating the results returned by a call to encryptBlock after each call to fillBlock. When all of the messages have been processed, the concatenated string is returned. Note that this message is the empty string, encrypt Message returns an empty string. The following exam shows the process carried out if letterBlock has 2 rows and 3 columns and encrypt Message(\"Meet at midnight\")is executed.\n\nSubstring\nletterBlock after Call to fillBlock\nValue Returned by encryptBlock\nConcatenated String\n\n\"Meet a\"\n\u201cM\u201d \u201ce\u201d \u201ce\u201d\n\u201ct\u201d \u201c \u201d \u201ca\u201d\n\u201cMte ea\u201d\n\u201cMte ea\u201d\n\n\u201ct midn\u201d\n\u201ct\u201d \u201c \u201d \u201cm\u201d\n\u201ci\u201d \u201cd\u201d \u201cn\u201d\n\u201cti dmn\u201d\n\u201cMte eati dmn\u201d\n\n\"ight\"\n\u201ci\u201d \u201cg\u201d \u201ch\u201d\n\u201ct\u201d \u201cA\u201d \u201cA\u201d\n\"itgAhA\"\n\"Mte eati dmnitgAhA\"     \n\t\t    \n\nIn this example, the method returns the string \"Mte eati dmnitgAhA\".\n \nAssume that fillBlock and encryptBlock methods work as specified. Solutions that reimplement the functionality of one or both of these methods will not receive full credit.\n\nComplete method encrypt Message below.\n\n/** Encrypts a message.\n * @param message the string to be encrypted\n * @return the encrypted message;\n * if message is the empty string, returns the empty string\n */\n      public String encryptMessage(String message)\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": ""}]}       