{"Questions": [{"points": "1", "Answer": "0", "correct_ans_explanation": "To simplify the problem, we can count the amount of times the parameter of the mystery method becomes less than 0 because 2 is added every time this occurs. When mystery(3) is called, mystery is called twice more, with k being 2 and 0. Let\u2019s focus on k = 0. When this happens, k now becomes -1 and -3, which means k has gone below 0 twice. When k is 2, we can see that k will branch off into k = 1 and k = -1. k = 1 will branch off into k = 0 and k = -2. k = 0 will then branch off into k = -1 and k = -3. This results in a total of 6 times k goes below 0. Therefore, 2 is added 6 times, which results in 12 being returned by mystery(3).\n", "wrong_ans_explanation": "To simplify the problem, we can count the amount of times the parameter of the mystery method becomes less than 0 because 2 is added every time this occurs. When mystery(3) is called, mystery is called twice more, with k being 2 and 0. Let\u2019s focus on k = 0. When this happens, k now becomes -1 and -3, which means k has gone below 0 twice. When k is 2, we can see that k will branch off into k = 1 and k = -1. k = 1 will branch off into k = 0 and k = -2. k = 0 will then branch off into k = -1 and k = -3. This results in a total of 6 times k goes below 0. Therefore, 2 is added 6 times, which results in 12 being returned by mystery(3).\n", "question": "Refer to the following recursive method.\n\n    public int mystery(int k)\n    {\n        if (k < 0)\n            return 2;\n        else\n            return mystery(k - 1) + mystery(k - 3);\n    }\n\nWhat value is returned by the call mystery(3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 12        \n\n", "\n 10\n\n", "\n 8\n\n", "\n 6\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "For these types of problems, we just have to keep track of the multiple branches of method calls. k = 5 branches off into k = 4 and k = 3. k = 3 branches off into k = 2 and k = 1. Therefore, something(3) = (2 * 2) - (2 * 1) = 2. We can now come back to k = 4, which branches off into k = 3 and k = 2. Since we know that something(3) = 2 and something(2) = 4, something(4) = 2 - 4 = -2. Finally, something(5) = something(4) - something(3) = -2 - 2 = -4. \n", "wrong_ans_explanation": "For these types of problems, we just have to keep track of the multiple branches of method calls. k = 5 branches off into k = 4 and k = 3. k = 3 branches off into k = 2 and k = 1. Therefore, something(3) = (2 * 2) - (2 * 1) = 2. We can now come back to k = 4, which branches off into k = 3 and k = 2. Since we know that something(3) = 2 and something(2) = 4, something(4) = 2 - 4 = -2. Finally, something(5) = something(4) - something(3) = -2 - 2 = -4. \n", "question": "Refer to the method something:\n\n    // param k a positive integer\n    public int something(int k)\n    {\n        if (k == 1 || k == 2)\n            return 2 * k;\n        else\n            return something(k - 1) - something(k - 2);\n    }\n\nWhat will be returned by something(5)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 4\n\n", "\n 2\n\n", "\n -2\n\n", "\n -4            \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Let us first consider all the calls to something from something(3). Including something(3), something is called 3 times because something(1) and something(2) is called. something(4) results in 5 calls because something(2) and something(3) is called. something(5) is called 9 times because something(4) and something(3) is called. Therefore, including the call to itself, something(6) will be called 15 times because something(4) and something(5) is called. \n", "wrong_ans_explanation": "Let us first consider all the calls to something from something(3). Including something(3), something is called 3 times because something(1) and something(2) is called. something(4) results in 5 calls because something(2) and something(3) is called. something(5) is called 9 times because something(4) and something(3) is called. Therefore, including the call to itself, something(6) will be called 15 times because something(4) and something(5) is called. \n", "question": "Refer to the method something:\n\n    // param k a positive integer\n    public int something(int k)\n    {\n        if (k == 1 || k == 2)\n            return 2 * k;\n        else\n            return something(k - 1) - something(k - 2);\n    }\n\nFor the method call something(6), how many calls to something will be made, including the original call?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 7\n\n", "\n 11\n\n", "\n 15        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question requires you to follow the path of the different calls that are being made. This can all be summed up into one large expression\n\na(5, 3) = 5 + b(4, 3) = 5 + 4 + a(2, 3) = 9 + 2 + b(1, 3) = 11 + 1 + 3 = 15.\n", "wrong_ans_explanation": "This question requires you to follow the path of the different calls that are being made. This can all be summed up into one large expression\n\na(5, 3) = 5 + b(4, 3) = 5 + 4 + a(2, 3) = 9 + 2 + b(1, 3) = 11 + 1 + 3 = 15.\n", "question": "This question refers to methods a and b that are in the same class:\n\n    public int a(int x, int y)\n    {\n        if (x == y)\n            return y;\n        else\n            return x + b(x - 1, y);\n    }\n\n    public int b( int c, int d )\n    {\n        if ( c < d )\n            return c + d;\n        else\n            return c + a( c - 2, d );\n    }\n\nWhat value will be returned by a call to a(5, 3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 7\n\n", "\n 12\n\n", "\n 15         \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "For these recursion questions, it is most likely best to write out the full expression unless there is a pretty obvious pattern. Here is the expression:\n\nint z = f(f(3) + f(4)) = f(3 + 4 * f(3)) = f(3 + 4 * 3) = f(15) = 15 * f(14)\u2026\n\nAs can be seen once f(15) is called, there is a pattern. Every time a decreases by 1, the result is multiplied by a until a = 3. Therefore, f(15) will return 15 * 14 * 13 * \u2026 * 4 * 3. This is equivalent to (15!) / (2!).\n", "wrong_ans_explanation": "For these recursion questions, it is most likely best to write out the full expression unless there is a pretty obvious pattern. Here is the expression:\n\nint z = f(f(3) + f(4)) = f(3 + 4 * f(3)) = f(3 + 4 * 3) = f(15) = 15 * f(14)\u2026\n\nAs can be seen once f(15) is called, there is a pattern. Every time a decreases by 1, the result is multiplied by a until a = 3. Therefore, f(15) will return 15 * 14 * 13 * \u2026 * 4 * 3. This is equivalent to (15!) / (2!).\n", "question": "Consider method f:\n\n    public int f( int a ) \n     {\n        if (a == 1 || a == 3)\n            return a;\n        else\n            return a * f(a - 1);\n    }\n\nAssuming no possibility of integer overflow, what will be the value of z after execution of the following statement?\n\n    int z = f(f(3) + f(4));\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n (15!)/(2!)         \n\n", "\n 3! + 4!\n\n", "\n (7!)!\n\n", "\n (3! + 4!)!\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Algorithm design is generally a trade-off between time and space. Algorithms with a low space complexity may require more time, and algorithms with a low time complexity may require more space. Moreover, for some algorithms like merge sort, space required is linearly dependent of array size. Therefore, you have to think of all three factors before deciding a sorting algorithm. \n", "wrong_ans_explanation": "Algorithm design is generally a trade-off between time and space. Algorithms with a low space complexity may require more time, and algorithms with a low time complexity may require more space. Moreover, for some algorithms like merge sort, space required is linearly dependent of array size. Therefore, you have to think of all three factors before deciding a sorting algorithm. \n", "question": "The decision to choose a particular sorting algorithm should be made based on     \n\n    I. Run-time efficiency of the sort\n    II. Size of the array\n    III. Space efficiency of the algorithm\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III        \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In this code fragment, the while loop serves to check if value is in the array. 2 things must be checked if the while loop is to keep running. Firstly, j must be less than n so as to avoid an IndexOutOfBounds Exception. Secondly, value must not be equal to a[j] because when value is equal to a[j], the program should be able to break out of the while loop and return j in the final else statement. Additionally, there must be an and operand connecting these two conditions because both of these conditions must be true before increasing j.\n", "wrong_ans_explanation": "In this code fragment, the while loop serves to check if value is in the array. 2 things must be checked if the while loop is to keep running. Firstly, j must be less than n so as to avoid an IndexOutOfBounds Exception. Secondly, value must not be equal to a[j] because when value is equal to a[j], the program should be able to break out of the while loop and return j in the final else statement. Additionally, there must be an and operand connecting these two conditions because both of these conditions must be true before increasing j.\n", "question": "The following code fragment does a sequential search to determine whether a given integer, value, is stored in an array a[0] \u2026 a[n - 1].\n\n    int j = 0;\n    while ( /* boolean expression */ )\n    {\n        j++;\n    }\n    if (j == n)\n        return -1;        // value not found\n    else\n        return j;\t\t// value found at location j\n\nWhich of the following should replace /* boolean expression */ so that the algorithm works as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n value != a[j]\n\n", "\n j < n && value == a[j]\n\n", "\n j < n || value != a[j]\n\n", "\n j < n && value != a[j]          \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: Sequential search does not need an ordered set of data. Binary searches, on the other hand, require the data to be ordered in some form or the other.\n", "wrong_ans_explanation": "Remember: Sequential search does not need an ordered set of data. Binary searches, on the other hand, require the data to be ordered in some form or the other.\n", "question": "A feature of data that is used for a binary search but not necessarily used for a sequential search is\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n length of list\n\n", "\n type of data\n\n", "\n order of data        \n\n", "\n smallest value in the list\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Inserting a new element is equally efficient using sorted or unsorted arrays. Computing the mean of elements is also equally efficient for sorted and unsortedArray because all the elements need to added up and then divided by the number of elements. Having a sorted array does not provide any advantages in this case. However, searching for a given element is much more efficient for sortedArray because a binary search can be used rather than a sequential search. Therefore, only option II is correct.\n", "wrong_ans_explanation": "Inserting a new element is equally efficient using sorted or unsorted arrays. Computing the mean of elements is also equally efficient for sorted and unsortedArray because all the elements need to added up and then divided by the number of elements. Having a sorted array does not provide any advantages in this case. However, searching for a given element is much more efficient for sortedArray because a binary search can be used rather than a sequential search. Therefore, only option II is correct.\n", "question": "Array unsortedArray contains an unsorted list of integers. Array sortedArray contains a sorted list of integers. Which of the following operations is more efficient for sortedArray than unsortedArray? Assume the most efficient algorithms are used.\n\n    I. Inserting a new element\n    II. Searching for a given element\n    III. Computing the mean of the elements.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only         \n\n", "\n III only\n\n", "\n I and II only\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "A binary search starts from the middle position of the array and then compares it to the target value. If x was in the middle position, a binary search would use fewer comparisons. If x was close to the end of the array, the binary search would use fewer comparisons again because this algorithm starts from the beginning to the end while binary search starts fro the middle. If x was close to the beginning of the array, the algorithm would use fewer comparisons because the algorithm starts from the beginning of the array. \n", "wrong_ans_explanation": "A binary search starts from the middle position of the array and then compares it to the target value. If x was in the middle position, a binary search would use fewer comparisons. If x was close to the end of the array, the binary search would use fewer comparisons again because this algorithm starts from the beginning to the end while binary search starts from the middle. If x was close to the beginning of the array, the algorithm would use fewer comparisons because the algorithm starts from the beginning of the array. \n", "question": "An algorithm for searching a large sorted array for a specific value x compares every third item in the array to x until it finds one that is greater than or equal to x. When a larger value is found, the algorithm compares x to the previous two items. If the array is sorted in increasing order, which of the following describes all cases when this algorithm uses fewer comparisons to find x than would a binary search?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n When x is in the middle position of the array\n\n", "\n When x is very close to the end of the array\n\n", "\n When x is very close to the beginning of the array         \n\n", "\n When x is not in the array\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since a[0] is greater than every other value in the array, a[0] must be the largest value in the array. \n", "wrong_ans_explanation": "Since a[0] is greater than every other value in the array, a[0] must be the largest value in the array. \n", "question": "Assume that a[0] \u2026 a[N - 1] is an array of N positive integers and that the following assertion is true:\n\n    a[0] > a[k] for all k such that 0 < k < N\n\nWhich of the following must be true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The array sorted in ascending order.\n\n", "\n The array is sorted in descending order.\n\n", "\n a[0] holds the smallest value in the array.\n\n", "\n a[0] holds the largest value in the array.            \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "If k does not exist in the array, the while loop will keep iterating and index will keep increasing, resulting in an infinite loop.\n", "wrong_ans_explanation": "If k does not exist in the array, the while loop will keep iterating and index will keep increasing, resulting in an infinite loop.\n", "question": "The following code is designed to set index to the location of the first occurrence of k in array a and set index to -1 if key is not in a.\n\n    index = 0;\n    while (a[index] != k)\n        index++;\n    if (a[index] != k)\n        index = -1;\n\nIn which case will this program definitely fail to perform the task described?\t\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n When k is the first element of the array\n\n", "\n When k is the last element of the array\n\n", "\n When k is not in the array              \n\n", "\n When k equals 0\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since a.length = 8, high = 7, which means that mid = (7 + 0) / 2 = 3 (round down because it is an integer). Because[3] < 27, low = 4. This means that the search interval after the first pass through the while loop is a[4] \u2026 a[7]. \n", "wrong_ans_explanation": "Since a.length = 8, high = 7, which means that mid = (7 + 0) / 2 = 3 (round down because it is an integer). Because[3] < 27, low = 4. This means that the search interval after the first pass through the while loop is a[4] \u2026 a[7]. \n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nTo find the k value 27, the search interval after the first pass through the while loop will be\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n a[0] \u2026 a[7]\n\n", "\n a[2] \u2026 a[6]\n\n", "\n a[4] \u2026 a[7]           \n\n", "\n a[6] \u2026 a[7]\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since a.length = 8, the first iteration will have mid = (0 + 7) / 2 = 3. Because a[3] < 27, low = 4. In the second iteration, mid = (4 + 7) / 2 = 5. Since a[5] < 27, low = 6. In the third iteration, mid = (6 + 7) / 2 = 6. Since a[6] > 27, high = 5. Due to the fact that low is now greater than high, the while loop will end and -1 will be returned. Therefore, 3 iterations will be required to determine that 27 is not in the list.\n", "wrong_ans_explanation": "Since a.length = 8, the first iteration will have mid = (0 + 7) / 2 = 3. Because a[3] < 27, low = 4. In the second iteration, mid = (4 + 7) / 2 = 5. Since a[5] < 27, low = 6. In the third iteration, mid = (6 + 7) / 2 = 6. Since a[6] > 27, high = 5. Due to the fact that low is now greater than high, the while loop will end and -1 will be returned. Therefore, 3 iterations will be required to determine that 27 is not in the list.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nHow many iterations will be required to determine that 27 is not in the list?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1\n\n", "\n 3         \n\n", "\n 8\n\n", "\n 27\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "As can be seen, the binarySearch is searching for 4, which is stored in a[0]. Since the program returns the index of k, the value of z will be 0.\n", "wrong_ans_explanation": "As can be seen, the binarySearch is searching for 4, which is stored in a[0]. Since the program returns the index of k, the value of z will be 0.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nWhat will be stored in z after executing the following?\n\n    int z = binarySearch(4);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 20\n\n", "\n 7\n\n", "\n 4\n\n", "\n 0           \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Since the elements at the beginning and end of the array, i.e. a[0] and a[7], do not have elements before and after it, the only way to perform a binary search on these elements without error would be to have low and high equal that index. However, if low cannot be equal to high, then values such as a[0] = 4 cannot be found.\n", "wrong_ans_explanation": "Since the elements at the beginning and end of the array, i.e. a[0] and a[7], do not have elements before and after it, the only way to perform a binary search on these elements without error would be to have low and high equal that index. However, if low cannot be equal to high, then values such as a[0] = 4 cannot be found.\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n    a[0]\t\ta[1] \t\ta[2]\t\ta[3]\t\ta[4]\t\ta[5]\t\ta[6]\t\ta[7]\n      4\t\t    7               9              11            20          24              30            41\n\nIf the test for the while loop is changed to \n\n    while (low < high)\n\nthe binarySearch method does not work as intended. Which value in the given list will not be found?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 4          \n\n", "\n 7\n\n", "\n 11\n\n", "\n 24\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The answer that would usually first come to mind is:\n\na[low] <= k <= a[high]\n\nHowever, considering that we are looking at the values following every iteration of the while loop, k could also not be part of the array, which would make the previous statement false. Additionally, the target value, k, could be equal to a[mid]. Therefore, this assertion will be true following every iteration of the while loop:\n\nk = a[mid], or a[low] <= k <= a[high], or k is not in array a\n", "wrong_ans_explanation": "The answer that would usually first come to mind is:\n\na[low] <= k <= a[high]\n\nHowever, considering that we are looking at the values following every iteration of the while loop, k could also not be part of the array, which would make the previous statement false. Additionally, the target value, k, could be equal to a[mid]. Therefore, this assertion will be true following every iteration of the while loop:\n\nk = a[mid], or a[low] <= k <= a[high], or k is not in array a\n", "question": "Refer to the binarySearch method and the private instance variable a for some class:\n\n    private int[] a;\n\n    // Does binary search for k in array[0] \u2026 a[a.length - 1], sorted in ascending order.\n    // param k the integer value to be found\n    // Postcondition: \tindex has been returned such that a[index] == k.\t\t\n                    If k not in a, return -1.\n    public int binarySearch(int k)\n    {\n        int low = 0;\n        int high = a.length - 1;\n        while (low <= high)\n        {\n            int mid = (low + high) / 2;\n            if (a[mid] == k)\n                return mid;\t\n            else if (a[mid] < k)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        return -1;\n    }\n\nA binary search will be performed on the following list.\t\n\n   a[0]   a[1]   a[2]   a[3]   a[4]   a[5]   a[6]   a[7]\n   4   7   9   11   20   24   30   41\n\nFor binarySearch, which of the following assertions will be true following every iteration of the while loop?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n low <= mid <= high\n\n", "\n a[low] <= k <= a[high]\n\n", "\n k = a[mid], or a[low] <= k <= a[high]\n\n", "\n k = a[mid], or a[low] <= k <= a[high], or k is not in array a.             \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Although 600 elements may seem like a lot, we can calculate the maximum number of iterations pretty easily. Here is a step-by-step process:\n\n(0 + 600) / 2 = 300\n(300 + 600) / 2 = 450\n(450 + 600) / 2 = 525\n(525 + 600) / 2 = 562\n(562 + 600) / 2 = 581\n(581 + 600) / 2 = 590\n(590 + 600) / 2 = 595\n(595 + 600) / 2 = 597\n(597 + 600) / 2 = 598\n(598 + 600) / 2 = 599\n\nTherefore, the maximum number of iterations of the algorithm would be 10.\n", "wrong_ans_explanation": "Although 600 elements may seem like a lot, we can calculate the maximum number of iterations pretty easily. Here is a step-by-step process:\n\n(0 + 600) / 2 = 300\n(300 + 600) / 2 = 450\n(450 + 600) / 2 = 525\n(525 + 600) / 2 = 562\n(562 + 600) / 2 = 581\n(581 + 600) / 2 = 590\n(590 + 600) / 2 = 595\n(595 + 600) / 2 = 597\n(597 + 600) / 2 = 598\n(598 + 600) / 2 = 599\n\nTherefore, the maximum number of iterations of the algorithm would be 10.\n", "question": "A binary search is to be performed on an array with 600 elements. In the worst case, which of the following best approximates the number of iterations of the algorithm?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 10           \n\n", "\n 100\n\n", "\n 300\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The worst case scenario for insertion sort would be a list sorted in reverse order because it would take the most iterations, and therefore the most computing power, to swap the elements in reverse order back into their sorted order by manually inserting each element back into their correct place. \n", "wrong_ans_explanation": "The worst case scenario for insertion sort would be a list sorted in reverse order because it would take the most iterations, and therefore the most computing power, to swap the elements in reverse order back into their sorted order by manually inserting each element back into their correct place. \n", "question": "A worst case scenario for insertion sort would be \n\n    I. A list in correct sorted order.\n    II. A list sorted in reverse order.\n    III. A list in random order.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only            \n\n", "\n III only\n\n", "\n I and II only\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "U do not need to manually figure out the maximum number of times that a binary search algorithm will execute its main comparison loop. Instead, you can just calculate a few iterations:\n\n(0 + 1000000) = 500000\n(500000 + 1000000) = 750000\n(750000 + 1000000) = 875000\n\u2026\n\nSince we are already at 875,000 / 1,000,000, it is quite obvious that it will take more than 6 iterations but less than 100 iterations. Therefore, we can safely say that it will take a maximum of about 20 iterations. \n", "wrong_ans_explanation": "U do not need to manually figure out the maximum number of times that a binary search algorithm will execute its main comparison loop. Instead, you can just calculate a few iterations:\n\n(0 + 1000000) = 500000\n(500000 + 1000000) = 750000\n(750000 + 1000000) = 875000\n\u2026\n\nSince we are already at 875,000 / 1,000,000, it is quite obvious that it will take more than 6 iterations but less than 100 iterations. Therefore, we can safely say that it will take a maximum of about 20 iterations. \n", "question": "Consider a binary search algorithm to search an ordered list of numbers. Which of the following choices is closest to the maximum number of times that such an algorithm will execute its main comparison loop when searching a list of 1 million numbers?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 20        \n\n", "\n 100\n\n", "\n 120\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "A binary search takes much less average run time than a sequential search when the data set is sorted. Additionally, search tasks usually take a shorter amount of time than sorting tasks. Therefore, we can conclude that the binary search has the least time, then sequential search, and the insertion sort will require the greatest time. The correct order is II, I, III.\n", "wrong_ans_explanation": "A binary search takes much less average run time than a sequential search when the data set is sorted. Additionally, search tasks usually take a shorter amount of time than sorting tasks. Therefore, we can conclude that the binary search has the least time, then sequential search, and the insertion sort will require the greatest time. The correct order is II, I, III.\n", "question": "Consider these three tasks:\n\n    I. A sequential search of an array of n names\n    II. A binary search of an array of n names in alphabetical order\n    III. An insertion sort into alphabetical order of an array of n names that are initially in random order\n\nFor large n, which of the following lists these tasks in order (from least to greatest) of their average case run times?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II, I, III          \n\n", "\n II, III, I\n\n", "\n III, I, II\n\n", "\n I, II, III\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The primary reason mergesort is considered a better sorting algorithm is because it runs faster than insertion sort and other sorting methods. However, it requires much more code and more storage space than insertion sort. Therefore, III only is the correct answer.\n", "wrong_ans_explanation": "The primary reason mergesort is considered a better sorting algorithm is because it runs faster than insertion sort and other sorting methods. However, it requires much more code and more storage space than insertion sort. Therefore, III only is the correct answer.\n", "question": "Which of the following is a valid reason why merge sort is a better sorting algorithm than insertion sort for sorting long, randomly ordered lists?\n\n        I. Mergesort requires less code than insertion sort.\n        II. Mergesort requires less storage space than insertion sort.\n        III. Mergesort runs faster than insertion sort.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only             \n\n", "\n I and II only \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Merge sort divides the input array in two halves, sort the two halves recursively, and then merge the results. The merge method is used for merging two sorted halves. \n", "wrong_ans_explanation": "Merge sort divides the input array in two halves, sort the two halves recursively, and then merge the results. The merge method is used for merging two sorted halves. \n", "question": "Assume that mergesort will be used to sort an array a of n integers into increasing order. What is the purpose of the merge method in the merge sort algorithm?          \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Use a recursive algorithm to sort a into increasing order.\n\n", "\n Divide a into n subarrays, each with one element.\n\n", "\n Merge two sorted arrays into a temporary array that is sorted.\n\n", "\n Merge two sorted parts of a into a single sorted array.          \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Here is the step-by-step process that the computer will do for a binary search:\n\n(1 + 100) / 2 = 50\n(50 + 100) / 2 = 75\n(75 + 100) / 2 = 87\n(87 + 100) / 2 = 93\n(93 + 100) / 2 = 97\n(97 + 100) / 2 = 98\n(98 + 100) / 2 = 99\n\nTherefore, the maximum number of guesses the computer should make before guessing the user\u2019s number is 7.\n", "wrong_ans_explanation": "Here is the step-by-step process that the computer will do for a binary search:\n\n(1 + 100) / 2 = 50\n(50 + 100) / 2 = 75\n(75 + 100) / 2 = 87\n(87 + 100) / 2 = 93\n(93 + 100) / 2 = 97\n(97 + 100) / 2 = 98\n(98 + 100) / 2 = 99\n\nTherefore, the maximum number of guesses the computer should make before guessing the user\u2019s number is 7.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n    \u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n    \u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n    \u201cyou got it in <however many> tries!\u201d\n\nSuppose the game is programmed so that the computer uses a binary search strategy for making its guesses. What is the maximum number of guesses the computer should make before guessing the user\u2019s number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 50\n\n", "\n 25\n\n", "\n 10\n\n", "\n 7        \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "If the integer was 100, the computer would make 100 guesses before guessing the user\u2019s number because a sequential search starts from 1 and then goes all the way to 100 one by one.\n", "wrong_ans_explanation": "If the integer was 100, the computer would make 100 guesses before guessing the user\u2019s number because a sequential search starts from 1 and then goes all the way to 100 one by one.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n\u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n\u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n\u201cyou got it in <however many> tries!\u201d\n\nSuppose the computer used a sequential search strategy for guessing the user\u2019s number. What is the maximum number of guesses the computer could make before guessing the user\u2019s number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 100        \n\n", "\n 99\n\n", "\n 50\n\n", "\n 25\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Considering that the maximum number of guesses the computer could make before guessing the user\u2019s number is 100 and the minimum number of guesses is 1 (when the integer is 1), the average number go guesses would be 50.\n", "wrong_ans_explanation": "Considering that the maximum number of guesses the computer could make before guessing the user\u2019s number is 100 and the minimum number of guesses is 1 (when the integer is 1), the average number go guesses would be 50.\n", "question": "Consider the problem of writing a Hi-Lo game in which a user thinks of an integer from 1 to 100 inclusive and the computer tries to guess that number. Each time the computer makes  guess, the user makes one of three responses:\n\n    \u201clower\u201d (i.e., the number is lower than the computer\u2019s guess)\n    \u201chigher\u201d (i.e., the number is higher than the computer\u2019s guess)\n    \u201cyou got it in <however many> tries!\u201d\n\nUsing a sequential search strategy, how many guesses on average would the computer need to guess the number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 100\n\n", "\n 51\n\n", "\n 50         \n\n", "\n 25\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since the algorithm is searching for a pattern of four distinct characters, it would be most efficient to search for the letters a through d every 4 characters. Therefore, if a pattern \u2018abcd\u2019 does exist, the algorithm will find at least one character of the pattern, and then the entire pattern can be found.\n", "wrong_ans_explanation": "Since the algorithm is searching for a pattern of four distinct characters, it would be most efficient to search for the letters a through d every 4 characters. Therefore, if a pattern \u2018abcd\u2019 does exist, the algorithm will find at least one character of the pattern, and then the entire pattern can be found.\n", "question": "A large array of lowercase characters is to be searched for the pattern \u201cabcd.\u201d The first step in a very efficient searching algorithm is to look at characters with index \n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0, 1, 2, \u2026 until a \u201ca\u201d is encountered\n\n", "\n 0, 1, 2, \u2026 until any letter in \u201ca \u2026 d\u201d is encountered.\n\n", "\n 3, 7, 11, \u2026 until an \u201ca\u201d is encountered.\n\n", "\n 3, 7, 11, \u2026 until any letter in \u201ca \u2026 d\u201d is encountered.           \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: A binary search always requires a sorted data set, which in this case is a list in alphabetical order.\n", "wrong_ans_explanation": "Remember: A binary search always requires a sorted data set, which in this case is a list in alphabetical order.\n", "question": "The array name[0], name[1], \u2026, name[9999] is a list of 10, 000 name strings. The list is to be searched to determine the location of some name X in the list. Which of the following preconditions is necessary for a binary search?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Name X is definitely in the list.\n\n", "\n Name X occurs near the middle of the list.\n\n", "\n The list is in alphabetical order.                   \n\n", "\n There are no duplicate names in the list.\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This method is an example of a sequential search because if val is not found at a[n-1], the method recurs, but with n - 1 as its new parameter. This continues as a search until val is found or n = 0.\n", "wrong_ans_explanation": "This method is an example of a sequential search because if val is not found at a[n-1], the method recurs, but with n - 1 as its new parameter. This continues as a search until val is found or n = 0.\n", "question": "Consider the following method:\n\n    // Precondition: a[0], a[1] \u2026 a[n - 1] contain integers.\n    public static int something(int[] a, int n, int val)\n    {\n        if (n == 0)\n            return -1;\n        else\n        {\n            if (a[n - 1] == val)\n                return n - 1;\n            else\n                return something(a, n - 1, val);\n        }\n    }\n\n    The method shown is an example of\t\n\n    ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n insertion sort\n\n", "\n selection sort\n\n", "\n binary search\n\n", "\n sequential search          \n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "In the first iteration of the while loop, 1 is printed because this is the first index at which \u201co\u201d is seen. Then, s is set to \u201cw do you do?\u201d. Now that the first \u201co\u201d has been removed, j is set to 3 (because the original string has changed). This is repeated 3 times, and ends with the result:\n\n1 3 2 3\n", "wrong_ans_explanation": "In the first iteration of the while loop, 1 is printed because this is the first index at which \u201co\u201d is seen. Then, s is set to \u201cw do you do?\u201d. Now that the first \u201co\u201d has been removed, j is set to 3 (because the original string has changed). This is repeated 3 times, and ends with the result:\n\n1 3 2 3\n", "question": "What is the output of the following code segment?\n\n    String s = \u201cHow do you do?\u201d;\n    int j = s.indexOf(\u201co\u201d);\n    while (j >= 0)\n    {\n        System.out.print(j + \u201c \u201c);\n        s = s.substring(j + 1);\n        j = s.indexOf(\u201co\u201d);\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1 3 2 3         \n\n", "\n 2 4 3 4 \n\n", "\n 1 5 8 11 \n\n", "\n 1 5 8 12\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Firstly, since j must be an integer value (because j is an index), it must be type cast into an int. Furthermore, the Math.random() function takes a random number from 0 to 1 (excluding 1). Therefore, if you multiply Math.random() by response.length, you will receive a random integer from 0 to response.length excluding response.length, which is exactly what u want for the index range. hence, the correct answer is:\n\nint j = (int) (Math.random() * response.length);       \nreturn response[j];\n", "wrong_ans_explanation": "Firstly, since j must be an integer value (because j is an index), it must be type cast into an int. Furthermore, the Math.random() function takes a random number from 0 to 1 (excluding 1). Therefore, if you multiply Math.random() by response.length, you will receive a random integer from 0 to response.length excluding response.length, which is exactly what u want for the index range. hence, the correct answer is:\n\nint j = (int) (Math.random() * response.length);       \nreturn response[j];\n", "question": "A program that simulates a conversation between a computer and a human user generates a random response to a user\u2019s comment. All possible responses that the computer can generate are stored in an array of String called response. The method given below, getResponse, returns a random response string from the array.\n\n    // Precondition: array response is initialized with strings.\n    // Postcondition: returns  a random response from response.\n    public String getResponse();\n    { /* implementation */ }\n\n    Which is a correct /* implementation */?\n\n    ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n int j = (int) (Math.random() * response.length);           \n        return response[j];\n\n", "\n int j = Math.random() * response.length;\t\n        return response[j];\n\n", "\n int j = (int) (Math.random() * (response.length - 1));          \n        return response[j];\n\n", "\n return (int) (Math.random() * response.length);\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In Java, two dimensional array is an array of arrays. Each element of the array is a row. Therefore, mat[0] is the first row and mat[2] is the third array.  The code calls the third array and swaps first element, a[0] with last element a[3] and second element a[1] with the third a[2]. The last row of the matrix, therefore changes from 6 5 0 9 to 9 0 5 6. ", "wrong_ans_explanation": "In Java, two dimensional array is an array of arrays. Each element of the array is a row. Therefore, mat[0] is the first row and mat[2] is the third array.  The code calls the third array and swaps first element, a[0] with last element a[3] and second element a[1] with the third a[2]. The last row of the matrix, therefore changes from 6 5 0 9 to 9 0 5 6. ", "question": "Consider the following method:\n\n    public static void changeArray( int[] a ) \n     {\n        int mid = a.length / 2;\n        for (int j = 0; j < mid; j++)\n        {\n            int k = a[j];\n            a[j] = a[a.length - j - 1];\n            a[a.length - j - 1] = k;\n        }\n    }\nIf the current state of a matrix mat is \n    2 7 9 5\n    8 1 4 3\n    6 5 0 9\nwhich matrix will result from the method call changeArray(mat[2])?\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n\t2 7 9 5\n\t3 4 1 8\n\t6 5 0 9\n\n", "\n\t2 7 0 5\n\t8 1 4 3\n\t6 5 9 9\n\n", "\n\t5 9 7 2\n\t3 4 1 8\n\t9 0 5 6\n\n", "\n\t2 7 9 5\n\t8 1 4 3\n\t9 0 5 6             \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question requires lots of thought, so lets break it down. If something(1) was called, what would happen? Well, recursion will not occur because k would be 0 at that point. However, 1 would still be printed. When something(2) is called, something(1) is called, which prints 1, then 2 is printed, and finally 1 is printed again because of the call to something(1). Finally, when something(3) is called, something(2) is called first, which prints 121, then 3 is printed, and finally something(2) is called again. Therefore, the call something(3) prints:\n\n1213121\n", "wrong_ans_explanation": "This question requires lots of thought, so lets break it down. If something(1) was called, what would happen? Well, recursion will not occur because k would be 0 at that point. However, 1 would still be printed. When something(2) is called, something(1) is called, which prints 1, then 2 is printed, and finally 1 is printed again because of the call to something(1). Finally, when something(3) is called, something(2) is called first, which prints 121, then 3 is printed, and finally something(2) is called again. Therefore, the call something(3) prints:\n\n1213121\n", "question": "Consider the following method.\n\n    public void something(int k)\n    {\n        if (k > 0)\n        {\n            something(k - 1);\n            System.out.print(k);\n            something(k - 1);\n        }\n    }\n\nWhat would be the output following the call something(3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 1121213\n\n", "\n 1123211\n\n", "\n 1213121        \n\n", "\n 1211213\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "wrong_ans_explanation": "Let us set n to 234. Therefore, the correct code segment(s) should return 432. Option I does have the correct code inside the for loop to reverse a number; however, the for loop iterated this code n times (n is also divided by 10 each iteration). Therefore, option I would produce 43 instead of 432. \n    Option II is correct because the while loop is iterating until n = 0, which is exactly what we need to produce the correct amount of reverse digits. Option III is also correct because it is the exact same as Option II, but with a for loop instead of a while loop. \n    Therefore, only options II and III cause the method to work as intended.\n", "question": "Consider the method reverse:\n        \n    //Precondition:    n > 0.\n    //Postcondition:  returns n with its digits reversed.\n    //Example:          if n = 234, method reverse returns 432.\n    int reverse (int n)\n    {\n        int rem, revNum = 0;\n\n        /* code segment  */\n        return revNum;\n    }\n\nWhich of the following replacements for /* code segment  */ would cause the method to work as intended?\n                \n      I. for (int i = 0; i <= n; i++)\n         {\n              rem = n % 10;\n              revNum = revNum * 10 + rem;\n              n /= 10;\n         }        \n\n\n     II. while (n != 0)\n         {\n             rem = n % 10;\n             revNum = revNum * 10 + rem;\n             n /= 10;\n         }\n\n\n    III. for (int i = n; i != 0; i /= 10)\n         {\n            rem = i % 10;\n            revNum = revNum * 10 + rem;\n         }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II only \n\n", "\n II and III only       \n\n", "\n I and III only\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Note that the method will fail whenever element is less than the last item in the list, because index will be incremented to a value that is out of bounds. This will happen in lists I and III. Since \u22128 is greater than \u22129 (option II), the test in the method will be false, preventing an out-of-range error.\n", "wrong_ans_explanation": "Note that the method will fail whenever element is less than the last item in the list, because index will be incremented to a value that is out of bounds. This will happen in lists I and III. Since \u22128 is greater than \u22129 (option II), the test in the method will be false, preventing an out-of-range error.\n", "question": "Refer to method insert below:\n\n    /** Precondition:  List list is an ArrayList that contains\n         *             Integer values sorted in decreasing order.\n     *  Postcondition: Element inserted in its correct position in list.\n     */\n    public void insert(List<Integer> list, Integer element)\n    {\n        int index = 0;\n        while (element.compareTo(list.get(index)) < 0)\n            index++;\n        list.add(index, element);\n    }\n\nSuppose that the element to be inserted has value \u22128. For which list will the method work as intended?\n\n         I. 8 4 0 \u22124\n        II. \u22122 \u22124 \u22126 \u22129\n       III. \u22121 \u22122 \u22124 \u22126\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n II and III only\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The declaration of the birds array makes the following assignments: birds[0] = \"robin\", birds[1] = \"parrot\", and birds[2] = \"bluejay\". The loop in segment I adds these values to birdList in the same order. Segment II fails because birds is an array and therefore can't use the get method. The code also confuses the lists. Segment III, in its first pass through the loop, attempts to add birds[2] to index position 2 of the birdList. This will cause an IndexOutOfBoundsException to be thrown, since index positions 0 and 1 do not yet exist.\n", "wrong_ans_explanation": "The declaration of the birds array makes the following assignments: birds[0] = \"robin\", birds[1] = \"parrot\", and birds[2] = \"bluejay\". The loop in segment I adds these values to birdList in the same order. Segment II fails because birds is an array and therefore can't use the get method. The code also confuses the lists. Segment III, in its first pass through the loop, attempts to add birds[2] to index position 2 of the birdList. This will cause an IndexOutOfBoundsException to be thrown, since index positions 0 and 1 do not yet exist.\n", "question": "Refer to the following declarations:\n\n    String[] birds = {\"robin\", \"parrot\", \"bluejay\"};\n    List<String> birdList = new ArrayList<String>();\n\nWhich of the following correctly assigns the elements of the birds array to birdList? The final ordering need not be the same as in the birds array.\n\n     I. for (String b: birds)\n             birdList.add( b );\n\n    II. for (String b: birdList)\n             birds.add( b );\n\n   III. for (int i = birds.length - 1; i >= 0; i--)\n             birdList.add(i, birds[i]);\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "For each i, itemList[i] is a new Item object that must be constructed using the Item constructor. Therefore, the options that use the ItemList(...) are  incorrect. Since getDescription() and getPrice() are accessors for values that already exist for some Item object, the correct line of code must be: \n\n    itemList[i] = new Item(itemDescription, itemPrice);\n", "wrong_ans_explanation": "For each i, itemList[i] is a new Item object that must be constructed using the Item constructor. Therefore, the options that use the ItemList(...) are  incorrect. Since getDescription() and getPrice() are accessors for values that already exist for some Item object, the correct line of code must be: \n\n    itemList[i] = new Item(itemDescription, itemPrice);\n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nWhich of the following correctly replaces /* more code */ in the Sale constructor to initialize the itemList array?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n itemList[i] = new Item(getDescription(), getPrice());\n\n", "\n itemList[i] = new Item(itemDescription, itemPrice);\n\n", "\n itemList[i] = new ItemList(getDescription(), getPrice());\n\n", "\n itemList[i] = new ItemList(itemDescription, itemPrice);\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To access the price for each Item in the itemList array, the getPrice() accessor in the Item class must be used, since price is private to that class. \n\nThis eliminates choice: \n\n    for (Item it : itemList)\n        total += it.price; \n\nThis choice:\n\n    for (Item it : itemList)\n        total += itemList.getPrice();\n\nuses itemList incorrectly. There's no getPrice method for an array object. \n\nThis choice:\n\n    Sale thisSale;\n        for (Item it : itemList)\n            total += it.getPrice();\n\nincorrectly declares a Sale object. (The method applies to an existing Sale object.)\n", "wrong_ans_explanation": "To access the price for each Item in the itemList array, the getPrice() accessor in the Item class must be used, since price is private to that class. \n\nThis eliminates choice: \n\n    for (Item it : itemList)\n        total += it.price; \n\nThis choice:\n\n    for (Item it : itemList)\n        total += itemList.getPrice();\n\nuses itemList incorrectly. There's no getPrice method for an array object. \n\nThis choice:\n\n    Sale thisSale;\n        for (Item it : itemList)\n            total += it.getPrice();\n\nincorrectly declares a Sale object. (The method applies to an existing Sale object.)\n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nWhich represents correct /* code to calculate amount */ in the totalPaid method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n for (Item it : itemList)\n       total += it.price;\n\n", "\n for (Item it : itemList)\n       total += itemList.getPrice();\n\n", "\n for (Item it : itemList)\n       total += it.getPrice();\n\n", "\n Sale thisSale;\n       for (Item it : itemList)\n           total += it.getPrice();\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "An array of type Sale is required. \n\nThis eliminates choice:\n\n    Item[] listOfSales = new Sale[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES]; \n\nChoices:\n\n    Sale[] listOfSales = new Item[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES];\n\nincorrectly use type Item on the right-hand side. \n", "wrong_ans_explanation": "An array of type Sale is required. \n\nThis eliminates choice:\n\n    Item[] listOfSales = new Sale[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES]; \n\nChoices:\n\n    Sale[] listOfSales = new Item[NUMSALES]; \nand \n    Item[] listOfSales = new Item[NUMSALES];\n\nincorrectly use type Item on the right-hand side. \n", "question": "Refer to the following classes:\n\n    public class Item\n    {\n        private String description;\n        private double price;\n\n        //constructor\n        public Item(String aDescription, double aPrice)\n        {\n            description = aDescription;\n            price = aPrice;\n        }\n\n        //accessors getDescription() and getPrice() not shown.\n    }\n\n    public class Sale\n    {\n        private int numItems;\n        private Item[] itemList;\n\n        //constructor\n        public Sale(int theNumItems)\n        {\n            numItems = theNumItems;\n            itemList = new Item[theNumItems];\n            String itemDescription;\n            double itemPrice;\n            for (int i = 0; i < theNumItems; i++)\n            {\n                < read user input for itemDescription and itemPrice >\n                /* more code */\n            }\n        }\n\n        //Returns total amount paid for this sale.\n        public double totalPaid()\n        {\n            double total = 0.0;\n            /* code to calculate amount */\n            return total;\n        }\n     }\n\nSuppose it is necessary to keep a list of all item sales. A suitable declaration would be\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Sale[] listOfSales = new Sale[NUMSALES];\n\n", "\n Sale[] listOfSales = new Item[NUMSALES];\n\n", "\n Item[] listOfSales = new Sale[NUMSALES];\n\n", "\n Item[] listOfSales = new Item[NUMSALES];\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Here's a recursive description of how mergesort works:\n\nIf there is more than one element in the array:\n        Break the array into roughly two equal halves.\n        Mergesort the left half.\n        Mergesort the right half.\n        Merge the two subarrays into a sorted array.\n     ", "wrong_ans_explanation": "Here's a recursive description of how mergesort works:\n\nIf there is more than one element in the array:\n        Break the array into roughly two equal halves.\n        Mergesort the left half.\n        Mergesort the right half.\n        Merge the two subarrays into a sorted array.\n     ", "question": "The elements of array arr are to be sorted in increasing order. Which represents the first step of a mergesort algorithm?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Find the smallest element in arr and swap it into arr[0];\n\n", "\n Compare arr[0] with arr[1] and, if necessary, shift and replace elements such that arr[0] is less than arr[1].\n\n", "\n Compare the first and last elements, and if the first is less than the last, swap these elements.\n\n", "\n Break the array into roughly two equal halves.\n\n"]}, {"points": "15", "Answer": "0", "correct_ans_explanation": "\na)  private boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n    { \n       if (blackSquares[r][c] == false) {\n            if (r == 0 || c == 0) {\n                return true;\n            }\n            else if (blackSquares[r - 1][c] == true || blackSquares[r][c - 1] == true) {\n                return true;\n            }\n        }\n        return false;\n    }\n\nb)  public Crossword(boolean[][] blackSquares)\n    {\n        int k = 0;\n        boolean isBlack = true;\n        puzzle = new Square[blackSquares.length][blackSquares[0].length];\n        for (int r = 0;r < blackSquares.length;r++)\n        {\n            for (int c = 0;c < blackSquares[0].length;c++)\n            {\n                if(blackSquares[r][c] == true) \n                {\n                    puzzle[r][c] = new Square(isBlack,0); \n                }\n                else\n                {\n                    if(toBeLabeled(r, c, blackSquares) == true)\n                    {\n                        k++;\n                        puzzle[r][c]= new Square(!isBlack,k);\n                    }\n                    else\n                        puzzle[r][c]= new Square(!isBlack, 0);\n                }\n            }\n        }\n    }\n\n", "wrong_ans_explanation": "\na)  private boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n    { \n       if (blackSquares[r][c] == false) {\n            if (r == 0 || c == 0) {\n                return true;\n            }\n            else if (blackSquares[r - 1][c] == true || blackSquares[r][c - 1] == true) {\n                return true;\n            }\n        }\n        return false;\n    }\n\nb)  public Crossword(boolean[][] blackSquares)\n    {\n        int k = 0;\n        boolean isBlack = true;\n        puzzle = new Square[blackSquares.length][blackSquares[0].length];\n        for (int r = 0;r < blackSquares.length;r++)\n        {\n            for (int c = 0;c < blackSquares[0].length;c++)\n            {\n                if(blackSquares[r][c] == true) \n                {\n                    puzzle[r][c] = new Square(isBlack,0); \n                }\n                else\n                {\n                    if(toBeLabeled(r, c, blackSquares) == true)\n                    {\n                        k++;\n                        puzzle[r][c]= new Square(!isBlack,k);\n                    }\n                    else\n                        puzzle[r][c]= new Square(!isBlack, 0);\n                }\n            }\n        }\n    }\n\n", "question": " A crossword puzzle (picture below) grid is a two-dimensional rectangular array of black and white squares. Some of the white squares are labeled with a positive number according to the crossword labeling rule. The crossword labeling rule identifies squares to be labeled with a positive number as follows. A square is labeled with a positive number if and only if the square is white and\nthe square does not have a white square immediately above it, or it does not have a white square immediately to its left, or both. The squares identified by these criteria are labeled with consecutive numbers in row-major order, starting at 1.\nThe following diagram shows a crossword puzzle grid and the labeling of the squares according to the crossword labeling rule.\n\n(See figure crossword_puzzle)\n\nThis question uses two classes, a Square class that represents an individual square in the puzzle and Crossword class that represents a crossword puzzle grid. A partial declaration of the Square class is shown below.\n\npublic class Square\n{\n/** Constructs one square of a crossword puzzle grid. \n * Postcondition: \n * - The square is black if and only if isBlack is true. \n * - The square has number num.\n */\npublic Square (boolean isBlack, int num) \n{ /* implementation not shown */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\nA partial declaration of the Crossword class is shown below. You will implement one method and the constructor in the Crossword class.\n\npublic class Crossword\n{\n/** Each element is a Square object with a color (black or white) and a number. \n* puzzle[r][c] represents the square in row r, column c. \n* There is at least one row in the puzzle.\n*/\nprivate Square [][] puzzle;\n\n/** Constructs a crossword puzzle grid. \n * Precondition: There is at least one row in blackSquares. \n * Postcondition: \n * - The crossword puzzle grid has the same dimensions as blackSquares. \n * - The Square object at row r, column c in the crossword puzzle grid is black \n * if and only if blackSquares [r][c] is true. \n * - The squares in the puzzle are labeled according to the crossword labeling rule.\n */\npublic Crossword (boolean [][] blackSquares) \n{ /* to be implemented in part (b) */ }\n\n/** Returns true if the square at row r, column c should be labeled with a positive number: \n* false otherwise. \n* The square at row r, column c is black if and only if blackSquares [r] [c] is true. \n* Precondition: r and care valid indexes in blackSquares\n*/\nprivate boolean toBeLabeled (int r, int c, boolean[][] blackSquares) \n{ /* to be implemented in part (a) */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\na) Write the Crossword method toBeLabeled. The method returns true if the square indexed by row r, column c in a crossword puzzle grid should be labeled with a positive number according to the crossword labeling rule; otherwise it returns false. The parameter blackSquares indicates which squares in the crossword puzzle grid are black. \n\nComplete method toBeLabeled below.\n\n/** Returns true if the square at row r, column c should be labeled with a positive number;\n * false otherwise.\n * The square at row r, column c is black if and only if blackSquares [r][c] is true.\n * Precondition: r and c are valid indexes in blackSquares.\n */\nprivate boolean toBeLabeled(int r, int c, boolean[][] black Squares)\n\n(b) Write the Crossword constructor. The constructor should initialize the crossword puzzle grid should be the same dimensions as the parameter blackSquares. Each element of the puzzle grid should be initialized with a reference to a Square object with the appropriate color and number. The number is positive if the square is labeled and 0 if the square is not labeled.\n\nAssume that toBeLabeled works as specified, regardless of what you wrote in part (a). You must use toBeLabeled appropriately to receive full credit. \n\nComplete the Crossword constructor below.\n\n/** Constructs a crossword puzzle grid.\n * Precondition: There is at least one row in blackSquares.\n * Postcondition:\n * - The crossword puzzle grid has the same dimensions as blackSquares.\n * - The Square object at row r, column c in the crossword puzzle grid is black\n * if and only if blackSquares[r][c] is true.\n * - The squares in the puzzle are labeled according to the crossword labeling rule.\n */\npublic Crossword(boolean[][] blackSquares)\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": "crossword_puzzle.png"}, {"points": "15", "Answer": "0", "correct_ans_explanation": "\na)  public class Cat extends Pet\n    {\n\n        public Cat(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            return \"meow\u201d;\n        }\n\n    }\n\nb)  public class Loud Dog extends Dog\n    {\n        public Loud Dog(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            string s= super.speak(); \n            return s + s;\n        }\n    }\n\nc)  public void allSpeak()\n    {\n        for (int i = 0; i < petList.size();i++)\n        {\n            Pet pet = (Pet) petList.get(i); \n            System.out.println(pet.getName() + \u201c\u201d + pet.speak());\n        }\n    }\n\n\n", "wrong_ans_explanation": "\na)  public class Cat extends Pet\n    {\n\n        public Cat(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            return \"meow\u201d;\n        }\n\n    }\n\nb)  public class Loud Dog extends Dog\n    {\n        public Loud Dog(String name)\n        {\n            super(name);\n        }\n\n        public String speak()\n        {\n            string s= super.speak(); \n            return s + s;\n        }\n    }\n\nc)  public void allSpeak()\n    {\n        for (int i = 0; i < petList.size();i++)\n        {\n            Pet pet = (Pet) petList.get(i); \n            System.out.println(pet.getName() + \u201c\u201d + pet.speak());\n        }\n    }\n\n\n", "question": "Consider the hierarchy of classes shown in the following diagram.\n                                    Pet\n                                   \u2191   \u2191\n                                 Cat   Dog\n                                         \u2191\n                                      Loud Dog\nNote that a Cat is-a Pet, a Dog is-a Pet, and a LoudDog is-a Dog. The class Pet is specified as an abstract class as shown in the following declaration. Each Pet has a name that is specified when it is constructed.\npublic abstract class Pet\n{\n\n   private String myName; \n   public Pet(String name) \n   { myName = name; }\n\n   public String getName() \n   { return myName; }\n     \n   public abstract String speak();\n}\n\n  The subclass Dog has the partial class declaration shown below.\npublic class Dog extends Pet\n{\n      public Dog (String name) \n      { /* implementation not shown */ }\n\n\n      public String speak () \n      { /* implementation not shown */ }\n\n(a) Given the class hierarchy shown above, write a complete class declaration for the class Cat, including implementations of its constructor and method(s). The Cat method speak-returns \"meow\" when it is invoked.\n\n(b) Assume that class Dog has been declared as shown at the beginning of the question. If the String dog-sound is returned by the Dog method speak, then the LoudDog method speak returns a String containing dog-sound repeated two times. Given the class hierarchy shown previously, write a complete class declaration for the class LoudDog, including implementations of its constructor and method(s).\n\n(c) Consider the following partial declaration of class Kennel.\n\n      public class Kennel\n      {\n         private ArrayList petList;  // all elements are references\n                                     // to Pet objects\n  \n         // post condition: for each Pet in the kennel, its name followed \n         // by the result of a call to its speak method \n         // has been printed, one line per Pet \n         public void allSpeak() \n         { /* to be implemented in this part */ }\n\n         // ... constructor and other methods not shown\n}\n\n\nWrite the Kennel method allSpeak. For each Pet in the kennel, allSpeak prints a line with the name of the Pet followed by the result of a call to its speak method. In writing allSpeak, you may use any of the methods defined for any of the classes specified for this problem. Assume that these methods work as specified, regardless of what you wrote in parts (a) and (b). Solutions that reimplement functionality provided by these methods, rather than invoking these methods, will not receive full credit. \n\nComplete method allSpeak below.\n\n      // postcondition: for each Pet in the kennel, its name followed \n      // by the result of a call to its speak method \n      // has been printed, one line per Pet \n      public void allSpeak ()\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": ""}, {"points": "15", "Answer": "0", "correct_ans_explanation": "\na)  private void fillBlock(String str)\n    {\n        int i = 0; \n        for (int r = 0; r < numRows; r++)\n        {\n            for (int c = o; c < numCols; c++) \n            { \n                if (i < str.length())\n                   letterBlock[r][c]= str.substring(i,i+1); \n                else\n                   letterBlock[r][c] = \"A\";\n                    i++;\n            }\n        }\n    }\n\nb)  private String encryptBlock()\n    {\n        String s = \"\"; \n        for (int c = 0; c < numCols; c++)\n        {\n            for (int r = 0; r < numRows, r++)\n            {\n                s += letterBlock[r][c]; \n            }\n        }\n        return s;\n    }\n\nc)  public String encrypt Message (String message)\n    {\n        String c = \"\"; \n        while (message.length() > 0)\n        {\n            int n = numRows * numcols; \n            if (n > message.length())\n                n = message.length();\n            fillBlock(message.substring(0,n)); \n            c += encryptBlock(); \n            message = message.substring(n);\n        }\n        return c;\n    }\n", "wrong_ans_explanation": "\na)  private void fillBlock(String str)\n    {\n        int i = 0; \n        for (int r = 0; r < numRows; r++)\n        {\n            for (int c = o; c < numCols; c++) \n            { \n                if (i < str.length())\n                   letterBlock[r][c]= str.substring(i,i+1); \n                else\n                   letterBlock[r][c] = \"A\";\n                    i++;\n            }\n        }\n    }\n\nb)  private String encryptBlock()\n    {\n        String s = \"\"; \n        for (int c = 0; c < numCols; c++)\n        {\n            for (int r = 0; r < numRows, r++)\n            {\n                s += letterBlock[r][c]; \n            }\n        }\n        return s;\n    }\n\nc)  public String encrypt Message (String message)\n    {\n        String c = \"\"; \n        while (message.length() > 0)\n        {\n            int n = numRows * numcols; \n            if (n > message.length())\n                n = message.length();\n            fillBlock(message.substring(0,n)); \n            c += encryptBlock(); \n            message = message.substring(n);\n        }\n        return c;\n    }\n", "question": "In this question you will write two methods for a class RouteCipher that encrypts (puts into a coded form) a message by changing the order of the characters in the message. The route cipher fills a two dimensional array with single-character substrings of the original message in row-major order, encrypting the message by retrieving the single-character substrings in column-major order.\nFor example, the word \"Surprise\" can be encrypted using a 2-row, 4-column array as follows\n\nOriginal Message\n\"Surprise\"\n\nContents of Array\n\u201cs\u201d \u201cu\u201d \u201cr\u201d \u201cp\u201d\n\u201cr\u201d \u201ci\u201d \u201cs\u201d \u201ce\u201d\n\nEncrypted\n\u201cSruirspe\u201d\n                       \n\nAn incomplete implementation of the RouteCipher class is shown below.\n\npublic class RouteCipher\n{\n/** A two-dimensional array of single-character strings, instantiated in the constructor */ private String[][] letterBlock;\n\n/** The number of rows of letterBlock, set by the constructor */ private int numRows;\n\n/** The number of columns of letterBlock, set by the constructor */ \nprivate int numCols;\n\n/** Places a string into letterBlock in row-major order.\n * @param str the string to be processed\n * Postcondition:\n * if str.length() < numRows * numCols, \"A\" is placed in each    unfilled cell \n * if str.length() > numRows * numCols, trailing characters are ignored\n */\nprivate void fillBlock(String str) \n{ /* to be implemented in part (a) */ }\n\n/** Extracts encrypted string from letterBlock in column-major order. \n* Precondition: letterBlock has been filled\n* @return the encrypted string from letterBlock\n*/\n\nprivate String encryptBlock() \n{ /* implementation not shown */ }\n\n/** Encrypts a message. \n* @param message the string to be encrypted \n* @return the encrypted message; \n* if message is the empty string, returns the empty string\n*/\n\npublic String encryptMessage(String message) \n{ /* to be implemented in part (b) */ }\n\n// There may be instance variables, constructors, and methods that are not shown.\n}\n\n(a) Write the method fillBlock that fills the two-dimensional array letterBlock with one-character strings from the string passed as parameter str. \n\nThe array must be filled in row-major order - the first row is filled from left to right, then the second row is filled from left to right, and so on, until all rows are filled. \n\nIf the length of the parameter str is smaller than the number of elements of the array, the string \"A\" is placed in each of the unfilled cells. If the length of str is larger than the number of elements in the array, the trailing characters are ignored. \n\nFor example, if letterBlock has 3 rows and 5 columns and str is the string \"Meet at noon\", the resulting contents of letterBlock would be as shown in the following table.\n\t\t\t\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cn\u201d \u201co\u201d\n\t\t\t\u201co\u201d \u201cn\u201d \u201cA\u201d \u201cA\u201d \u201cA\u201d\n\nIf letterBlock has 3 rows and 5 columns and str is the string \"Meet at midnight\", the resulting contents of letterBlock would be as shown in the following table.\n\t\t\t\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cm\u201d \u201ci\u201d\n\t\t\t\u201cd\u201d \u201cn\u201d \u201ci\u201d \u201cg\u201d \u201ch\u201d\n\nThe following expression may be used to obtain a single-character string at position k of the string str.\n\nstr.substring(k, k + 1)\n\n\nComplete method fillBlock below.\n\n/** Place a string into letterBlock in row-major order. \n * @param str the string to be processed\n * Postcondition: \n * if str.length() < numRows * numCols, \"A\" is placed in each   unfilled cell\n * If str.length() > numRows * numCols, trailing characters are ignored\n */\n     private void fillBlock(String str)\n\n(b) Write the method encryptBlock that accesses the letterBlock, which has previously been filled by the fillBlock method, and returns its contents in column major order. For example, if the filled block\nis\n\t\t\t\u201cM\u201d \u201ce\u201d \u201ce\u201d \u201ct\u201d \u201c \u201d\n\t\t\t\u201ca\u201d \u201ct\u201d \u201c \u201d \u201cm\u201d \u201ci\u201d\n\t\t\t\u201cd\u201d \u201cn\u201d \u201ci\u201d \u201cg\u201d \u201ch\u201d\t\n\nthe method will return the string \"Madetne itmg ih\". Complete the method encryptBlock below.\n\n/** Extracts encrypted string from letterBlock in column-major order.\n * Precondition: letterBlock has been filled\n * @return the encrypted string from letterBlock\n */\nprivate String encryptBlock()\n\nc) Write the method encrypt Message that encrypts its string parameter message. The method builds an encrypted version of message by repeatedly calling fillBlock with consecutive, non overlapping substrings of message and concatenating the results returned by a call to encryptBlock after each call to fillBlock. When all of the messages have been processed, the concatenated string is returned. Note that this message is the empty string, encrypt Message returns an empty string. The following exam shows the process carried out if letterBlock has 2 rows and 3 columns and encrypt Message(\"Meet at midnight\")is executed.\n\nSubstring\nletterBlock after Call to fillBlock\nValue Returned by encryptBlock\nConcatenated String\n\n\"Meet a\"\n\u201cM\u201d \u201ce\u201d \u201ce\u201d\n\u201ct\u201d \u201c \u201d \u201ca\u201d\n\u201cMte ea\u201d\n\u201cMte ea\u201d\n\n\u201ct midn\u201d\n\u201ct\u201d \u201c \u201d \u201cm\u201d\n\u201ci\u201d \u201cd\u201d \u201cn\u201d\n\u201cti dmn\u201d\n\u201cMte eati dmn\u201d\n\n\"ight\"\n\u201ci\u201d \u201cg\u201d \u201ch\u201d\n\u201ct\u201d \u201cA\u201d \u201cA\u201d\n\"itgAhA\"\n\"Mte eati dmnitgAhA\"     \n\t\t    \n\nIn this example, the method returns the string \"Mte eati dmnitgAhA\".\n \nAssume that fillBlock and encryptBlock methods work as specified. Solutions that reimplement the functionality of one or both of these methods will not receive full credit.\n\nComplete method encrypt Message below.\n\n/** Encrypts a message.\n * @param message the string to be encrypted\n * @return the encrypted message;\n * if message is the empty string, returns the empty string\n */\n      public String encryptMessage(String message)\n\n", "negative_points": "0", "duration_in_seconds": "1350", "question_type": "5", "options": ["Compare Your Answer"], "picture_or_video_name": ""}]}
