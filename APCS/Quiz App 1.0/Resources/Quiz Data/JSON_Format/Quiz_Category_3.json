{"Questions": [{"points": "1", "Answer": "1", "correct_ans_explanation": "You may think s.length would be 2 or there would be a compile-time error. However, when s is equated to t, the initial length of s is overridden by the properties of t, including its length (which is 3). So, the correct length of s is 3. \n                ", "wrong_ans_explanation": "You may think s.length would be 2 or there would be a compile-time error. However, when s is equated to t, the initial length of s is overridden by the properties of t, including its length (which is 3). So, the correct length of s is 3. \n                ", "question": "Consider the following code segment:\n        \n    String[] s = new String[2];\n    String[] t = { \u201cJoe\u201d, \u201cJack\u201d, \u201cJudy\u201d};\n    s = t;\n    System.out.print(s.length);\n        \nWhat will print as a result of this code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2\n\n", "\n 3   \n\n", "\n Nothing will print due to compile-time error\n\n", "\n Nothing will print due to run-time error\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Taking the necessary information from the mini-paragraph is essential to understanding this question. The student should get 5 bonus points if and only if the student gets all the bonus questions correct. Therefore, option I is obviously correct and option II is false. Option III is also incorrect because there are consecutive if statements without else statements. This means that if a student gets only one bonus question correct, he/she will still get 5 bonus points.\n", "wrong_ans_explanation": "Taking the necessary information from the mini-paragraph is essential to understanding this question. The student should get 5 bonus points if and only if the student gets all the bonus questions correct. Therefore, option I is obviously correct and option II is false. Option III is also incorrect because there are consecutive if statements without else statements. This means that if a student gets only one bonus question correct, he/she will still get 5 bonus points.\n", "question": "A teacher puts three bonus questions on a test and awarded 5 extra points to anyone who answered all three bonus questions correctly and no extra points otherwise. Assume the boolean variables bonusOne, bonusTwo, and bonusThree indicate whether a student has answered the particular question correctly. Each variable was assigned true if the answer was correct and false if the answer was incorrect. Which of the following code segments will properly update the variable grade based on a student\u2019s performance on the bonus questions? \n        \n      I. if (bonusOne && bonusTwo && bonusThree)\n             grade += 5; \n\n\n     II. if (bonusOne || bonusTwo || bonusThree)\n             grade += 5; \n\n\n    III. if (bonusOne)\n             grade += 5;\n         if (bonusTwo)\n             grade += 5;\n         if (bonusThree)\n             grade += 5;\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only           \n\n", "\n III only\n\n", "\n I and III\n\n", "\n II and III\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires sheer brute force because it would be more time-consuming to find a pattern and utilize it. So, firstly, since j = 0 and a.length is 5, a[j] + 3 = 3 and 3 % a.length is 3. Therefore, a[0] = a[3] = 1. When j = 2, a[j] + 3 = 5 and 5 % a.length = 0. Therefore, a[1] = a[0] = 1. By that method of reasoning, the value of a[1] is 1.\n", "wrong_ans_explanation": "This question requires sheer brute force because it would be more time-consuming to find a pattern and utilize it. So, firstly, since j = 0 and a.length is 5, a[j] + 3 = 3 and 3 % a.length is 3. Therefore, a[0] = a[3] = 1. When j = 2, a[j] + 3 = 5 and 5 % a.length = 0. Therefore, a[1] = a[0] = 1. By that method of reasoning, the value of a[1] is 1.\n", "question": "What is the value of a[1] after the following code is executed?\n        \n    int[] a = {0, 2, 4, 1, 3};\n    for (int j = 0; j < a.length; j++)\n        a[j] = a[(a[j] + 3) % a.length];\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 1       \n\n", "\n 2\n\n", "\n 3\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since both these operators(+) have the same precedence, the leftmost operator must be executed first (left to right). Because a string is attempting to be added to an integer, concatenation must occur, which results in the integer turning into a string. Therefore, \u201c1\u201d + new Integer(2) would equal \u201c12\u201d as a string. Then, this would have to be added to 3, which would equal 123.\n", "wrong_ans_explanation": "Since both these operators(+) have the same precedence, the leftmost operator must be executed first (left to right). Because a string is attempting to be added to an integer, concatenation must occur, which results in the integer turning into a string. Therefore, \u201c1\u201d + new Integer(2) would equal \u201c12\u201d as a string. Then, this would have to be added to 3, which would equal 123.\n", "question": "What is displayed by \n                \n    System.out.println(\u201c1\u201d + new Integer(2) + 3);\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 6\n\n", "\n 15\n\n", "\n 123         \n\n", "\n ClassCastException\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "In option I, a new object from the Year2019 class is created, which returns 2019 from the toString() method. Therefore, for option I, Test2019 would compile and print 2019. If option II is used, the object that is created from Test2019 will call a toString() method. Since Test2019 has no toString() method, the Test2019 class would inherit the toString() method in the Year2019 class and return 2019 without any errors. \n    Option III is the exact same as Option II because this refers to the current object, which is test, a new Test2019(). Therefore, the code for option III would mimic the behavior of the code for option II and would display 2019. Therefore, option I, II, and III are all correct.\n", "wrong_ans_explanation": "In option I, a new object from the Year2019 class is created, which returns 2019 from the toString() method. Therefore, for option I, Test2019 would compile and print 2019. If option II is used, the object that is created from Test2019 will call a toString() method. Since Test2019 has no toString() method, the Test2019 class would inherit the toString() method in the Year2019 class and return 2019 without any errors. \n    Option III is the exact same as Option II because this refers to the current object, which is test, a new Test2019(). Therefore, the code for option III would mimic the behavior of the code for option II and would display 2019. Therefore, option I, II, and III are all correct.\n", "question": "Consider the following classes:               \n        \n    public class Year2019\n    {\n        public String toString() { return \u201c2019\u201d; }\n    }\n\n    public class Test2019 extends Year2019\n    {\n        public void print()\n        {        \n            < missing statement > \n        }\n    }\n\nWhich of the following could replace < missing statement > so that Test2019 would compile with no errors and would display 2019? \n\n    Test2019 test = new Test2019();\n    test.print();\n\n      I. System.out.println(new Year2019());\n     II. System.out.println(new Test2019());        \n    III. System.out.println(this);\n        \n        ", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n II only\n\n", "\n I and II \n\n", "\n II and III\n\n", "\n I, II, and III        \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since x = 7 < 10 and y = 3 > 0, the statement (x < 10) && (y < 0) would evaluate to false. Therefore, we must turn to the else statement, which prints \u201cValue is: \u201c + x / y. Because both x and y are integers, when dividing x and y, we must round down. By that method of reasoning, 7 / 3 = 2, so the code would print \u201cValue is: 2\u201d. \n", "wrong_ans_explanation": "Since x = 7 < 10 and y = 3 > 0, the statement (x < 10) && (y < 0) would evaluate to false. Therefore, we must turn to the else statement, which prints \u201cValue is: \u201c + x / y. Because both x and y are integers, when dividing x and y, we must round down. By that method of reasoning, 7 / 3 = 2, so the code would print \u201cValue is: 2\u201d. \n", "question": "Consider the following code segment.\n        \n    int x = 7;\n    int y = 3;\n    if ((x < 10) && (y < 0))\n        System.out.println(\u201cValue is: \u201c + x * y);\n    else\n        System.out.println(\u201cValue is: \u201c + x / y);\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n Value is: 21\n\n", "\n Value is: 2.3333333\n\n", "\n Value is: 2            \n\n", "\n Value is : 0\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "This question can be done relatively quickly. When k = 1, mystery adds 1 * 1 + 3 = 4 to the ArrayList<Integer> seq. Therefore, the first value in seq should be 4, which is true in only one option. Consequently, the [4, 7, 12, 19, 28, 39] is the correct output.\n", "wrong_ans_explanation": "This question can be done relatively quickly. When k = 1, mystery adds 1 * 1 + 3 = 4 to the ArrayList<Integer> seq. Therefore, the first value in seq should be 4, which is true in only one option. Consequently, the [4, 7, 12, 19, 28, 39] is the correct output.\n", "question": "Consider the following method.\n                \n    public ArrayList<Integer> mystery(int n)\n    {\n        ArrayList<Integer> seq = new ArrayList<Integer>();\n        for (int k = 1; k <= n; k++)\n            seq.add(new Integer(k * k + 3));\n        return seq;\n    }\n        \nWhich of the following is printed as a result of executing the following statement?\n\n    System.out.println(mystery(6));\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [3, 4, 7, 12, 19, 28]\n\n", "\n [3, 4, 7, 12, 19, 28, 39]\n\n", "\n [4, 7, 12, 19, 28, 39]          \n\n", "\n [39, 28, 19, 12, 7, 4]\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "(Remember: The method .substring(x, y) returns the string from index x to index y - 1.) Inside the for loop, input.substring(k, k + 1) returns the part of input from k to k + 1 - 1 (which is just k). As a result, this call to substring just returns the value at k. Since the for loop begins at k = 1 and iterates in intervals of k += 2, at the end of the execution of the for loop, the output should return:\n\n    output = input[1] + input[3] + input[5] + input[7] = \u201coptr\u201d\n    ", "wrong_ans_explanation": "(Remember: The method .substring(x, y) returns the string from index x to index y - 1.) Inside the for loop, input.substring(k, k + 1) returns the part of input from k to k + 1 - 1 (which is just k). As a result, this call to substring just returns the value at k. Since the for loop begins at k = 1 and iterates in intervals of k += 2, at the end of the execution of the for loop, the output should return:\n\n    output = input[1] + input[3] + input[5] + input[7] = \u201coptr\u201d\n    ", "question": "Consider the following method.\n        \n    public String mystery(String input)\n    {\n        String output = \u201c\u201d;\n        for (int k = 1; k < input.length(); k += 2)\n        {\n            output += input.substring(k, k + 1);\n        }        \n        return output;\n    }\n        \nWhat is returned as a result of the call mystery(\u201ccomputer\u201d)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201ccomputer\u201d\n\n", "\n \u201ccmue\u201d\n\n", "\n \u201coptr\u201d             \n\n", "\n \u201compute\u201d\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This code essentially prints all the indices and values in the array where this value of this index is greater than the value of this index + 1. The first place where this condition is upheld is k = 0. At k = 0, (arr[0] = 7) > (arr[1] = 2). Therefore, 0 (the index) and 7 (the value) is printed. This condition is also true at k = 2 and k = 3. As a result of executing the code segment, this will be printed:\n\n    0 7 2 5 3 3\n                ", "wrong_ans_explanation": "This code essentially prints all the indices and values in the array where this value of this index is greater than the value of this index + 1. The first place where this condition is upheld is k = 0. At k = 0, (arr[0] = 7) > (arr[1] = 2). Therefore, 0 (the index) and 7 (the value) is printed. This condition is also true at k = 2 and k = 3. As a result of executing the code segment, this will be printed:\n\n    0 7 2 5 3 3\n                ", "question": "Consider the following code segment.\n                \n    int[] arr = {7, 2, 5, 3, 0, 10};\n    for (int k = 0; k < arr.length - 1; k++)\n    {\n        if (arr[k] > arr[k + 1])\n            System.out.print(k + \u201c \u201c + arr[k] + \u201c \u201c);\n    }\n        \nWhat will be printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0 2 2 3 3 0\n\n", "\n 0 7 2 5 3 3            \n\n", "\n 0 7 2 5 5 10\n\n", "\n 1 7 3 5 4 3 \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Since the for loop begins at k = 3, the values from index 0 to 2 are untouched. However, starting from k = 3 to the end of the array, the value at index k is replaced with the value at index k + 1. Additionally, since the length of the array must remain the same (since we are not changing the length of the array), the last value in the array must be the same because there is no value after this to replace it with. Therefore, after executing the code segment, the array arr will look like this: \n\n    {1, 2, 3, 5, 6, 7, 7}\n", "wrong_ans_explanation": "Since the for loop begins at k = 3, the values from index 0 to 2 are untouched. However, starting from k = 3 to the end of the array, the value at index k is replaced with the value at index k + 1. Additionally, since the length of the array must remain the same (since we are not changing the length of the array), the last value in the array must be the same because there is no value after this to replace it with. Therefore, after executing the code segment, the array arr will look like this: \n\n    {1, 2, 3, 5, 6, 7, 7}\n", "question": "Consider the following code segment.\n        \n    int[] arr = {1, 2, 3, 4, 5, 6, 7};\n    for (int k = 3; k < arr.length - 1; k++)\n            arr[k] = arr[k + 1];\n        \nWhich of the following represents the contents of arr as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n {1, 2, 3, 4, 5, 6, 7}\n\n", "\n {1, 2, 3, 5, 6, 7}\n\n", "\n {1, 2, 3, 5, 6, 7, 7}            \n\n", "\n {1, 2, 3, 5, 6, 7, 8}\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Firstly, we can see that !( a != b ) is equal to a == b. Let A = ( a == b ) and B = (b  > 7). Then, !( A && B ) must equal !A || !B. Since !A is equal to ( a != b ) and !B is equal to (b <= 7), then \n\n    !( !( a != b ) && ( b > 7 )) must equal ( a != b ) || ( b <= 7 ) \n", "wrong_ans_explanation": "Firstly, we can see that !( a != b ) is equal to a == b. Let A = ( a == b ) and B = (b  > 7). Then, !( A && B ) must equal !A || !B. Since !A is equal to ( a != b ) and !B is equal to (b <= 7), then \n\n    !( !( a != b ) && ( b > 7 )) must equal ( a != b ) || ( b <= 7 ) \n", "question": "Assume that a and b have been defined and initialized as int values. The expression \n                \n    !( !( a != b ) && ( b > 7 ))\n        \nis equivalent to which of the following?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n ( a != b ) || ( b < 7 )\n\n", "\n ( a != b ) || ( b <= 7 )              \n\n", "\n ( a == b ) || ( b <= 7 )\n\n", "\n ( a != b ) && (b <= 7)\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires us to keep iterating through the while loop until b = 0. In the first iteration of the while loop, r = 24 % 30 = 24, a = b = 30, and b = r = 24. In the second iteration of the while loop, r = 30 % 24 = 6, a = b = 24, and b = r = 6. Since b is not yet equal to 0, we shall continue iterating through the while loop. In the third iteration, r = 24 % 6 = 0, a = b = 6, and b = r = 0. Since b is now 0, we can print a, which is 6.\n", "wrong_ans_explanation": "This question requires us to keep iterating through the while loop until b = 0. In the first iteration of the while loop, r = 24 % 30 = 24, a = b = 30, and b = r = 24. In the second iteration of the while loop, r = 30 % 24 = 6, a = b = 24, and b = r = 6. Since b is not yet equal to 0, we shall continue iterating through the while loop. In the third iteration, r = 24 % 6 = 0, a = b = 6, and b = r = 0. Since b is now 0, we can print a, which is 6.\n", "question": "Consider the following code segment.             \n        \n    int a = 24;\n    int b = 30;\n    while (b != 0)\n    {\n        int r = a % b;\n        a = b;\n        b = r;\n    }\n    System.out.println( a );\n        \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 0\n\n", "\n 6            \n\n", "\n 12\n\n", "\n 24\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This question requires you to essentially guess and check the choices to obtain the correct answer. After attempting multiple possibilities for a, you will find that a must be 18 for aProperty( a ) to return true. If a = 18, a / 10 = 1 and a % 10 = 8. Therefore, 2 * (a / 10 + a % 10) would be 2 * (1 + 8) = 18, which is a. Therefore, if a = 18, aProperty( a ) would return true. \n", "wrong_ans_explanation": "This question requires you to essentially guess and check the choices to obtain the correct answer. After attempting multiple possibilities for a, you will find that a must be 18 for aProperty( a ) to return true. If a = 18, a / 10 = 1 and a % 10 = 8. Therefore, 2 * (a / 10 + a % 10) would be 2 * (1 + 8) = 18, which is a. Therefore, if a = 18, aProperty( a ) would return true. \n", "question": "The method aProperty is defined as follows:\n        \n    public boolean aProperty( int a )\n    {\n        return a == 2 * (a / 10 + a % 10);\n    }\n        \nFor which of the following values of a does aProperty( a ) return true?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 2\n\n", "\n 18           \n\n", "\n 128\n\n", "\n 28\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "The maximum number of times that Hello will be printed will occur when k = n (at its maximum). If k = n, then the inner for loop will execute n - 1 times under one iteration of the outer for loop (because r is initially 1 and r < n). The outer for loop will also execute n - 1 times (because p is initially 2 and p <= n). Therefore, since the inner for loop executes n - 1 times under one iteration of the outer for loop and the outer for loop executes n - 1 times, then Hello will be printed a maximum of (n -1)^2 times.\n", "wrong_ans_explanation": "The maximum number of times that Hello will be printed will occur when k = n (at its maximum). If k = n, then the inner for loop will execute n - 1 times under one iteration of the outer for loop (because r is initially 1 and r < n). The outer for loop will also execute n - 1 times (because p is initially 2 and p <= n). Therefore, since the inner for loop executes n - 1 times under one iteration of the outer for loop and the outer for loop executes n - 1 times, then Hello will be printed a maximum of (n -1)^2 times.\n", "question": "Consider the following code segment. \n\n    int k = [a random number such that 1 <= k <= n];\n\n    for (int p = 2; p <= k; p++)\n        for (int r = 1; r < k; r++)\n            System.out.println(\u201cHello\u201d);\n        \nWhat is the maximum number of times that Hello will be printed?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n - 1\n\n", "\n n - 2\n\n", "\n (n - 1)^2             \n\n", "\n n^2\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "You may need a paper and a pencil for this question. Starting from n = 6, x = 1 + 1 = 2 and y = 2 - 1 = 1. When n = 5, x = 2 + 1 = 3 and y = 3 - 1 = 2. When n = 4, x = 3 + 2 = 5 and y = 5 - 2 = 3. When n = 3, x = 5 + 3 = 8 and y = 8 - 3 = 5. Since n is now 2, the while loop ends and x is 8. \n        ", "wrong_ans_explanation": "You may need a paper and a pencil for this question. Starting from n = 6, x = 1 + 1 = 2 and y = 2 - 1 = 1. When n = 5, x = 2 + 1 = 3 and y = 3 - 1 = 2. When n = 4, x = 3 + 2 = 5 and y = 5 - 2 = 3. When n = 3, x = 5 + 3 = 8 and y = 8 - 3 = 5. Since n is now 2, the while loop ends and x is 8. \n        ", "question": "Consider the following method. \n        \n    public static int mystery(int n)\n    {\n        int x = 1;        \n        int y = 1;\n        while (n > 2)\n        {\n            x = x + y;        \n            y = x - y;\n            n--;        \n        }\n        return x;\n    }\n        \nWhat value is returned as a result of the call mystery(6)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 5\n\n", "\n 13\n\n", "\n 8          \n\n", "\n 1        \n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "If the word was \u201ccompiler\u201d and howFar = 3, then word.substring(howFar + 1, word.length()) would be the subsection of word from index 4 to word.length() - 1, or \u201ciler.\u201d Moreover, word.substring(0, howFar) would be the subsection of word from index 0 to howFar - 1, which is \u201ccom.\u201d Therefore, \u201cilercom\u201d is returned.\n", "wrong_ans_explanation": "If the word was \u201ccompiler\u201d and howFar = 3, then word.substring(howFar + 1, word.length()) would be the subsection of word from index 4 to word.length() - 1, or \u201ciler.\u201d Moreover, word.substring(0, howFar) would be the subsection of word from index 0 to howFar - 1, which is \u201ccom.\u201d Therefore, \u201cilercom\u201d is returned.\n", "question": "Consider the following method.\n        \n    public static String scramble(String word, int howFar)\n    {\n        return word.substring(howFar + 1, word.length()) + word.substring(0, howFar);\n    }\n\nWhat value is returned as a result of the call scramble(\u201ccompiler\u201d, 3)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n \u201cilercomp\u201d\n\n", "\n \u201cilercom\u201d       \n\n", "\n \u201ccompiler\u201d\n\n", "\n \u201cpilercom\u201d\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "This question is purely theoretical without any numbers. Every time the for loop iterates, ans is multiplied by n. But how many times does the for loop iterate? This can be answered by looking at the initialization of the for loop. Since it begins at j = 1 and j must be <= k, the for loop iterates k times. Therefore, since ans is multiplied by n a k amount of times, then ans will return n^k.\n", "wrong_ans_explanation": "This question is purely theoretical without any numbers. Every time the for loop iterates, ans is multiplied by n. But how many times does the for loop iterate? This can be answered by looking at the initialization of the for loop. Since it begins at j = 1 and j must be <= k, the for loop iterates k times. Therefore, since ans is multiplied by n a k amount of times, then ans will return n^k.\n", "question": "Consider the following method.\n        \n    public int compute(int n, int k)\n    {        \n        int ans = 1;\n        for(int j = 1; j <= k; j++)\n            ans *= n;\n        return ans;\n    }\n        \nWhich of the following represents the value returned as a result of the call compute(n, k)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n n!\n\n", "\n n * k\n\n", "\n 2^k\n\n", "\n n^k        \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "These types of questions where you have to deduct the purpose of the code segment has a very high likelihood of being on the AP. As you can see in the code segment, the first three lines of code in the while loop swap the values of indices j and k. As seen in the last two lines of code in the while loop, j and k both increase steadily and converge to the middle of the array nums. Therefore, this code swaps the values of the first half of the array with the values of the second half of the array. This is also known as reversing the contents of the array nums.\n", "wrong_ans_explanation": "These types of questions where you have to deduct the purpose of the code segment has a very high likelihood of being on the AP. As you can see in the code segment, the first three lines of code in the while loop swap the values of indices j and k. As seen in the last two lines of code in the while loop, j and k both increase steadily and converge to the middle of the array nums. Therefore, this code swaps the values of the first half of the array with the values of the second half of the array. This is also known as reversing the contents of the array nums.\n", "question": "Consider the following method. \n        \n    public static void arrayMethod(int[] nums)\n    {\n        int j = 0;\n        int k = nums.length -1;\n        while (j < k)\n        {\n            int x = nums[j];\n            nums[j] = nums[k];\n            nums[k] = x;\n            j++;\n            k--;\n        }\n    }\n                \nWhich of the following described what the method arrayMethod() does to the array nums?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n The last value in nums is copied to every location in the array.\n\n", "\n The first value in nums is copied to every location in the array.\n\n", "\n The contents of the array nums are reversed.                                   \n\n", "\n The method generates an ArrayIndexOutOfBoundsException.\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To change the name of student from Jerry to Joe, you must use the setName(name) method that has already been constructed in the Person class. But do you put student or Person before the setName(name) method to accurately change the name? Since Person is just the object type and student is the actual name of the object (since it has been initialized), the correct statement would be:\n\n    student.setName(\u201cJoe\u201d);\n", "wrong_ans_explanation": "To change the name of student from Jerry to Joe, you must use the setName(name) method that has already been constructed in the Person class. But do you put student or Person before the setName(name) method to accurately change the name? Since Person is just the object type and student is the actual name of the object (since it has been initialized), the correct statement would be:\n\n    student.setName(\u201cJoe\u201d);\n", "question": "Consider the following class declaration.\n        \n    public class Person\n    {\n        private String myName;\n        private int myYearOfBirth;\n\n        public Person(String name, int yearOfBirth)\n        {\n            myName = name;\n            myYearOfBirth = yearOfBirth;\n        }\n\n        public String getName()\n        {\n            return myName;\n        }\n\n        public void setName(String name)\n        {\n            myName = name;\n        }\n\n        // There may be instance variables, constructors, and methods that are not shown.\n    }\n                \nAssume that the following declaration has been made.\n\n    Person student = new Person(\u201cJerry\u201d, 1996);\n\nWhich of the following statements is the most appropriate for changing the name from \u201cJerry\u201d to \u201cJoe\u201d?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n student = new Person(\u201cJoe\u201d, 1996);\n\n", "\n Person.setName(\u201cJoe\u201d);\n\n", "\n student.setName(\u201cJoe\u201d);              \n\n", "\n student.getName(\u201cTom\u201d);\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Remember: Math.random() * x takes a random value from 0 to x - 1. Since the indices in myList extend from 0 to myList.size() - 1, the expression that would produce a valid random index for myList would be:\n\n    (int)( Math.random() * myList.size() ) \n", "wrong_ans_explanation": "Remember: Math.random() * x takes a random value from 0 to x - 1. Since the indices in myList extend from 0 to myList.size() - 1, the expression that would produce a valid random index for myList would be:\n\n    (int)( Math.random() * myList.size() ) \n", "question": "Assume that myList is an ArrayList that has been correctly constructed and populated with objects. Which of the following expressions produces a valid random index for myList?\n        \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n (int)( Math.random() * myList.size() ) - 1\n\n", "\n (int)( Math.random() * myList.size() )               \n\n", "\n (int)( Math.random() * myList.size() ) + 1\n\n", "\n (int)( Math.random() * (myList.size() + 1) )\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "This is an example of recursive looping. The doSomething method is executed again and again till the if condition is met. Since the if statement ends when len =1, the doSomething method is executed 4 times. The deepest nesting occurs when s reaches \u201cW\u201d and the outermost nest occurs at \u201cWATC\u201d (s equals the subsection from the 0th index to the (len - 1) index), resulting in the following output : \n        \n    W                 \n    WA\n    WAT\n    WATC\n        ", "wrong_ans_explanation": "This is an example of recursive looping. The doSomething method is executed again and again till the if condition is met. Since the if statement ends when len =1, the doSomething method is executed 4 times. The deepest nesting occurs when s reaches \u201cW\u201d and the outermost nest occurs at \u201cWATC\u201d (s equals the subsection from the 0th index to the (len - 1) index), resulting in the following output : \n        \n    W                 \n    WA\n    WAT\n    WATC\n        ", "question": "Consider the following recursive method.\n\n    public static void doSomething(String str)\n    {\n        int len = str.length();                \n        if (len > 1)\n        {\n            String s = str.substring(0, len - 1);\n            doSomething(s);\n            System.out.println(s);\n        }\n    }\n        \nWhat is printed as a result of the call doSomething(\u201cWATCH\u201d)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n W\n WA\n WAT\n WATC\n WATCH\n\n", "\n W\n WA\n WAT\n WATC\n\n", "\n WATC\n WAT\n WA\n W\n\n", "\n WATCH\n WATC\n WAT\n WA\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "The first three additions of A, B, and C simply add these letters in list, respectively. After those three lines of code, this is what list looks like:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cC]\n\nThen, list.set(2, \u201cd\u201d) replaces the current value located in the 2nd index of list with \u201cd.\u201d Now list looks like this:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d]\n\nWhen \u201cE\u201d is added at the second index, everything currently at the second index and after is shifted to the right. In addition with adding \u201cf,\u201d this is what list looks like after executing the code segment:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]        \n        ", "wrong_ans_explanation": "The first three additions of A, B, and C simply add these letters in list, respectively. After those three lines of code, this is what list looks like:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cC]\n\nThen, list.set(2, \u201cd\u201d) replaces the current value located in the 2nd index of list with \u201cd.\u201d Now list looks like this:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d]\n\nWhen \u201cE\u201d is added at the second index, everything currently at the second index and after is shifted to the right. In addition with adding \u201cf,\u201d this is what list looks like after executing the code segment:\n\n    [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]        \n        ", "question": "Consider the following code segment.\n\n    ArrayList<String> list = new ArrayList<String>();\n\n    list.add(\u201cA\u201d);\n    list.add(\u201cB\u201d);        \n    list.add(\u201cC\u201d);\n    list.set(2, \u201cd\u201d);\n    list.add(2, \u201cE\u201d);\n    list.add(\u201cf\u201d);\n                \nWhat is printed as a result of executing the code segment?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n [\u201cA\u201d, \u201cB\u201d, \u201cE\u201d, \u201cd\u201d, \u201cf\u201d]          \n\n", "\n [\u201cA\u201d, \u201cB\u201d, \u201cd\u201d, \u201cE\u201d, \u201cf\u201d] \n\n", "\n [\u201cA\u201d, \u201cE\u201d, \u201cB\u201d, \u201cd\u201d, \u201cf\u201d] \n\n", "\n [\u201cA\u201d, \u201cE\u201d, \u201cd\u201d, \u201cc\u201d, \u201cf\u201d]\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "When adding minutes to m, the number of minutes can often exceed 60, which would result in us needing to distribute this time across hours and minutes. Therefore, to accurately calculate the number of hours, we must add minutes / 60 to the current amount hours. To calculate the remaining amount of minutes, we must do minutes % 60. As a result, the correct lines of code would be:\n\n    hours = hours + minutes / 60;         \n    minutes = minutes % 60;\n        ", "wrong_ans_explanation": "When adding minutes to m, the number of minutes can often exceed 60, which would result in us needing to distribute this time across hours and minutes. Therefore, to accurately calculate the number of hours, we must add minutes / 60 to the current amount hours. To calculate the remaining amount of minutes, we must do minutes % 60. As a result, the correct lines of code would be:\n\n    hours = hours + minutes / 60;         \n    minutes = minutes % 60;\n        ", "question": "Refer to the following incomplete class declaration. \n        \n    public class TimeKeeper\n    {\n        private int hours;\n        private int minutes; // 0 <= minutes < 60\n\n        public TimeKeeper(int h, int m)\n        {\n            hours = h;\n            minutes = m;\n        }\n\n        // return the number of hours\n        public int getHours()\n        {  /* implementation not shown */  }\n\n        // return the number of minutes                \n        // Postcondition: 0 <= minutes < 60\n        public int getMinutes()\n        {  /* implementation not shown */  }\n\n        // Adds h hours and m minutes to this TimeRecord.\n        // param h the number of hours\n        // Precondition: h >= 0 \n        // param m the number of minutes\n        // Precondition: m >= 0\n        public void  update(int h, int m)\n        {\n            hours = hours + h;        \n            minutes = minutes + m;\n            /* missing code */\n        }\n\n        // \u2026 other methods not shown\n    }\n                \nWhich of the following can be used to replace /* missing code */ so that update will correctly update the time?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n minutes = minutes + hours % 60;\n\n", "\n hours = hours + minutes / 60;\n\n", "\n hours = hours + minutes / 60;         \n   minutes = minutes % 60;\n\n", "\n hours = hours + minutes % 60;\n   minutes = minutes / 60;\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "To compute the total of all times stored in time, we must use the update method to quite literally update the total time for each iteration of the for loop. Since the parameters for the update method are h and m, we must use the accessor methods for hours and minutes. Therefore, the correct expression for the missing expression would be:\n        \n    total.update(time[j].getHours(), time[j].getMinutes())\n        ", "wrong_ans_explanation": "To compute the total of all times stored in time, we must use the update method to quite literally update the total time for each iteration of the for loop. Since the parameters for the update method are h and m, we must use the accessor methods for hours and minutes. Therefore, the correct expression for the missing expression would be:\n        \n    total.update(time[j].getHours(), time[j].getMinutes())\n        ", "question": "Refer to the following incomplete class declaration. \n        \n    public class TimeKeeper\n    {\n        private int hours;\n        private int minutes; // 0 <= minutes < 60\n\n        public TimeKeeper(int h, int m)\n        {\n            hours = h;\n            minutes = m;\n        }\n\n        // return the number of hours\n        public int getHours()\n        {  /* implementation not shown */  }\n\n        // return the number of minutes                \n        // Postcondition: 0 <= minutes < 60\n        public int getMinutes()\n        {  /* implementation not shown */  }\n\n        // Adds h hours and m minutes to this TimeRecord.\n        // param h the number of hours\n        // Precondition: h >= 0 \n        // param m the number of minutes\n        // Precondition: m >= 0\n        public void  update(int h, int m)\n        {\n            hours = hours + h;        \n            minutes = minutes + m;\n            /* missing code */\n        }\n\n        // \u2026 other methods not shown\n    }\n        \nConsider the following declaration that appears in a client program.\n\n    TimeKeeper[] time = new TimeKeeper[100];\n\nAssume that time has been initialized with TimeKeeper objects. Consider the following code segment that is intended to compute the total of all the times stored in time.\n\n    TimeKeeper total = new TimeKeeper(0, 0);\n\n    for (int j = 0; j < time.length; j++)\n    {\n        /* missing expression */\n    }\n\nWhich of the following can be used to replace /* missing expression */ so that the code segment will work as intended?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n total += time[j].update()\n\n", "\n total.update(time[j].hours, time[j].minutes)\n\n", "\n total.update(time[j].getHours(), time[j].getMinutes())         \n\n", "\n time[j].update(time[j].getHours(), time[j].getMinutes())\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "For the first print statement, 4 will be printed first (since 1234 % 10 = 4). Since x / 10 != 0, mystery(123) has been called, which results in 3 being printed next (since 123 % 10). This will keep occurring until x = 1. When reaches the conditional statement, 4321 will have already been printed. Since x / 10 is now 0, we find ourselves nested within many mystery methods. To get out of each nesting, we must finish the method, which is printing x % 10. The innermost nest is x = 1, so 1 % 10 = 1. Since the outermost nest is 1234 (because this was the original number), the final print statement will be 4 (1234 % 10). Therefore, as a result of calling mystery(1234), this will be printed:   \n\n    43211234\n        ", "wrong_ans_explanation": "For the first print statement, 4 will be printed first (since 1234 % 10 = 4). Since x / 10 != 0, mystery(123) has been called, which results in 3 being printed next (since 123 % 10). This will keep occurring until x = 1. When reaches the conditional statement, 4321 will have already been printed. Since x / 10 is now 0, we find ourselves nested within many mystery methods. To get out of each nesting, we must finish the method, which is printing x % 10. The innermost nest is x = 1, so 1 % 10 = 1. Since the outermost nest is 1234 (because this was the original number), the final print statement will be 4 (1234 % 10). Therefore, as a result of calling mystery(1234), this will be printed:   \n\n    43211234\n        ", "question": "Consider the following method.\n         \n    // param x >= 0\n    public void mystery(int x)\n    {        \n        System.out.print(x % 10);\n\n        if ((x / 10) != 0)\n            mystery(x / 10);\n\n        System.out.print(x % 10);\n    }\n        \nWhich of the following is printed as a result of the call mystery(1234)?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 43211234                   \n\n", "\n 12344321\n\n", "\n 3443\n\n", "\n 1441\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since j begins from myThings.length - 1 towards 0, we know that this for loop begins at the end of the array. Additionally, we know that the conditional if statement states that if the value at index j is less than a, then stop and return j. This means that everything after index j has already been checked and is greater than or equal to a. Therefore, since z stores the value of a, all values in positions z + 1 through myThings.length are greater the or equal to a.\n        ", "wrong_ans_explanation": "Since j begins from myThings.length - 1 towards 0, we know that this for loop begins at the end of the array. Additionally, we know that the conditional if statement states that if the value at index j is less than a, then stop and return j. This means that everything after index j has already been checked and is greater than or equal to a. Therefore, since z stores the value of a, all values in positions z + 1 through myThings.length are greater the or equal to a.\n        ", "question": "Consider the following instance variable and method.\n        \n    private int[] myThings;\n\n    //Precondition: myThings contains int values in no particular order\n\n    public int mystery(int num)        \n    {\n        for (int j = myThings.length - 1; j >= 0; j--)\n        {\n            if (myThings[j] < num)\n                return j;\n        }\n        return -1;\n    }\n                \nWhich of the following best describes the contents of myThings after the following statement has been executed?\n\n    int z = mystery( a );\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n All values in positions z + 1 through myThings.length are less than a.\n\n", "\n All values in positions z + 1 through myThings.length are greater than or equal to a.     \n\n\n", "\n All values in position 0 through z are less than a.\n\n", "\n The largest value that is smaller than a is at position z.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Pay attention to the words -- only if -- in the question. You need to evluate all the choices to see which choice is correct. Among all the choices, only the boolean expression !X || !Y || !Z does evaluate to true when ONLY IF X, Y, and Z, are all false. \n", "wrong_ans_explanation": "Pay attention to the words -- only if -- in the question. You need to evluate all the choices to see which choice is correct. Among all the choices, only the boolean expression !X || !Y || !Z does evaluate to true when ONLY IF X, Y, and Z, are all false. \n", "question": "Which of the following will evaluate to true ONLY IF boolean expressions X, Y, and Z are all false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n !(X && Y && Z)\n\n", "\n !(X || Y || Z)             \n\n", "\n !X || !Y || !Z\n\n", "\n !X && !(Y && !Z)\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "An abstract class could have abstract and non-abstract methods, but is not required to have abstract methods. Additionally, abstract classes can have constructors and static methods, but is not required to have them. Moreover, abstract classes CANNOT be instantiated, but they can be subclassed. Therefore, a client program that uses Class1 must have another class that is a subclass of Class1. \n", "wrong_ans_explanation": "An abstract class could have abstract and non-abstract methods, but is not required to have abstract methods. Additionally, abstract classes can have constructors and static methods, but is not required to have them. Moreover, abstract classes CANNOT be instantiated, but they can be subclassed. Therefore, a client program that uses Class1 must have another class that is a subclass of Class1. \n", "question": "Consider the following class declaration.        \n\n    public abstract class Class1\n    {\n        private int a;\n        private int b;\n\n        // methods of the class \u2026\n    }\n\nWhich is true about Class1?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n In a client program, more than one instance of Class1 can be created.\n\n", "\n Class1 must have a constructor with two parameters in order to initialize a and b.\n\n", "\n A client program that uses Class1 must have another class that is a subclass of Class1.      \n\n\n", "\n At least one method of Class1 must be abstract.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "To find the best candidate for being a static method, you must locate the method that will remain constant throughout the entire life of the Frog object. Since swim is an action determined by the code and could occur variably, it is not a good candidate. The eat method is also variable since the Frog does not constantly eat or not eat. Since the frog does not constantly die, the die method would also be unsuitable for the static method. However, the getPondTemp method is the best candidate for being a static method because it will likely be constant from the Frog\u2019s birth to death.\n", "wrong_ans_explanation": "To find the best candidate for being a static method, you must locate the method that will remain constant throughout the entire life of the Frog object. Since swim is an action determined by the code and could occur variably, it is not a good candidate. The eat method is also variable since the Frog does not constantly eat or not eat. Since the frog does not constantly die, the die method would also be unsuitable for the static method. However, the getPondTemp method is the best candidate for being a static method because it will likely be constant from the Frog\u2019s birth to death.\n", "question": "Here are the private instance variables for a Frog object:\n\n    public class Frog\n    {\n        private String species;\n        private int age;\n        private double weight;\n        private Position pos;\t//position (x, y) in pond\n        private boolean alive;\n            \u2026\n\nWhich of the following methods in the Frog class is the best candidate for being a static method?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n swim //frog swims to new position in pond\n\n", "\n getPondTemp //return temperature of pond\n\n", "\n eat //frog eats and gains weight\n\n", "\n die //frog dies with some probability based on frog\u2019s age and pond temperature\n\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Although it may seem that the strange method changes a and b, it does not. Since x and y are local variables, an alteration of x and y does not necessarily change a and b unless it is explicitly changed. Since there is no explicit alteration of a and b, a and b remain 6 and 3, respectively. As for x and y, these variables still change because it is explicitly stated in the strange method. Therefore, the correct output would be:\n\n\t9 27       \n\t6 3\n", "wrong_ans_explanation": "Although it may seem that the strange method changes a and b, it does not. Since x and y are local variables, an alteration of x and y does not necessarily change a and b unless it is explicitly changed. Since there is no explicit alteration of a and b, a and b remain 6 and 3, respectively. As for x and y, these variables still change because it is explicitly stated in the strange method. Therefore, the correct output would be:\n\n\t9 27       \n\t6 3\n", "question": "What output will be produced by this program?\n\n    public class Mystery\n    {\n        public static void strange(int x, int y)\n        {\n            x += y;\n            y *= x;\n            System.out.println(x + \u201c \u201c + y);\n        }\n\n        public static void main(String[] args)\n        {\n            int a = 6, b = 3;\n            strange( a, b );\n            System.out.println( a + \u201c \u201c + b );\n        }\n    }\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 9 27\n 6 3\n\n", "\n 9 27\n 9 27\n\n", "\n 6 3\n 9 27\n\n", "\n 3 6\n  9\n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Remember: Variables initialized within a method only have the scope of that method. Since the main method only recognizes the count initialized within the main method, it will print that variable. The count variable in the main method is not altered by the something method, so 0 will be printed 3 times. \n", "wrong_ans_explanation": "Remember: Variables initialized within a method only have the scope of that method. Since the main method only recognizes the count initialized within the main method, it will print that variable. The count variable in the main method is not altered by the something method, so 0 will be printed 3 times. \n", "question": "Consider this program.\n\n    public class Count\n    {\n        public static void something()\n        {\n            int count = 0;\n                \u2026\n            //code to do something - no screen output produced\n        }\n\n        public static void main(String[] args)\n        {\n            int count = 0;\n            System.out.println(\u201cHow many iterations?\u201d);\n            int n = IO.readInt();\t\t//read user input\n            for (int j = 1; j <= n; j++)\n            {\n                something();\n                System.out.println(count);\n            }\n        }\n    }\n\nIf the input value for n is 3, what screen output will this program subsequently produce?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n3\n3\n3\n\n", "\n1\n2\n3\n\n", "\n0\n0\n0\n\n", "\nNo output will be produced.\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "Since a, b, and temp are local variables and nothing is returned within the something method, this method has no effect on the values x and y. Therefore, x remains 6, y remains 8, and temp is undefined (because it is unknown out of its local scope).\n", "wrong_ans_explanation": "Since a, b, and temp are local variables and nothing is returned within the something method, this method has no effect on the values x and y. Therefore, x remains 6, y remains 8, and temp is undefined (because it is unknown out of its local scope).\n", "question": "Consider the following program.\n\n    public class Test\n    {\n        public void something( int a, int b )\n        {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n    }\n\n\n    public class TestMain\n    {\n        public static void main(String[] args)\n        {\n            int x = 6, y = 8;\n            Test test = new Test();\n            Test.something(x, y);\n        }\n    }\n\nJust before the end of execution of this program, what are the values of x, y, and temp, respectively?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 8, 6, 6\n\n", "\n 6, 8, ?, where ? means undefined              \n\n", "\n 8, 6, ?, where ? means undefined\n\n", "\n 8, 6, 8\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Since constructors are not technically members of classes, they are not inherited by subclasses. Therefore, HighSchoolStudent does not inherit the constructors of Student and option I is false. Since the HighSchoolStudent is not restricted by Student, it can obviously add new methods and private instance variables. As such, option II is true. Additionally, since overriding always occurs between methods of a subclass and parent class, HighSchoolStudent can override existing methods of Student. Therefore, option II and III are true. \n", "wrong_ans_explanation": "Since constructors are not technically members of classes, they are not inherited by subclasses. Therefore, HighSchoolStudent does not inherit the constructors of Student and option I is false. Since the HighSchoolStudent is not restricted by Student, it can obviously add new methods and private instance variables. As such, option II is true. Additionally, since overriding always occurs between methods of a subclass and parent class, HighSchoolStudent can override existing methods of Student. Therefore, option II and III are true. \n", "question": "Consider these class declarations.\n\n    public class Student\n    {\n        \u2026\n    }\n\n    public class HighSchoolStudent extends Student\n    {\n        \u2026\n    }\n\nWhich is a true statement?\n\n      I. HighSchoolStudent inherits the constructors of Student.\n     II. HighSchoolStudent can add new methods and private instance variables.\n    III. HighSchoolStudent can override existing methods of Student.\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only          \n\n", "\n III only\n\n", "\n II and III only  \n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "Differences to remember between interfaces and abstract classes:\n\n\t1. Interfaces can only contain abstract methods. Abstract classes can have abstract and non-abstract methods.\n\t2. Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.\n\t3. An abstract class can provide the implementation of an interface. However, an interface can\u2019t provide the implementation of an abstract class.\n\t4. Methods of a Java interface are public by default. A Java abstract class can have private methods as well as public methods.\n\nTherefore, the statement that \u201cAll of the methods in both an abstract class and an interface are public.\u201d is false.", "wrong_ans_explanation": "Differences to remember between interfaces and abstract classes:\n\n\t1. Interfaces can only contain abstract methods. Abstract classes can have abstract and non-abstract methods.\n\t2. Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.\n\t3. An abstract class can provide the implementation of an interface. However, an interface can\u2019t provide the implementation of an abstract class.\n\t4. Methods of a Java interface are public by default. A Java abstract class can have private methods as well as public methods.\n\nTherefore, the statement that \u201cAll of the methods in both an abstract class and an interface are public.\u201d is false.", "question": "Which statement about abstract classes and interfaces is false?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n An interface cannot implement any non-default instance methods, whereas an abstract class can.\n\n\n", "\n A class may implement many interfaces but can have only one superclass.\n\n", "\n An unlimited number of unrelated classes can implement the same interface.\n\n\n", "\n All of the methods in both an abstract class and an interface are public.        \n\n"]}, {"points": "1", "Answer": "2", "correct_ans_explanation": "Notice that 93 \u00f7 16 = 5 remainder 13. So\n\n        93 = 5(16)1 + 13(16)0\n        5Dhex\n", "wrong_ans_explanation": "Notice that 93 \u00f7 16 = 5 remainder 13. So\n\n        93 = 5(16)1 + 13(16)0\n        5Dhex\n", "question": "Suppose the characters 0, 1, ... , 8, 9, A, B, C, D, E, F are used to represent a hexadecimal (base-16) number. Here A = 10, B = 11,..., F = 15. Which of the following hexadecimal numbers represents the base-10 integer 93?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 53\n\n", "\n D3\n\n", "\n 5D\n\n", "\n F3\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "\nThis statement:\n\n    Each of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code\n\nis true because the doJob method can be overridden in each of its subclasses. \n\nThis statement:\n\n    Both Accountant and Manager inherit the constructors in Employee\n\nis false because constructors are never inherited. If a subclass has no constructor, the default constructor for the superclass is generated. If the superclass does not have a default constructor, a compile-time error will occur. \n\nThis statement: \n\n    If Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\nis false because the subclasses can use accessors to access these variables. \n\nThis statement: \n\n    If Accountant has a private instance variable accounting, employee can access it\n\nis false because a superclass cannot access the private instance variables of its subclasses.\n", "wrong_ans_explanation": "\nThis statement:\n\n    Each of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code\n\nis true because the doJob method can be overridden in each of its subclasses. \n\nThis statement:\n\n    Both Accountant and Manager inherit the constructors in Employee\n\nis false because constructors are never inherited. If a subclass has no constructor, the default constructor for the superclass is generated. If the superclass does not have a default constructor, a compile-time error will occur. \n\nThis statement: \n\n    If Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\nis false because the subclasses can use accessors to access these variables. \n\nThis statement: \n\n    If Accountant has a private instance variable accounting, employee can access it\n\nis false because a superclass cannot access the private instance variables of its subclasses.\n", "question": "Consider the classes below, where Accountant and Manager are subclasses of Employees.                \n           Employee\n          \u21e7           \u21e7\n  Accountant    Manager\n\nWhich of the following is a true statement about the classes shown?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\nEach of the classes \u2014 Employee, Accountant, and Manager \u2014 can have a method doJob that has different code \n\n\n", "\nBoth Accountant and Manager inherit the constructors in Employee\n\n", "\nIf Employee has a private instance variable routine, neither Accountant nor Manager can access it \n\n\n", "\nIf Accountant has a private instance variable accounting, employee can access it\n\n\n"]}, {"points": "1", "Answer": "1", "correct_ans_explanation": "The computer should find the number in no more than 10 tries. This is because the guessing interval is halved on each successive try:\n\n    (1)        1000 \u00f7 2        =        500        numbers left to try\n    (2)        500 \u00f7 2        =        250        numbers left to try\n    (3)        250 \u00f7 2        =        125        numbers left to try\n    (4)        125 \u00f7 2        =        63        numbers left to try (at most)\n    (5)        63 \u00f7 2        =        32        numbers left to try (at most)\n    (6)        32 \u00f7 2        =        16        numbers left to try\n    (7)        16 \u00f7 2        =        8        numbers left to try\n    (8)        8 \u00f7 2        =        4        numbers left to try\n    (9)        4 \u00f7 2        =        2        numbers left to try\n    (10)       2 \u00f7 2        =        1        number left to try\n\nTen iterations of the loop leaves just 1 number left to try.\n", "wrong_ans_explanation": "The computer should find the number in no more than 10 tries. This is because the guessing interval is halved on each successive try:\n\n    (1)        1000 \u00f7 2        =        500        numbers left to try\n    (2)        500 \u00f7 2        =        250        numbers left to try\n    (3)        250 \u00f7 2        =        125        numbers left to try\n    (4)        125 \u00f7 2        =        63        numbers left to try (at most)\n    (5)        63 \u00f7 2        =        32        numbers left to try (at most)\n    (6)        32 \u00f7 2        =        16        numbers left to try\n    (7)        16 \u00f7 2        =        8        numbers left to try\n    (8)        8 \u00f7 2        =        4        numbers left to try\n    (9)        4 \u00f7 2        =        2        numbers left to try\n    (10)       2 \u00f7 2        =        1        number left to try\n\nTen iterations of the loop leaves just 1 number left to try.\n", "question": "Consider the problem of writing a game in which a user thinks of an integer from 1 to 1000 inclusive and the computer tries to guess that number. Each time the computer makes a guess, the user makes one of three responses:\n\n\"lower\" (i.e., the number is lower than the computer's guess)\n\"higher\" (i.e., the number is higher than the computer's guess)\n\"you got it in < however many > tries!\"\n\nSuppose the game is programmed so that the computer uses a binary search strategy for making its guesses. What is the maximum number of guesses the computer could make before guessing the user's number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 9\n\n", "\n 10\n\n", "\n 100\n\n", "\n 500\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "The maximum number of guesses is 1000. Suppose the user's number is 1000 and the computer's first guess happens to be 1. In a sequential search, the computer will try each successive number until it gets to 1000. Therefore, in this worst case, the computer will take 1000 guesses to reach the user's number.\n", "wrong_ans_explanation": "The maximum number of guesses is 1000. Suppose the user's number is 1000 and the computer's first guess happens to be 1. In a sequential search, the computer will try each successive number until it gets to 1000. Therefore, in this worst case, the computer will take 1000 guesses to reach the user's number.\n", "question": "Consider the problem of writing a game in which a user thinks of an integer from 1 to 1000 inclusive and the computer tries to guess that number. Each time the computer makes a guess, the user makes one of three responses:\n\n\"lower\" (i.e., the number is lower than the computer's guess)\n\"higher\" (i.e., the number is higher than the computer's guess)\n\"you got it in < however many > tries!\"\n\nSuppose the computer starts by guessing a random integer between 1 and 1000, and then uses a sequential search strategy to find the user's number. What is the maximum number of guesses the computer could make before guessing the user's number?\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n 50\n\n", "\n 250\n\n", "\n 500\n\n", "\n 1000\n\n"]}, {"points": "1", "Answer": "3", "correct_ans_explanation": "All satisfy the is-a test. Bird is-a Flyer; Sparrow is-a Bird; Sparrow is-a Flyer. Note: Since Sparrow is-a Bird, it automatically implements any interfaces implemented by Bird, its superclass.\n", "wrong_ans_explanation": "All satisfy the is-a test. Bird is-a Flyer; Sparrow is-a Bird; Sparrow is-a Flyer. Note: Since Sparrow is-a Bird, it automatically implements any interfaces implemented by Bird, its superclass.\n", "question": "Refer to the following classes:\n\n    public interface Flyer\n    { void fly(); }\n\n    public class Bird implements Flyer\n    {\n        public void fly()\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\n    public class Sparrow extends Bird\n    {\n        public void flyLow(Sparrow other)\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\nAssuming that both Bird and Sparrow have default constructors, which is (are) valid in a client class?\n\n       I. Flyer f1 = new Bird();\n      II. Bird b = new Sparrow();\n     III. Flyer f2 = new Sparrow();\n\n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "1", "Answer": "0", "correct_ans_explanation": "Method call I works because Sparrow inherits all the methods of Bird. Method call II fails because Bird, the superclass, does not inherit the methods of Sparrow, its subclass. Method call III uses a parameter that fails the is-a test: bi is not a Sparrow, which the parameter requires.\n", "wrong_ans_explanation": "Method call I works because Sparrow inherits all the methods of Bird. Method call II fails because Bird, the superclass, does not inherit the methods of Sparrow, its subclass. Method call III uses a parameter that fails the is-a test: bi is not a Sparrow, which the parameter requires.\n", "question": "Refer to the following classes:\n\n    public interface Flyer\n    { void fly(); }\n\n    public class Bird implements Flyer\n    {\n        public void fly()\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\n    public class Sparrow extends Bird\n    {\n        public void flyLow(Sparrow other)\n        { /* implementation not shown */ }\n\n        //Private instance variables and other methods not shown.\n    }\n\nConsider the following declarations in a client class.\n\n    Sparrow s = new Sparrow();\n    Bird bi = new Bird();\n\nWhich method calls would be legal?\n\n       I. s.fly();\n      II. bi.flyLow(s);\n     III. s.flyLow(bi);\n     \n", "negative_points": "0", "duration_in_seconds": "135", "question_type": "1", "options": ["\n I only\n\n", "\n II only\n\n", "\n III only\n\n", "\n I, II, and III\n\n"]}, {"points": "15", "Answer": "0", "correct_ans_explanation": "public int sequentialSearch(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return -1;\n}\n", "wrong_ans_explanation": "public int sequentialSearch(int[] a, int v)\n{\n    for (int i = 0; i < a.length; i++)\n    {\n        if (a[i] == v)\n            return i;\n    }\n    return -1;\n}\n",
    
    "question": "A sequential search simply starts at the beginning of a list and iterates through it until the desired object is found, or until the end of the list is reached. \n    The method public int sequentialSearch(int a, int v) which performs a sequential search on the array a for value v. If v exists in the list, the method returns the index of the first position where it resides; otherwise it returns -1.\n\tWrite the complete code for the method sequentialSearch.\n",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}, {"points": "15", "Answer": "0", "correct_ans_explanation": "public static int[] grow(int[] a, int k) \n{\n    if (k < 0) k = 0;\n    int[] y = new int (a.length + k); \n    for (int i = 0; i < a.length; i++)\n    {\n        y[i] = a[i];\n    }\n    return y;\n}\n", "wrong_ans_explanation": "public static int[] grow(int[] a, int k) \n{\n    if (k < 0) k = 0;\n    int[] y = new int (a.length + k); \n    for (int i = 0; i < a.length; i++)\n    {\n        y[i] = a[i];\n    }\n    return y;\n}\n",
    
    "question": "The method public static int[] grow(int [] a, int k) creates a new array whose length is k plus the length of a, copies the elements from a into the new array, returns the new array. The order of the elements is maintained. If k < 0, an exact copy of a is returned.\n\tWrite the complete code for the method grow.\n",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}, {"points": "15", "Answer": "0", "correct_ans_explanation": "(a)\npublic int limitAmplitude (int limit)\n{\n    int i = 0; \n    for (int k = 0; k < samples.length; k++)\n    { \n        if (samples [k] > limit)\n        {\n            samples [k] = limit;\n            i++;\n        }\n        else if (samples [k] < -limit) \n        {\n            samples[k] = -limit;\n            i++;\n        }\n        k++;\n    }\n\treturn i;\n}\n\n(b)\npublic void trimSilenceFromBeginning()\n{\n   int i = 0;\n   while (samples[i] == 0)\n   {\n       i++;\n   }\n   newSound = new int[samples.length - i];\n   int k = 0;\n   for (int j = i; j < samples.length; j++)\n   {\n       newSound[k] = samples[j];\n       k++;\n   }\n}\n\n\n", "wrong_ans_explanation": "(a)\npublic int limitAmplitude (int limit)\n{\n    int i = 0; \n    for (int k = 0; k < samples.length; k++)\n    { \n        if (samples [k] > limit)\n        {\n            samples [k] = limit;\n            i++;\n        }\n        else if (samples [k] < -limit) \n        {\n            samples[k] = -limit;\n            i++;\n        }\n        k++;\n    }\n\treturn i;\n}\n\n(b)\npublic void trimSilenceFromBeginning()\n{\n   int i = 0;\n   while (samples[i] == 0)\n   {\n       i++;\n   }\n   newSound = new int[samples.length - i];\n   int k = 0;\n   for (int j = i; j < samples.length; j++)\n   {\n       newSound[k] = samples[j];\n       k++;\n   }\n}\n\n\n",
    
    "question": "Digital sounds can be represented as an array of integer values. For this question, you will write two unrelated methods of the Sound class. A partial declaration of the Sound class is shown below. \n\npublic class Sound\n{ \n/** the array of values in this sound; guaranteed not to be null */       \nprivate int[] samples;\n\n/** Changes those values in this sound that have an amplitude greater than limit.\n * Values greater than limit are changed to limit. \n * Values less than -limit are changed to -limit. \n * @param limit the amplitude limit \n * Precondition: limit 0 \n * @return the number of values in this sound that \n * this method changed\n */\n\npublic int limitAmplitude (int limit) \n{ /* to be implemented in part (a) */ }\n/** Removes all silence from the beginning of this sound. \n* Silence is represented by a value of 0. \n* Precondition: samples contains at least one nonzero value \n* Postcondition: the length of samples reflects the \n* removal of starting silence\n*/\npublic void trimSilenceFromBeginning() \n{ /* to be implemented in part (b) */ }\n\n// There may be instance variables, constructors, and methods \n// that are not shown.\n\n}\n\n(a) The volume of a sound depends on the amplitude of each value in the sound. The amplitude of a value is its absolute value: For example, the amplitude of -2300 is 2300 and the amplitude of 4000 is 4000. Write the method limitAmplitude that will change any value that has an amplitude greater than the given limit. Values that are greater than limit are replaced with limit, and values that are less than -limit are replaced with -limit. The method returns the total number of values that were changed in the array. \nFor example, assume that the array samples has been initialized with the following values.\n\n40 2532 17 -2300 -17 -4000 2000 1048 -420 33 15 -32 2030 3223\n\nWhen the statement\n\nint numChanges = limitAmplitude (2000);\n\nis executed, the value of numChanges will be 5, and the array samples will contain the following values.\n\n40 2000 17 -2000 -17 -2000 2000 1048 -420 33 15 -32 2000 2000 \n\nComplete method limitAmplitude below.\n\n/** Changes those values in this sound that have an amplitude greater than limit. \n* Values greater than limit are changed to limit. \n* Values less than -limit are changed to -limit. \n* @param limit the amplitude limit \n* Precondition: limit >= 0 \n* @return the number of values in this sound that this method changed\n*/\npublic int limitAmplitude (int limit)\n\n(b) Recorded sound often begins with silence. Silence in a sound is represented by a value of 0. Write the method trimSilenceFromBeginning that removes the silence from the beginning of a sound. To remove starting silence, a new array of values is created that contains the same values as the original samples array in the same order but without the leading zeros. The instance variable samples is updated to refer to the new array. For example, suppose the instance variable samples refers to the following array.\n\nIndex 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nValue 0 0 0 0 -14 0 -35 -39 0 -7 16 32 37 29 0 0\n\nAfter trimSilenceFromBeginning has been called, the instance variable samples will refer to the following array.\n\nIndex 0 1 2 3 4 5 6 7 8 9 10 11 \nValue -14 0 -35 -39 0 -7 16 32 37 29 0 0\n\nComplete method trimSilenceFromBeginning below.\n/** Removes all silence from the beginning of this sound. \n * Silence is represented by a value of 0. \n * Precondition: samples contains at least one nonzero value \n * Postcondition: the length of samples reflects the \n * removal of starting silence\n */\npublic void trimSilenceFromBeginning()\n",
        
    "negative_points": "0", "duration_in_seconds": "1350",
    
    "question_type": "5",
    "options": ["Compare Your Answer"], "picture_or_video_name": ""
}
]}
